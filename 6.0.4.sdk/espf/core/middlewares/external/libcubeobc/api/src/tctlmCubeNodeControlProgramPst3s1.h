/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCubeNodeCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_NodeState
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_NodeStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__NODE_OFF = 0,               /**< Node is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__NODE_IDLE = 1,              /**< Node is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__NODE_PST3S_BOOT = 2,        /**< Node is booting the PST3S */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__NODE_PST3S_SHUTDOWN = 3,    /**< Node is shutting down the PST3S */
} TctlmCubeNodeControlProgramPst3s1_NodeState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sState
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_OFF = 0,      /**< PSST3S is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_BOOT = 1,     /**< PSST3S is Booting */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_IDLE = 2,     /**< PSST3S is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_AUTO = 3,     /**< PST3S is Auto-Sampling */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_ERROR = 4,    /**< PST3S is in an Error State */
} TctlmCubeNodeControlProgramPst3s1_Pst3sState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersion
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersionEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_API_VERSION_G2 = 0,     /**< PSST3S API Version G2 */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_API_VERSION_H3 = 1,     /**< PSST3S API Version H3 */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PST3S_API_VERSION_H31 = 2,    /**< PSST3S API Version H3.1 */
} TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersion;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sActiveState
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sActiveStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__POWERED_OFF = 0,    /**< PST3S Powered Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__POWERED_ON = 1,     /**< PST3S Powered On */
} TctlmCubeNodeControlProgramPst3s1_Pst3sActiveState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sOperatingModes
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sOperatingModesEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__NORMAL_MODE = 0,        /**< Normal Mode */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__FIXED_THRESHOLD = 1,    /**< Fixed Threshold */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TEST = 2,               /**< Test Mode */
} TctlmCubeNodeControlProgramPst3s1_Pst3sOperatingModes;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sDynamicModeEnum
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sDynamicModeEnumEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__DYNAMIC_MODE_INVALID = 0,    /**< Invalid Dynamic Mode. Depends on PST3S Version */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__DYNAMIC_MODE_HIGH = 1,       /**< High Dynamic Mode */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__DYNAMIC_MODE_LOW = 2,        /**< Low Dynamic Mode */
} TctlmCubeNodeControlProgramPst3s1_Pst3sDynamicModeEnum;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sSaaWorkingMode
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sSaaWorkingModeEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SAA_INVALID = 0,     /**< SAA Invalid. Depends on PST3S Version */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SAA_OFF = 1,         /**< SAA Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SAA_TRACKING = 2,    /**< SAA On when Tracking */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SAA_CAPTURE = 3,     /**< SAA on when Capture */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SAA_ALL = 4,         /**< SAA on when Tracking and Capture */
} TctlmCubeNodeControlProgramPst3s1_Pst3sSaaWorkingMode;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringSetState
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringSetStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__QFILTERING_SET_OFF = 0,    /**< Filtering Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__QFILTERING_SET_ON = 1,     /**< Filtering On */
} TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringSetState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringGetState
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringGetStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__QFILTERING_GET_INVALID = 0,    /**< Filtering Invalid. Depends on PST3S Version */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__QFILTERING_GET_OFF = 1,        /**< Filtering Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__QFILTERING_GET_ON = 2,         /**< Filtering On */
} TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringGetState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sSelfTestResult
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sSelfTestResultEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TEST_INVALID = 0,    /**< Invalid */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__CORRECT = 1,         /**< Selt-test OK */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__ERROR = 2,           /**< Selt-test Error */
} TctlmCubeNodeControlProgramPst3s1_Pst3sSelfTestResult;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sDataValid
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sDataValidEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__GESTURE_VALID = 0,     /**< Gesture Data Valid */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__ATTITUDE_VALID = 1,    /**< Attitude Data Valid */
} TctlmCubeNodeControlProgramPst3s1_Pst3sDataValid;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sExtImageState
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sExtImageStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__IMAGE_INVALID = 0,    /**< External Image State Invalid for API version */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__IMAGE_OFF = 1,        /**< External Image State Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__IMAGE_ON = 2,         /**< External Image State On */
} TctlmCubeNodeControlProgramPst3s1_Pst3sExtImageState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sRateQuality
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sRateQualityEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__RATE_INVALID = 0,    /**< Invalid - no velocity information */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__ESTIMATED = 1,       /**< Velocity is estimated from previous calculations */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__PRECISE = 2,         /**< Velocity is precise and calculated from attitude data */
} TctlmCubeNodeControlProgramPst3s1_Pst3sRateQuality;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlms
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlmsEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__NONE = 0,                        /**< No TcTlm history */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_OPERATING_MODE = 1,          /**< Set Operating Mode */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_NUM_NAVIGATION_STARS = 2,    /**< Set Number of Navigation Stars */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_EXPOSURE = 3,                /**< Set Exposure */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_FSST = 4,                    /**< Set Four Star Search Threshold */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_SECOND_CALIBRATION = 5,      /**< Set Second Calibration */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_TMT = 6,                     /**< Set Tracking Mode Threshold */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_QUAT_FILTERING = 7,          /**< Set Quaternion Filtering */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SET_SYSTEM_RESET = 8,            /**< Set System Reset */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__GET_TLM = 9,                     /**< Get Tlm */
} TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlms;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlmResult
*/
typedef enum TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlmResultEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TC_TLM_NONE = 0,       /**< No Transaction Yet */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TC_NACK = 1,           /**< TC Nack */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TC_ACK = 2,            /**< TC Ack */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TLM = 3,               /**< TLM Response */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__SUM_ERROR = 4,         /**< Sum Error */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__CORRUPT_DATA = 5,      /**< Corrupt Data */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__JUNK_DATA = 6,         /**< Junk Data */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__INCOMPLETE_MSG = 7,    /**< Incomplete Message */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TIMEOUT = 8,           /**< Timeout */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__TXERROR = 9,           /**< Tx Error */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1__OVERFLOW = 10,         /**< Overflow */
} TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlmResult;

/**
 * @brief PST3S Active State message structure
 * @details Set/Get the PST3S Active State
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_Pst3sActiveStatusStruct {
    TctlmCubeNodeControlProgramPst3s1_Pst3sActiveState activeStatus;    /**< PST3S Active State  */
    U32 unixTimeSeconds;                                                /**< Current Unix time s  (measurment unit is [s]) */
    U32 unixTimeNanoSeconds;                                            /**< Current Unix time ns  (measurment unit is [ns]. valid range is between 0 ns and 999999999 ns) */
} TctlmCubeNodeControlProgramPst3s1_Pst3sActiveStatus;

/**
 * @brief PST3S Service Settings message structure
 * @details Set/Get the PST3S Service Settings
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_Pst3sSvcSettingsStruct {
    U32 maxTcTlmErrors;                                              /**< PST3S Maximum Number of TcTlm Errors Before Entering Error State  */
    U8 sampleFrequency;                                              /**< PST3S Sample Frequency  (measurment unit is [Hz]. valid range is between 1 Hz and 15 Hz) */
    Boolean autoSample;                                              /**< PST3S Auto-Sample Enable/Disable  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersion apiVersion;    /**< PST3S API Version  */
} TctlmCubeNodeControlProgramPst3s1_Pst3sSvcSettings;

/**
 * @brief Node Service Status message structure
 * @details Node Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_NodeSvcStatusStruct {
    TctlmCubeNodeControlProgramPst3s1_NodeState nodeState;    /**< CubeNode Node Service State  */
    U32 pst3sBootErrorCode;                                   /**< PST3S Boot Error Code  */
} TctlmCubeNodeControlProgramPst3s1_NodeSvcStatus;

/**
 * @brief PST3S Service Status message structure
 * @details PST3S Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_Pst3sSvcStatusStruct {
    TctlmCubeNodeControlProgramPst3s1_Pst3sState pst3sState;                     /**< PST3S Service State  */
    U32 failureCount;                                                            /**< PST3S TcTlm Failure Count  */
    U32 failureCountLastSuccess;                                                 /**< PST3S TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlms lastTransaction;               /**< PST3S Last Transaction  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sTcTlmResult lastTransactionResult;    /**< PST3S Last Transaction Result  */
} TctlmCubeNodeControlProgramPst3s1_Pst3sSvcStatus;

/**
 * @brief PST3S RAW TLM message structure
 * @details Get PST3S TLM Packet. Triggers TLM Request
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_Pst3sTlmStruct {
    TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersion apiVersion;                                   /**< PST3S API Version  */
    F32 quat1;                                                                                      /**< PST3S Quaternion 1  */
    F32 quat2;                                                                                      /**< PST3S Quaternion 2  */
    F32 quat3;                                                                                      /**< PST3S Quaternion 3  */
    F32 quat4;                                                                                      /**< PST3S Quaternion 4  */
    F32 angVelX;                                                                                    /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                    /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                    /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3s1_Pst3sRateQuality rateQuality;                                 /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                         /**< PST3S Unix Seconds Decimal  (measurment unit is [S]. valid range is between 0 S and 1 S) */
    S8 temperature;                                                                                 /**< PST3S Temperature  (measurment unit is [C]) */
    U8 imageExposure;                                                                               /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                              /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                            /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                         /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sSelfTestResult cmosChipIdResult;                         /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sSelfTestResult fpgaMRamResult;                           /**< PST3S FPGA MRAM Self-test Result  */
    U8 numberOfExtractedStars;                                                                      /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sOperatingModes operatingMode;                            /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                 /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                          /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sDataValid dataValid;                                     /**< PST3S Data Valid  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sExtImageState extImageState;                             /**< PST3S External Image State  */
    U8 identifiedStars;                                                                             /**< PST3S Number of Identified Stars  */
    U8 deviceNumber;                                                                                /**< PST3S Device Number  */
    U8 softwareVersion;                                                                             /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                              /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                           /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sDynamicModeEnum dynamicMode;                             /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sSaaWorkingMode saaMode;                                  /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                    /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                           /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                             /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3s1_Pst3sTlm;

/**
 * @brief PST3S Attitude Data message structure
 * @details Get the Last Sampled PST3S Attitude Specific Data
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_Pst3sAttitudeStruct {
    TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersion apiVersion;                                   /**< PST3S API Version  */
    F32 quat1;                                                                                      /**< PST3S Quaternion 1  */
    F32 quat2;                                                                                      /**< PST3S Quaternion 2  */
    F32 quat3;                                                                                      /**< PST3S Quaternion 3  */
    F32 quat4;                                                                                      /**< PST3S Quaternion 4  */
    F32 angVelX;                                                                                    /**< PST3S Angular Valocity X  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelY;                                                                                    /**< PST3S Angular Valocity Y  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    F32 angVelZ;                                                                                    /**< PST3S Angular Valocity Z  (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) */
    TctlmCubeNodeControlProgramPst3s1_Pst3sRateQuality rateQuality;                                 /**< PST3S Rate Quality  */
    U32 unixSeconds;                                                                                /**< PST3S Unix Seconds  (measurment unit is [S]) */
    F32 unixSecondsDecimal;                                                                         /**< PST3S Unix Seconds Decimal  (measurment unit is [S]) */
    U8 numberOfExtractedStars;                                                                      /**< PST3S Number of Extracted Stars  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sOperatingModes operatingMode;                            /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sDataValid dataValid;                                     /**< PST3S Data Valid  */
    U8 identifiedStars;                                                                             /**< PST3S Number of Identified Stars  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3s1_Pst3sAttitude;

/**
 * @brief PST3S Housekeeping Data message structure
 * @details Get the Last Sampled PST3S Housekeeping related data
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_Pst3sHousekeepingStruct {
    TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersion apiVersion;                                   /**< PST3S API Version  */
    S8 temperature;                                                                                 /**< PST3S Temperature  (measurment unit is [C]) */
    U8 backGroundValues;                                                                            /**< PST3S BackGround Values  */
    U8 internalProcessCode;                                                                         /**< PST3S Internal Process Code  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sSelfTestResult cmosChipIdResult;                         /**< PST3S CMOS Chip ID Self-test Result  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sSelfTestResult fpgaMRamResult;                           /**< PST3S FPGA MRAM Self-test Result  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sOperatingModes operatingMode;                            /**< PST3S Operating Mode  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sExtImageState extImageState;                             /**< PST3S External Image State  */
    U8 deviceNumber;                                                                                /**< PST3S Device Number  */
    U8 softwareVerion;                                                                              /**< PST3S Software Version  */
    U8 edacErrorCount;                                                                              /**< PST3S EDAC Error Count  */
    U32 imageFrameNumber;                                                                           /**< PST3S Image Frame Number  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
} TctlmCubeNodeControlProgramPst3s1_Pst3sHousekeeping;

/**
 * @brief PST3S Config message structure
 * @details Get the Last Sampled PST3S Config related data
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramPst3s1_Pst3sConfigStruct {
    TctlmCubeNodeControlProgramPst3s1_Pst3sApiVersion apiVersion;                                   /**< PST3S API Version  */
    U8 imageExposure;                                                                               /**< PST3S Image Exposure  */
    U8 imageThreshold;                                                                              /**< PST3S Image Threshold  */
    U8 backGroundValues;                                                                            /**< PST3S BackGround Values  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sOperatingModes operatingMode;                            /**< PST3S Operating Mode  */
    U8 imagingGain;                                                                                 /**< PST3S Imaging Gain  */
    U8 minNavigationStars;                                                                          /**< PST3S Minimum Navigation Stars When Quaternion is Valid  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sDynamicModeEnum dynamicMode;                             /**< PST3S Dynamic Mode  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sSaaWorkingMode saaMode;                                  /**< PST3S SAA Mode  */
    U8 saaThreshold;                                                                                /**< PST3S SAA Threshold  */
    TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringGetState quaternionFilteringState;    /**< PST3S Quaternion Filtering State  */
    U8 fourStarCaptureThreshold;                                                                    /**< PST3S Four Star Capture Threshold  */
    U8 trackingThreshold;                                                                           /**< PST3S Tracking Threshold  */
    Boolean edacSwitch;                                                                             /**< PST3S EDAC Enabled/Disabled  */
} TctlmCubeNodeControlProgramPst3s1_Pst3sConfig;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 57, PST3S Dynamic Mode
 * @details Set the PST3S Dynamic Mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sDynamicMode(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sDynamicModeEnum setVal);

/**
 * @brief ID 58, PST3S SAA Mode
 * @details Set the PST3S SAA Mode
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sSaaMode(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sSaaWorkingMode setVal);

/**
 * @brief ID 59, PST3S Service Settings
 * @details Set/Get the PST3S Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sSvcSettings *setVal);

/**
 * @brief ID 60, PST3S Active State
 * @details Set/Get the PST3S Active State
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sActiveStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sActiveStatus *setVal);

/**
 * @brief ID 61, PST3S Quaternion Filtering
 * @details Set the PST3S Quaternion Filtering
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sQuaternionFiltering(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sQuaternionFilteringSetState setVal);

/**
 * @brief ID 62, PST3S Second Calibration (Unix Time)
 * @details Set the PST3S Second Calibration (Unix Time)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sSecondCalibration(TypeDef_TctlmEndpoint *endpoint, U32 setVal);

/**
 * @brief ID 63, PST3S Image Exposure
 * @details Set the PST3S Image Exposure
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sExposure(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 65, PST3S Number of Navigation Stars
 * @details Set the PST3S Number of navigation stars
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sNumberNavigationStars(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 66, PST3S Four Star Search Threshold
 * @details Set the PST3S Four Star Search Threshold (Not Recommended)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sFourStarSearchThreshold(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 67, PST3S Tracking Mode Threshold
 * @details Set the PST3S Tracking Mode Threshold (Not Recommended)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sTrackingModeThreshold(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 68, PST3S System Reset
 * @details Set the PST3S System Reset
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sSystemReset(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 69, PST3S Image Fixed Threshold
 * @details Set the PST3S Image Fixed Threshold (Factory Only)
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sImageFixedThreshold(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 70, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);

/**
 * @brief ID 71, PST3S SAA Threshold
 * @details Set the PST3S SAA Threshold
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sSaaThreshold(TypeDef_TctlmEndpoint *endpoint, U8 setVal);

/**
 * @brief ID 72, PST3S EDAC Off
 * @details Set the PST3S EDAC Off
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_setPst3sEdacOff(TypeDef_TctlmEndpoint *endpoint);


 /* GET function prototypes */

/**
 * @brief ID 189, Node Service Status
 * @details Node Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getNodeSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_NodeSvcStatus* returnVal);

/**
 * @brief ID 190, PST3S Config
 * @details Get the Last Sampled PST3S Config related data
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getPst3sConfig(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sConfig* returnVal);

/**
 * @brief ID 191, PST3S Attitude Data
 * @details Get the Last Sampled PST3S Attitude Specific Data
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getPst3sAttitude(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sAttitude* returnVal);

/**
 * @brief ID 192, PST3S Service Status
 * @details PST3S Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getPst3sSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sSvcStatus* returnVal);

/**
 * @brief ID 193, PST3S RAW TLM
 * @details Get PST3S TLM Packet. Triggers TLM Request
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getPst3sTlm(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sTlm* returnVal);

/**
 * @brief ID 194, PST3S Housekeeping Data
 * @details Get the Last Sampled PST3S Housekeeping related data
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getPst3sHousekeeping(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sHousekeeping* returnVal);

/**
 * @brief ID 195, PST3S Service Settings
 * @details Set/Get the PST3S Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getPst3sSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramPst3s1_Pst3sSvcSettings* returnVal);

/**
 * @brief ID 196, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramPst3s1_getNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean *returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_PST3S_1_H
