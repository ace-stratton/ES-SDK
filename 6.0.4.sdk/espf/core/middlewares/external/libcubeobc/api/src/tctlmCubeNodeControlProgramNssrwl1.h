/************************************************************************************
 * This file was auto-generated by CIDEA                           .                *
 * Please do not modify the contents of this file manually.                         *
 ***********************************************************************************/

#ifndef TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__H
#define TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__H

#include <cubeObc/cubeObc_typeDef.h>
#include <cubeObc/cubeObc_errorDef.h>
#include <cubeObc/cubeObc_tctlmDef.h>
#include "tctlmCommonFrameworkEnums.h"
#include "tctlmCommonFramework1.h"
#include "tctlmCubeNodeCommon1.h"

#ifdef __cplusplus
extern "C" {
#endif

/*******************************************************************************
 *******************************   DEFINES   ***********************************
 ******************************************************************************/

/*******************************************************************************
 *******************************   TYPEDEFS  ***********************************
 ******************************************************************************/

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwl1_NodeState
*/
typedef enum TctlmCubeNodeControlProgramNssrwl1_NodeStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NODE_OFF = 0,                /**< Node is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NODE_IDLE = 1,               /**< Node is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NODE_NSSRWL_BOOT = 2,        /**< Node is booting the NSSRWL */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NODE_NSSRWL_SHUTDOWN = 3,    /**< Node is shutting down the NSSRWL */
} TctlmCubeNodeControlProgramNssrwl1_NodeState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwl1_NssRwlState
*/
typedef enum TctlmCubeNodeControlProgramNssrwl1_NssRwlStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NSS_RWL_OFF = 0,      /**< PSST3S is Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NSS_RWL_BOOT = 1,     /**< PSST3S is Booting */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NSS_RWL_IDLE = 2,     /**< PSST3S is Idle */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NSS_RWL_AUTO = 3,     /**< NSSRWL is Auto-Sampling */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NSS_RWL_ERROR = 4,    /**< NSSRWL is in an Error State */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwl1_NssRwlActiveState
*/
typedef enum TctlmCubeNodeControlProgramNssrwl1_NssRwlActiveStateEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__POWERED_OFF = 0,    /**< NSSRWL Powered Off */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__POWERED_ON = 1,     /**< NSSRWL Powered On */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlActiveState;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlms
*/
typedef enum TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlmsEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__NONE = 0,                    /**< No TcTlm history */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__SET_MOTOR_CURRENT = 1,       /**< Set Motor Current */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__SET_WHEEL_SPEED = 2,         /**< Set Wheel Speed Reference */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__SET_TORQUE = 3,              /**< Set Torquw */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__GET_TLM_STANDARD = 4,        /**< Get Standard Telemetry */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__GET_TLM_EXTENDED = 5,        /**< Get Extended Telemetry */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__GET_TLM_SYSTEM = 6,          /**< Get System Telemetry */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__SET_SOFTWARE_RESET = 7,      /**< Set Software Reset */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__SET_SOFTWARE_EXECUTE = 8,    /**< Set Software Execute */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlms;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlmResult
*/
typedef enum TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlmResultEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__TC_TLM_NONE = 0,          /**< No Transaction Yet */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__ACK = 1,                  /**< Successful Ack on last transaction */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__ERROR_ECHO_MATCH = 2,     /**< Command byte not successfully echo'd */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__ERROR_ECHO_LENGTH = 3,    /**< Echo response length is greater than transmitted data length */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__ERROR_TLM_ACK = 4,        /**< No Ack byte received in tlm data block */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__TIMEOUT = 5,              /**< Timeout */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__TXERROR = 6,              /**< Uart Tx Error */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__RXERROR = 7,              /**< Uart Rx Error */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlmResult;

/**
 * @brief Enumeration for TctlmCubeNodeControlProgramNssrwl1_NssRwlSampleSource
*/
typedef enum TctlmCubeNodeControlProgramNssrwl1_NssRwlSampleSourceEnum {
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__STANDARD_TLM = 0,    /**< Standard telemetry is auto-sampled */
    TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1__EXTENDED_TLM = 1,    /**< Extended telemetry is auto-sampled */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlSampleSource;

/**
 * @brief NSSRWL Service Settings message structure
 * @details Set/Get the NSSRWL Service Settings
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwl1_NssRwlSvcSettingsStruct {
    U32 maxTcTlmErrors;                                                    /**< NSSRWL Maximum Number of TcTlm Errors Before Entering Error State  */
    U8 sampleFrequency;                                                    /**< NSSRWL Sample Frequency  (measurment unit is [Hz]. valid range is between 1 Hz and 50 Hz) */
    Boolean autoSample;                                                    /**< NSSRWL Auto-Sample Enable/Disable  */
    TctlmCubeNodeControlProgramNssrwl1_NssRwlSampleSource sampleSource;    /**< Selects which telemetry is sampled for wheel speed  */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlSvcSettings;

/**
 * @brief Node Service Status message structure
 * @details Node Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwl1_NodeSvcStatusStruct {
    TctlmCubeNodeControlProgramNssrwl1_NodeState nodeState;    /**< CubeNode Node Service State  */
    U32 nssRwlBootErrorCode;                                   /**< NSSRWL Boot Error Code  */
} TctlmCubeNodeControlProgramNssrwl1_NodeSvcStatus;

/**
 * @brief NSSRWL Service Status message structure
 * @details NSSRWL Service Status
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwl1_NssRwlSvcStatusStruct {
    TctlmCubeNodeControlProgramNssrwl1_NssRwlState nssRwlState;                    /**< NSSRWL Service State  */
    U32 failureCount;                                                              /**< NSSRWL TcTlm Failure Count  */
    U32 failureCountLastSuccess;                                                   /**< NSSRWL TcTlm Failure Count at Last Success  */
    TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlms lastTransaction;               /**< NSSRWL Last Transaction  */
    TctlmCubeNodeControlProgramNssrwl1_NssRwlTcTlmResult lastTransactionResult;    /**< NSSRWL Last Transaction Result  */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlSvcStatus;

/**
 * @brief Raw NSSRWL Standard TLM message structure
 * @details Get NSSRWL Standard TLM Packet
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmStandardStruct {
    U8 serialNumber;               /**< Serial Number  */
    F32 targetValue;               /**< Target Value  (valid range is between -10000  and 10000 ) */
    F32 actualWheelSpeed;          /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
    F32 actualMotorCurrent;        /**< Actual Motor current  (measurment unit is [mA]. valid range is between 0 mA and 20000 mA) */
    F32 temperature;               /**< Temperature  (measurment unit is [C]. valid range is between -273 C and 273 C) */
    F32 iSignal;                   /**< I-Signal (loop)  (valid range is between -10000  and 10000 ) */
    Boolean reactionWheelMode;     /**< Set if Reaction Wheel mode is On  */
    Boolean currentControlMode;    /**< Set if Current Control mode is Active  */
    Boolean speedControlMode;      /**< Set if Speed Control mode is Active  */
    Boolean torqueMode;            /**< Set if Torque mode is Active  */
    Boolean wheelGyroMode;         /**< Set if Wheel/Gyro mode is On  */
    Boolean omegaPiControlLoop;    /**< Set if Omega-PI Control Loop is Active  */
    Boolean anglePdControlLoop;    /**< Set if Angle-PD Control Loop is Active  */
    Boolean bootControl;           /**< Set if Boot Control is Active  */
    Boolean gyroConnected;         /**< Set if Gyro Connected  */
    Boolean gyroTelemetry;         /**< Set if Gyro Telemetry is On  */
    Boolean gyroFlagRegister;      /**< Set if Gyro Flag Register is not zero  */
    Boolean crcError;              /**< Set if CRC Error Protected Area  */
    Boolean wrongLlCommand;        /**< Set if Wrong Low-Level Command  */
    Boolean wrongHlCommand;        /**< Set if Wrong High-Level Command  */
    Boolean toutSci1Main;          /**< Set if Timeout on SCI1 Main Interface  */
    Boolean toutSci2Gyro;          /**< Set if Timeout on SCI2 Gyro Interface  */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmStandard;

/**
 * @brief Raw NSSRWL Extended TLM message structure
 * @details Get NSSRWL Extended TLM Packet
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmExtendedStruct {
    U8 serialNumber;         /**< Serial Number  */
    F32 actualWheelSpeed;    /**< Actual Wheel Speed  (measurment unit is [RPM]. valid range is between -10000 RPM and 10000 RPM) */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmExtended;

/**
 * @brief Raw NSSRWL System TLM message structure
 * @details Get NSSRWL System TLM Packet
 */
typedef struct TCTLM_PACKED TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmSystemStruct {
    U8 serialNumber;          /**< Serial Number  */
    U8 deviceType;            /**< Device Type  */
    U8 deviceId;              /**< Device ID  */
    U8 month;                 /**< Month  */
    U8 year;                  /**< Year  */
    U16 statusRegister;       /**< Status Register  */
    U16 acsRegister;          /**< ACS Flag Register  */
    U16 systemRegister;       /**< System Flag Register  */
    U16 rwaRegister;          /**< RWA Flag Register  */
    U8 gyroRegister;          /**< Gyro Flag Register  */
    U16 bootFlag;             /**< Boot Flag  */
    U16 bootVector;           /**< Boot Vector  */
    U8 acsControlInterval;    /**< ACS Control Interval  (measurment unit is [10.24ms]) */
    U16 acsStartAddr;         /**< Actual start address ACS boot control  */
    U16 tachoStartAddr;       /**< Actual start address Tacho control  */
} TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmSystem;


/*******************************************************************************
 *****************************   PROTOTYPES   **********************************
 ******************************************************************************/

 /* SET function prototypes */

/**
 * @brief ID 61, NSSRWL Software Reset
 * @details Set the NSSRWL Software Reset
 *
 * @param[in] endpoint Node endpoint location
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlSoftwareReset(TypeDef_TctlmEndpoint *endpoint);

/**
 * @brief ID 62, Torque
 * @details Set torque
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlTorque(TypeDef_TctlmEndpoint *endpoint, F32 setVal);

/**
 * @brief ID 63, NSSRWL Active State
 * @details Set/Get the NSSRWL Active State
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlActiveStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NssRwlActiveState setVal);

/**
 * @brief ID 64, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean setVal);

/**
 * @brief ID 65, NSSRWL Service Settings
 * @details Set/Get the NSSRWL Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NssRwlSvcSettings *setVal);

/**
 * @brief ID 66, Wheel Reference Speed
 * @details Set momentum wheel reference speed
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlWheelSpeedRef(TypeDef_TctlmEndpoint *endpoint, F32 setVal);

/**
 * @brief ID 67, Motor Current
 * @details Set motor current
 *
 * @param[in] endpoint Node endpoint location
 * @param[in] setVal Value Written
 *
 * @return ErrorCode ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_setNssRwlMotorCurrent(TypeDef_TctlmEndpoint *endpoint, F32 setVal);


 /* GET function prototypes */

/**
 * @brief ID 189, Raw NSSRWL Extended TLM
 * @details Get NSSRWL Extended TLM Packet
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlTlmExtended(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmExtended* returnVal);

/**
 * @brief ID 190, Wheel Speed
 * @details Wheel speed measurement
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlWheelSpeed(TypeDef_TctlmEndpoint *endpoint, F32 *returnVal);

/**
 * @brief ID 191, NSSRWL Service Settings
 * @details Set/Get the NSSRWL Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlSvcSettings(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NssRwlSvcSettings* returnVal);

/**
 * @brief ID 192, Node Service Settings
 * @details Set/Get the Node Service Settings
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNodeSvcSettings(TypeDef_TctlmEndpoint *endpoint, Boolean *returnVal);

/**
 * @brief ID 193, Node Service Status
 * @details Node Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNodeSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NodeSvcStatus* returnVal);

/**
 * @brief ID 194, NSSRWL Service Status
 * @details NSSRWL Service Status
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlSvcStatus(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NssRwlSvcStatus* returnVal);

/**
 * @brief ID 195, Raw NSSRWL Standard TLM
 * @details Get NSSRWL Standard TLM Packet
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlTlmStandard(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmStandard* returnVal);

/**
 * @brief ID 196, Raw NSSRWL System TLM
 * @details Get NSSRWL System TLM Packet
 *
 * @param[in] endpoint Node endpoint location
 * @param[out] returnVal Value Returned
 *
 * @return ErrorCode TCTLM__ERROR_OK on success
 */
ErrorCode tctlmCubeNodeControlProgramNssrwl1_getNssRwlTlmSystem(TypeDef_TctlmEndpoint *endpoint, TctlmCubeNodeControlProgramNssrwl1_NssRwlTlmSystem* returnVal);


#ifdef __cplusplus
}
#endif

#endif // TCTLM_CUBE_NODE_CONTROL_PROGRAM_NSSRWL_1_H
