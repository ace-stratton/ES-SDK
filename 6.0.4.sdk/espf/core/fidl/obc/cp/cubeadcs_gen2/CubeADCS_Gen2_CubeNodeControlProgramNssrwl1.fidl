// WARNING!!! THIS IS A GENERATED FILE! DO NOT MODIFY CONTENTS MANUALLY!!!

package endurosat.macif


<** @description: Interface for Cube ADCS Gen2 - CubeNodeControlProgramNssrwl1
    @details: id = 309
**>

interface CubeADCS_Gen2_CubeNodeControlProgramNssrwl1
{
    version {major 1 minor 0}
    
    <** @description: This enumeration holds the IDs of CubeADCS Gen2 nodes for which this interface is applicable **>
    enumeration CmdTargetNode
    {
        NodeInvalid = 0
        NodeRwl0 = 14
        NodeRwl1 = 15
        NodeRwl2 = 16
        NodeRwl3 = 17
        NodeRwl4 = 18
        
    }
    
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeNodeControlProgramNssrwl1_NodeState
    {
        
        <** @description: Node is Off **>
        NodeOff = 0
        
        <** @description: Node is Idle **>
        NodeIdle = 1
        
        <** @description: Node is booting the NSSRWL **>
        NodeNssrwlBoot = 2
        
        <** @description: Node is shutting down the NSSRWL **>
        NodeNssrwlShutdown = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeNodeControlProgramNssrwl1_NssRwlState
    {
        
        <** @description: PSST3S is Off **>
        NssRwlOff = 0
        
        <** @description: PSST3S is Booting **>
        NssRwlBoot = 1
        
        <** @description: PSST3S is Idle **>
        NssRwlIdle = 2
        
        <** @description: NSSRWL is Auto-Sampling **>
        NssRwlAuto = 3
        
        <** @description: NSSRWL is in an Error State **>
        NssRwlError = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeNodeControlProgramNssrwl1_NssRwlActiveState
    {
        
        <** @description: NSSRWL Powered Off **>
        PoweredOff = 0
        
        <** @description: NSSRWL Powered On **>
        PoweredOn = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeNodeControlProgramNssrwl1_NssRwlTcTlms
    {
        
        <** @description: No TcTlm history **>
        None = 0
        
        <** @description: Set Motor Current **>
        SetMotorCurrent = 1
        
        <** @description: Set Wheel Speed Reference **>
        SetWheelSpeed = 2
        
        <** @description: Set Torquw **>
        SetTorque = 3
        
        <** @description: Get Standard Telemetry **>
        GetTlmStandard = 4
        
        <** @description: Get Extended Telemetry **>
        GetTlmExtended = 5
        
        <** @description: Get System Telemetry **>
        GetTlmSystem = 6
        
        <** @description: Set Software Reset **>
        SetSoftwareReset = 7
        
        <** @description: Set Software Execute **>
        SetSoftwareExecute = 8
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeNodeControlProgramNssrwl1_NssRwlTcTlmResult
    {
        
        <** @description: No Transaction Yet **>
        TcTlmNone = 0
        
        <** @description: Successful Ack on last transaction **>
        Ack = 1
        
        <** @description: Command byte not successfully echo'd **>
        ErrorEchoMatch = 2
        
        <** @description: Echo response length is greater than transmitted data length **>
        ErrorEchoLength = 3
        
        <** @description: No Ack byte received in tlm data block **>
        ErrorTlmAck = 4
        
        <** @description: Timeout **>
        Timeout = 5
        
        <** @description: Uart Tx Error **>
        TxError = 6
        
        <** @description: Uart Rx Error **>
        RxError = 7
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeNodeControlProgramNssrwl1_NssRwlSampleSource
    {
        
        <** @description: Standard telemetry is auto-sampled **>
        StandardTlm = 0
        
        <** @description: Extended telemetry is auto-sampled **>
        ExtendedTlm = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_TcTlmError
    {
        
        <** @description: No Error **>
        Ok = 0
        
        <** @description: Invalid TcTlm ID **>
        InvalidId = 1
        
        <** @description: Invalid Length **>
        InvalidLength = 2
        
        <** @description: Invalid Parameter **>
        InvalidParam = 3
        
        <** @description: CRC Check Failed **>
        Crc = 4
        
        <** @description: TCTLM not implemented **>
        NotImplemented = 5
        
        <** @description: Busy **>
        TcTlmBusy = 6
        
        <** @description: Error in sequence of commands **>
        Sequence = 7
        
        <** @description: Internal error **>
        Internal = 8
        
        <** @description: Passthrough node timeout error **>
        PassTimeout = 9
        
        <** @description: Passthrough target is invalid (passthrough is disabled) **>
        PassTarget = 10
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_NodeType
    {
        
        <** @description: Invalid Node Type **>
        NodeTypeInvalid = 0
        
        <** @description: CubeComputer Type - version independant **>
        NodeTypeCubeComputer = 1
        
        <** @description: CubeSense Type - version independant **>
        NodeTypeCubeSense = 2
        
        <** @description: CubeWheel Type - version independant **>
        NodeTypeCubeWheel = 3
        
        <** @description: CubeIR Type - version independant **>
        NodeTypeCubeIr = 4
        
        <** @description: CubeMag Deploy Type - version independant **>
        NodeTypeCubeMagDeploy = 5
        
        <** @description: CubeMag Compact Type - version independant **>
        NodeTypeCubeMagCompact = 6
        
        <** @description: CubeStar Type - version independant **>
        NodeTypeCubeStar = 7
        
        <** @description: CubeAuriga Type - version independant **>
        NodeTypeAuriga = 8
        
        <** @description: CubeNode General Type - version independant **>
        NodeTypeCubeNode = 9
        
        <** @description: CubeNode SLT Type - version independant **>
        NodeTypeCubeNodeSlt = 10
        
        <** @description: CubeNode PST3S Type - version independant **>
        NodeTypeCubeNodePst3s = 11
        
        <** @description: CubeNode NSSRWL Type - version independant **>
        NodeTypeCubeNodeNssrwl = 12
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_ProgramType
    {
        
        <** @description: Invalid Program Type **>
        ProgramTypeInvalid = 0
        
        <** @description: control-program primary product application **>
        ProgramTypeControl = 1
        
        <** @description: cube-computer flash-bootloader Bootloader application **>
        ProgramTypeBootloader = 4
        
        <** @description: health-check Health Check application **>
        ProgramTypeHealthCheck = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_AbstractNode
    {
        
        <** @description: Invalid Abstract Node **>
        NodeInvalid = 0
        
        <** @description: CubeComputer **>
        NodeComputer = 1
        
        <** @description: Star tracker 0 **>
        NodeStr0 = 2
        
        <** @description: Star tracker 1 **>
        NodeStr1 = 3
        
        <** @description: Fine sun sensor 0 **>
        NodeFss0 = 4
        
        <** @description: Fine sun sensor 1 **>
        NodeFss1 = 5
        
        <** @description: Fine sun sensor 2 **>
        NodeFss2 = 6
        
        <** @description: Fine sun sensor 3 **>
        NodeFss3 = 7
        
        <** @description: Horizon sun sensor 0 **>
        NodeHss0 = 8
        
        <** @description: Horizon sun sensor 1 **>
        NodeHss1 = 9
        
        <** @description: Magnetometer sensor 0 **>
        NodeMag0 = 10
        
        <** @description: Magnetometer sensor 1 **>
        NodeMag1 = 11
        
        <** @description: External sensor 0 **>
        NodeExt0 = 12
        
        <** @description: External sensor 1 **>
        NodeExt1 = 13
        
        <** @description: Reaction wheel 0 **>
        NodeRwl0 = 14
        
        <** @description: Reaction wheel 1 **>
        NodeRwl1 = 15
        
        <** @description: Reaction wheel 2 **>
        NodeRwl2 = 16
        
        <** @description: Reaction wheel 3 **>
        NodeRwl3 = 17
        
        <** @description: Reaction wheel 4 **>
        NodeRwl4 = 18
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_SerialSource
    {
        
        <** @description: Serial number sourced from OTP **>
        SourceOtp = 0
        
        <** @description: Serial number sourced from Config **>
        SourceConfig = 1
        
    }
    
    
    
    
    <**
        @description: Set/Get the Node Service Settings
        @details: id = 0
    **>
    method setNodeSvcSettings
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: NSSRWL Auto-Boot on Startup Enable/Disable **>
            Boolean NssRwlAutoBoot
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set/Get the NSSRWL Service Settings
        @details: id = 1
    **>
    method setNssRwlSvcSettings
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: NSSRWL Maximum Number of TcTlm Errors Before Entering Error State **>
            UInt32 MaxTcTlmErrors
            
            <** @description: NSSRWL Sample Frequency **>
            UInt8 SampleFrequency
            
            <** @description: NSSRWL Auto-Sample Enable/Disable **>
            Boolean AutoSample
            
            <** @description: Selects which telemetry is sampled for wheel speed **>
            CubeNodeControlProgramNssrwl1_NssRwlSampleSource SampleSource
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set/Get the NSSRWL Active State
        @details: id = 2
    **>
    method setNssRwlActiveStatus
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: NSSRWL Active State **>
            CubeNodeControlProgramNssrwl1_NssRwlActiveState ActiveStatus
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set momentum wheel reference speed
        @details: id = 3
    **>
    method setNssRwlWheelSpeedRef
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Wheel reference speed **>
            Float SpeedRef
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set torque
        @details: id = 4
    **>
    method setNssRwlTorque
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Torque **>
            Float Torque
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set motor current
        @details: id = 5
    **>
    method setNssRwlMotorCurrent
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Current **>
            Float Current
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set the NSSRWL Software Reset
        @details: id = 6
    **>
    method setNssRwlSoftwareReset
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set/Get the Node Service Settings
        @details: id = 7
    **>
    method getNodeSvcSettings
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: NSSRWL Auto-Boot on Startup Enable/Disable **>
            Boolean NssRwlAutoBoot
            
            
        }
    }
    
    <**
        @description: Node Service Status
        @details: id = 8
    **>
    method getNodeSvcStatus
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: CubeNode Node Service State **>
            CubeNodeControlProgramNssrwl1_NodeState NodeState
            
            <** @description: NSSRWL Boot Error Code **>
            UInt32 NssRwlBootErrorCode
            
            
        }
    }
    
    <**
        @description: Set/Get the NSSRWL Service Settings
        @details: id = 9
    **>
    method getNssRwlSvcSettings
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: NSSRWL Maximum Number of TcTlm Errors Before Entering Error State **>
            UInt32 MaxTcTlmErrors
            
            <** @description: NSSRWL Sample Frequency **>
            UInt8 SampleFrequency
            
            <** @description: NSSRWL Auto-Sample Enable/Disable **>
            Boolean AutoSample
            
            <** @description: Selects which telemetry is sampled for wheel speed **>
            CubeNodeControlProgramNssrwl1_NssRwlSampleSource SampleSource
            
            
        }
    }
    
    <**
        @description: NSSRWL Service Status
        @details: id = 10
    **>
    method getNssRwlSvcStatus
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: NSSRWL Service State **>
            CubeNodeControlProgramNssrwl1_NssRwlState NssRwlState
            
            <** @description: NSSRWL TcTlm Failure Count **>
            UInt32 FailureCount
            
            <** @description: NSSRWL TcTlm Failure Count at Last Success **>
            UInt32 FailureCountLastSuccess
            
            <** @description: NSSRWL Last Transaction **>
            CubeNodeControlProgramNssrwl1_NssRwlTcTlms LastTransaction
            
            <** @description: NSSRWL Last Transaction Result **>
            CubeNodeControlProgramNssrwl1_NssRwlTcTlmResult LastTransactionResult
            
            
        }
    }
    
    <**
        @description: Wheel speed measurement
        @details: id = 11
    **>
    method getNssRwlWheelSpeed
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Wheel speed measurement in rpm **>
            Float wheelSpeed
            
            
        }
    }
    
    <**
        @description: Get NSSRWL Standard TLM Packet
        @details: id = 12
    **>
    method getNssRwlTlmStandard
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Serial Number **>
            UInt8 SerialNumber
            
            <** @description: Target Value **>
            Float TargetValue
            
            <** @description: Actual Wheel Speed **>
            Float ActualWheelSpeed
            
            <** @description: Actual Motor current **>
            Float ActualMotorCurrent
            
            <** @description: Temperature **>
            Float Temperature
            
            <** @description: I-Signal (loop) **>
            Float ISignal
            
            <** @description: Set if Reaction Wheel mode is On **>
            Boolean ReactionWheelMode
            
            <** @description: Set if Current Control mode is Active **>
            Boolean CurrentControlMode
            
            <** @description: Set if Speed Control mode is Active **>
            Boolean SpeedControlMode
            
            <** @description: Set if Torque mode is Active **>
            Boolean TorqueMode
            
            <** @description: Set if Wheel/Gyro mode is On **>
            Boolean WheelGyroMode
            
            <** @description: Set if Omega-PI Control Loop is Active **>
            Boolean OmegaPiControlLoop
            
            <** @description: Set if Angle-PD Control Loop is Active **>
            Boolean AnglePdControlLoop
            
            <** @description: Set if Boot Control is Active **>
            Boolean BootControl
            
            <** @description: Set if Gyro Connected **>
            Boolean GyroConnected
            
            <** @description: Set if Gyro Telemetry is On **>
            Boolean GyroTelemetry
            
            <** @description: Set if Gyro Flag Register is not zero **>
            Boolean GyroFlagRegister
            
            <** @description: Set if CRC Error Protected Area **>
            Boolean CrcError
            
            <** @description: Set if Wrong Low-Level Command **>
            Boolean WrongLlCommand
            
            <** @description: Set if Wrong High-Level Command **>
            Boolean WrongHlCommand
            
            <** @description: Set if Timeout on SCI1 Main Interface **>
            Boolean ToutSci1Main
            
            <** @description: Set if Timeout on SCI2 Gyro Interface **>
            Boolean ToutSci2Gyro
            
            
        }
    }
    
    <**
        @description: Get NSSRWL Extended TLM Packet
        @details: id = 13
    **>
    method getNssRwlTlmExtended
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Serial Number **>
            UInt8 SerialNumber
            
            <** @description: Actual Wheel Speed **>
            Float ActualWheelSpeed
            
            
        }
    }
    
    <**
        @description: Get NSSRWL System TLM Packet
        @details: id = 14
    **>
    method getNssRwlTlmSystem
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Serial Number **>
            UInt8 SerialNumber
            
            <** @description: Device Type **>
            UInt8 DeviceType
            
            <** @description: Device ID **>
            UInt8 DeviceId
            
            <** @description: Month **>
            UInt8 Month
            
            <** @description: Year **>
            UInt8 Year
            
            <** @description: Status Register **>
            UInt16 StatusRegister
            
            <** @description: ACS Flag Register **>
            UInt16 AcsRegister
            
            <** @description: System Flag Register **>
            UInt16 SystemRegister
            
            <** @description: RWA Flag Register **>
            UInt16 RwaRegister
            
            <** @description: Gyro Flag Register **>
            UInt8 GyroRegister
            
            <** @description: Boot Flag **>
            UInt16 BootFlag
            
            <** @description: Boot Vector **>
            UInt16 BootVector
            
            <** @description: ACS Control Interval **>
            UInt8 AcsControlInterval
            
            <** @description: Actual start address ACS boot control **>
            UInt16 AcsStartAddr
            
            <** @description: Actual start address Tacho control **>
            UInt16 TachoStartAddr
            
            
        }
    }
    
}