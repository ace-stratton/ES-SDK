// WARNING!!! THIS IS A GENERATED FILE! DO NOT MODIFY CONTENTS MANUALLY!!!

package endurosat.macif


<** @description: Interface for Cube ADCS Gen2 - CubeIrControlProgram1
    @details: id = 305
**>

interface CubeADCS_Gen2_CubeIrControlProgram1
{
    version {major 1 minor 0}
    
    <** @description: This enumeration holds the IDs of CubeADCS Gen2 nodes for which this interface is applicable **>
    enumeration CmdTargetNode
    {
        NodeInvalid = 0
        NodeHss0 = 8
        NodeHss1 = 9
        
    }
    
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeIrControlProgram1_DetectResult
    {
        
        <** @description: Initialised **>
        DetStartup = 0
        
        <** @description: Detection in progress **>
        DetPending = 1
        
        <** @description: No horizon detected in field of view **>
        NoHorizon = 2
        
        <** @description: Not enough edge points detected **>
        TooFewEdges = 3
        
        <** @description: Failed to fit shape on horizon **>
        BadFit = 4
        
        <** @description: Horizon detected **>
        Success = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeIrControlProgram1_CaptureResult
    {
        
        <** @description: Initialised **>
        CapStartup = 0
        
        <** @description: Capture in progress **>
        CapPending = 1
        
        <** @description: Successful capture **>
        CapSuccess = 2
        
        <** @description: Timeout waiting for capture to complete **>
        CapTimeout = 3
        
        <** @description: Camera driver error **>
        CapError = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeIrControlProgram1_DirSelection
    {
        
        <** @description: Download from node **>
        Download = 0
        
        <** @description: Upload to node **>
        Upload = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeIrControlProgram1_DataSelection
    {
        
        <** @description: Calibrated image **>
        ImageCalibrated = 0
        
        <** @description: Filtered (smoothed) image **>
        ImageFiltered = 1
        
        <** @description: Horizon Edges **>
        HorizonEdges = 2
        
        <** @description: EEPROM data **>
        EEPROMData = 3
        
        <** @description: Raw image electrical offsets **>
        ImageElecOffsets = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_TcTlmError
    {
        
        <** @description: No Error **>
        Ok = 0
        
        <** @description: Invalid TcTlm ID **>
        InvalidId = 1
        
        <** @description: Invalid Length **>
        InvalidLength = 2
        
        <** @description: Invalid Parameter **>
        InvalidParam = 3
        
        <** @description: CRC Check Failed **>
        Crc = 4
        
        <** @description: TCTLM not implemented **>
        NotImplemented = 5
        
        <** @description: Busy **>
        TcTlmBusy = 6
        
        <** @description: Error in sequence of commands **>
        Sequence = 7
        
        <** @description: Internal error **>
        Internal = 8
        
        <** @description: Passthrough node timeout error **>
        PassTimeout = 9
        
        <** @description: Passthrough target is invalid (passthrough is disabled) **>
        PassTarget = 10
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_NodeType
    {
        
        <** @description: Invalid Node Type **>
        NodeTypeInvalid = 0
        
        <** @description: CubeComputer Type - version independant **>
        NodeTypeCubeComputer = 1
        
        <** @description: CubeSense Type - version independant **>
        NodeTypeCubeSense = 2
        
        <** @description: CubeWheel Type - version independant **>
        NodeTypeCubeWheel = 3
        
        <** @description: CubeIR Type - version independant **>
        NodeTypeCubeIr = 4
        
        <** @description: CubeMag Deploy Type - version independant **>
        NodeTypeCubeMagDeploy = 5
        
        <** @description: CubeMag Compact Type - version independant **>
        NodeTypeCubeMagCompact = 6
        
        <** @description: CubeStar Type - version independant **>
        NodeTypeCubeStar = 7
        
        <** @description: CubeAuriga Type - version independant **>
        NodeTypeAuriga = 8
        
        <** @description: CubeNode General Type - version independant **>
        NodeTypeCubeNode = 9
        
        <** @description: CubeNode SLT Type - version independant **>
        NodeTypeCubeNodeSlt = 10
        
        <** @description: CubeNode PST3S Type - version independant **>
        NodeTypeCubeNodePst3s = 11
        
        <** @description: CubeNode NSSRWL Type - version independant **>
        NodeTypeCubeNodeNssrwl = 12
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_ProgramType
    {
        
        <** @description: Invalid Program Type **>
        ProgramTypeInvalid = 0
        
        <** @description: control-program primary product application **>
        ProgramTypeControl = 1
        
        <** @description: cube-computer flash-bootloader Bootloader application **>
        ProgramTypeBootloader = 4
        
        <** @description: health-check Health Check application **>
        ProgramTypeHealthCheck = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_AbstractNode
    {
        
        <** @description: Invalid Abstract Node **>
        NodeInvalid = 0
        
        <** @description: CubeComputer **>
        NodeComputer = 1
        
        <** @description: Star tracker 0 **>
        NodeStr0 = 2
        
        <** @description: Star tracker 1 **>
        NodeStr1 = 3
        
        <** @description: Fine sun sensor 0 **>
        NodeFss0 = 4
        
        <** @description: Fine sun sensor 1 **>
        NodeFss1 = 5
        
        <** @description: Fine sun sensor 2 **>
        NodeFss2 = 6
        
        <** @description: Fine sun sensor 3 **>
        NodeFss3 = 7
        
        <** @description: Horizon sun sensor 0 **>
        NodeHss0 = 8
        
        <** @description: Horizon sun sensor 1 **>
        NodeHss1 = 9
        
        <** @description: Magnetometer sensor 0 **>
        NodeMag0 = 10
        
        <** @description: Magnetometer sensor 1 **>
        NodeMag1 = 11
        
        <** @description: External sensor 0 **>
        NodeExt0 = 12
        
        <** @description: External sensor 1 **>
        NodeExt1 = 13
        
        <** @description: Reaction wheel 0 **>
        NodeRwl0 = 14
        
        <** @description: Reaction wheel 1 **>
        NodeRwl1 = 15
        
        <** @description: Reaction wheel 2 **>
        NodeRwl2 = 16
        
        <** @description: Reaction wheel 3 **>
        NodeRwl3 = 17
        
        <** @description: Reaction wheel 4 **>
        NodeRwl4 = 18
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_SerialSource
    {
        
        <** @description: Serial number sourced from OTP **>
        SourceOtp = 0
        
        <** @description: Serial number sourced from Config **>
        SourceConfig = 1
        
    }
    
    
    
    
    <**
        @description: Detector and sensor configuration settings
        @details: id = 0
    **>
    method setConfiguration
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Set to true to perform full Vdd and temperature compensation. Otherwise only electrical offsets **>
            Boolean CalibrateImageFull
            
            <** @description: Set to true to if doing calibration/verification on the rig **>
            Boolean UseCalibrationRig
            
            <** @description: Circular mask within which to attempt detection **>
            UInt8 CircularMaskRadius
            
            <** @description: Minimum temperature difference in dK to be considered a horizon **>
            UInt16 MinimumTempDiff
            
            <** @description: Hard threshold in dK. **>
            UInt16 MaxSpaceTemp
            
            <** @description: The offset from the max space temperature **>
            UInt8 HorizonCrossOverOffset
            
            <** @description: Minimum fradient to be considered a horizon **>
            UInt16 MinimumGradient
            
            <** @description: The minimum amount of edge points required to do a polynomial fitting **>
            UInt8 MinimumEdgePointsRequried
            
            <** @description: Minimum allowable radius for fitted circle. **>
            UInt16 CircRadiusMin
            
            <** @description: Maximum allowable radius for fitted circle. **>
            UInt16 CircRadiusMax
            
            <** @description: A constant bias to add to the measured elevation [Radians] **>
            Float HorElevBias
            
            <** @description: Maximum allowable segment to delete in outlier rejection (zero to disable). **>
            UInt16 OutlierRejMaxSeg
            
            <** @description: Maximum allowable distance between points for outlier rejection  **>
            UInt8 OutlierRejTol
            
            <** @description: Lens distortion model bore-sight X coordinate **>
            Float BoresightX
            
            <** @description: Lens distortion model bore-sight Y coordinate **>
            Float BoresightY
            
            <** @description: Lens distortion model focal length **>
            Float FocalLength
            
            <** @description: Lens distortion model coefficient K1 **>
            Float DistK1
            
            <** @description: Lens distortion model coefficient K2 **>
            Float DistK2
            
            <** @description: Lens distortion model coefficient K3 **>
            Float DistK3
            
            <** @description: Lens distortion model coefficient K4 **>
            Float DistK4
            
            <** @description: Lens distortion model coefficient K5 **>
            Float DistK5
            
            <** @description: Lens distortion model coefficient K6 **>
            Float DistK6
            
            <** @description: Lens distortion model coefficient P1 **>
            Float DistP1
            
            <** @description: Lens distortion model coefficient P2 **>
            Float DistP2
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Setup image transfer details
        @details: id = 1
    **>
    method setImageTransferSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Dsta selection **>
            CubeIrControlProgram1_DataSelection DataSelect
            
            <** @description: Download or upload image **>
            CubeIrControlProgram1_DirSelection Direction
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Pixels that are dead in the camera
        @details: id = 2
    **>
    method setDeadPixels
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Index of dead pixel **>
            UInt8 DeadPixelIndex
            
            <** @description: X Coordinate of dead pixel **>
            UInt8 PixelX
            
            <** @description: Y Coordinate of dead pixel **>
            UInt8 PixelY
            
            <** @description: Mask of dead pixel **>
            UInt8 PixelMask
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Pixels that are dead in the camera
        @details: id = 3
    **>
    method setRequestDeadPixel
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Index of dead pixel **>
            UInt8 DeadPixelIndex
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Sensor measurement result (and initiate next measurement)
        @details: id = 4
    **>
    method getMeasurementAndTrigger
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Measured elevation angle **>
            Double Elevation
            
            <** @description: Measured rotation angle **>
            Double Rotation
            
            <** @description: Result of image capture operation **>
            CubeIrControlProgram1_CaptureResult CaptureResult
            
            <** @description: Result of horizon detection operation **>
            CubeIrControlProgram1_DetectResult DetectionResult
            
            
        }
    }
    
    <**
        @description: Sensor measurement result
        @details: id = 5
    **>
    method getMeasurement
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Measured elevation angle **>
            Double Elevation
            
            <** @description: Measured rotation angle **>
            Double Rotation
            
            <** @description: Result of image capture operation **>
            CubeIrControlProgram1_CaptureResult CaptureResult
            
            <** @description: Result of horizon detection operation **>
            CubeIrControlProgram1_DetectResult DetectionResult
            
            
        }
    }
    
    <**
        @description: Sensor measurement meta-data
        @details: id = 6
    **>
    method getMeasurementMetadata
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Minimum pixel value **>
            UInt16 MinPix
            
            <** @description: Maximum pixel value **>
            UInt16 MaxPix
            
            <** @description: Average pixel value **>
            UInt16 AvgPix
            
            <** @description: Number of detected edges **>
            UInt16 NumEdgesRaw
            
            <** @description: Number of detected good edges after outlier rejection **>
            UInt16 NumEdgesCalib
            
            <** @description: Number of pixels found within the circular mask that is considered as earth/sun **>
            UInt16 NumWarmPix
            
            <** @description: Number of pixels found within the circular mask that is considered as space **>
            UInt16 NumColdPix
            
            <** @description: Centre of fitted circle X-coordinate **>
            Float CircleCenterX
            
            <** @description: Centre of fitted circle Y-coordinate **>
            Float CircleCenterY
            
            <** @description: Radius of fitted circle **>
            Float CircleRadius
            
            
        }
    }
    
    <**
        @description: Housekeeping telemetry and error flags
        @details: id = 7
    **>
    method getHealthTlm
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: MCU Temperature **>
            Int16 McuTemp
            
            <** @description: Detector ambient temperature **>
            UInt16 DetectorTemp
            
            <** @description: MCU current **>
            UInt16 McuCurrent
            
            <** @description: Detector current **>
            UInt16 DetectorCurrent
            
            <** @description: MCU supply voltage **>
            UInt16 McuVoltage
            
            <** @description: Bitmask representing virtual watchdog region warning counters.  
            @details: size = 5 **>
            UInt8[] WatchdogCount
            
            
        }
    }
    
    <**
        @description: Detector and sensor configuration settings
        @details: id = 8
    **>
    method getConfiguration
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Set to true to perform full Vdd and temperature compensation. Otherwise only electrical offsets **>
            Boolean CalibrateImageFull
            
            <** @description: Set to true to if doing calibration/verification on the rig **>
            Boolean UseCalibrationRig
            
            <** @description: Circular mask within which to attempt detection **>
            UInt8 CircularMaskRadius
            
            <** @description: Minimum temperature difference in dK to be considered a horizon **>
            UInt16 MinimumTempDiff
            
            <** @description: Hard threshold in dK. **>
            UInt16 MaxSpaceTemp
            
            <** @description: The offset from the max space temperature **>
            UInt8 HorizonCrossOverOffset
            
            <** @description: Minimum fradient to be considered a horizon **>
            UInt16 MinimumGradient
            
            <** @description: The minimum amount of edge points required to do a polynomial fitting **>
            UInt8 MinimumEdgePointsRequried
            
            <** @description: Minimum allowable radius for fitted circle. **>
            UInt16 CircRadiusMin
            
            <** @description: Maximum allowable radius for fitted circle. **>
            UInt16 CircRadiusMax
            
            <** @description: A constant bias to add to the measured elevation [Radians] **>
            Float HorElevBias
            
            <** @description: Maximum allowable segment to delete in outlier rejection (zero to disable). **>
            UInt16 OutlierRejMaxSeg
            
            <** @description: Maximum allowable distance between points for outlier rejection  **>
            UInt8 OutlierRejTol
            
            <** @description: Lens distortion model bore-sight X coordinate **>
            Float BoresightX
            
            <** @description: Lens distortion model bore-sight Y coordinate **>
            Float BoresightY
            
            <** @description: Lens distortion model focal length **>
            Float FocalLength
            
            <** @description: Lens distortion model coefficient K1 **>
            Float DistK1
            
            <** @description: Lens distortion model coefficient K2 **>
            Float DistK2
            
            <** @description: Lens distortion model coefficient K3 **>
            Float DistK3
            
            <** @description: Lens distortion model coefficient K4 **>
            Float DistK4
            
            <** @description: Lens distortion model coefficient K5 **>
            Float DistK5
            
            <** @description: Lens distortion model coefficient K6 **>
            Float DistK6
            
            <** @description: Lens distortion model coefficient P1 **>
            Float DistP1
            
            <** @description: Lens distortion model coefficient P2 **>
            Float DistP2
            
            
        }
    }
    
    <**
        @description: Measured exection time for capture and detect operations
        @details: id = 9
    **>
    method getProfileTiming
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Time to complete capture **>
            UInt16 TimeCapture
            
            <** @description: Time to calibrate image **>
            UInt16 TimeCalibrate
            
            <** @description: Time to detect horizon **>
            UInt16 TimeDetect
            
            
        }
    }
    
    <**
        @description: Pixels that are dead in the camera
        @details: id = 10
    **>
    method getRequestedDeadPixel
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Index of dead pixel **>
            UInt8 DeadPixelIndex
            
            <** @description: X Coordinate of dead pixel **>
            UInt8 PixelX
            
            <** @description: Y Coordinate of dead pixel **>
            UInt8 PixelY
            
            <** @description: Mask of dead pixel **>
            UInt8 PixelMask
            
            
        }
    }
    
}