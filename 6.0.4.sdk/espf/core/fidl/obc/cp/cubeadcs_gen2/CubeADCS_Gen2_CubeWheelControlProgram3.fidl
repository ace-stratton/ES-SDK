// WARNING!!! THIS IS A GENERATED FILE! DO NOT MODIFY CONTENTS MANUALLY!!!

package endurosat.macif


<** @description: Interface for Cube ADCS Gen2 - CubeWheelControlProgram3
    @details: id = 314
**>

interface CubeADCS_Gen2_CubeWheelControlProgram3
{
    version {major 1 minor 0}
    
    <** @description: This enumeration holds the IDs of CubeADCS Gen2 nodes for which this interface is applicable **>
    enumeration CmdTargetNode
    {
        NodeInvalid = 0
        NodeRwl0 = 14
        NodeRwl1 = 15
        NodeRwl2 = 16
        NodeRwl3 = 17
        NodeRwl4 = 18
        
    }
    
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeWheelControlProgram3_ReadReference
    {
        
        <** @description: Reference from first entry **>
        First = 0
        
        <** @description: Reference from last entry **>
        Last = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeWheelControlProgram3_ControlModeVal
    {
        
        <** @description: No control mode **>
        NoControl = 0
        
        <** @description: Duty cycle input mode **>
        DutyCycleInput = 1
        
        <** @description: Speed controller mode **>
        SpeedController = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeWheelControlProgram3_WheelErrorState
    {
        
        <** @description: Data is valid **>
        DataValid = 0
        
        <** @description: No response from encoder **>
        EncoderNoResponse = 1
        
        <** @description: Mismatch between speed reported from hall sensors vs that of encoder **>
        HallSensorEncoderMismatch = 2
        
        <** @description: Speed setpoint not reached within allocated time period **>
        SpeedNotReachedTimeout = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_TcTlmError
    {
        
        <** @description: No Error **>
        Ok = 0
        
        <** @description: Invalid TcTlm ID **>
        InvalidId = 1
        
        <** @description: Invalid Length **>
        InvalidLength = 2
        
        <** @description: Invalid Parameter **>
        InvalidParam = 3
        
        <** @description: CRC Check Failed **>
        Crc = 4
        
        <** @description: TCTLM not implemented **>
        NotImplemented = 5
        
        <** @description: Busy **>
        TcTlmBusy = 6
        
        <** @description: Error in sequence of commands **>
        Sequence = 7
        
        <** @description: Internal error **>
        Internal = 8
        
        <** @description: Passthrough node timeout error **>
        PassTimeout = 9
        
        <** @description: Passthrough target is invalid (passthrough is disabled) **>
        PassTarget = 10
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_NodeType
    {
        
        <** @description: Invalid Node Type **>
        NodeTypeInvalid = 0
        
        <** @description: CubeComputer Type - version independant **>
        NodeTypeCubeComputer = 1
        
        <** @description: CubeSense Type - version independant **>
        NodeTypeCubeSense = 2
        
        <** @description: CubeWheel Type - version independant **>
        NodeTypeCubeWheel = 3
        
        <** @description: CubeIR Type - version independant **>
        NodeTypeCubeIr = 4
        
        <** @description: CubeMag Deploy Type - version independant **>
        NodeTypeCubeMagDeploy = 5
        
        <** @description: CubeMag Compact Type - version independant **>
        NodeTypeCubeMagCompact = 6
        
        <** @description: CubeStar Type - version independant **>
        NodeTypeCubeStar = 7
        
        <** @description: CubeAuriga Type - version independant **>
        NodeTypeAuriga = 8
        
        <** @description: CubeNode General Type - version independant **>
        NodeTypeCubeNode = 9
        
        <** @description: CubeNode SLT Type - version independant **>
        NodeTypeCubeNodeSlt = 10
        
        <** @description: CubeNode PST3S Type - version independant **>
        NodeTypeCubeNodePst3s = 11
        
        <** @description: CubeNode NSSRWL Type - version independant **>
        NodeTypeCubeNodeNssrwl = 12
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_ProgramType
    {
        
        <** @description: Invalid Program Type **>
        ProgramTypeInvalid = 0
        
        <** @description: control-program primary product application **>
        ProgramTypeControl = 1
        
        <** @description: cube-computer flash-bootloader Bootloader application **>
        ProgramTypeBootloader = 4
        
        <** @description: health-check Health Check application **>
        ProgramTypeHealthCheck = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_AbstractNode
    {
        
        <** @description: Invalid Abstract Node **>
        NodeInvalid = 0
        
        <** @description: CubeComputer **>
        NodeComputer = 1
        
        <** @description: Star tracker 0 **>
        NodeStr0 = 2
        
        <** @description: Star tracker 1 **>
        NodeStr1 = 3
        
        <** @description: Fine sun sensor 0 **>
        NodeFss0 = 4
        
        <** @description: Fine sun sensor 1 **>
        NodeFss1 = 5
        
        <** @description: Fine sun sensor 2 **>
        NodeFss2 = 6
        
        <** @description: Fine sun sensor 3 **>
        NodeFss3 = 7
        
        <** @description: Horizon sun sensor 0 **>
        NodeHss0 = 8
        
        <** @description: Horizon sun sensor 1 **>
        NodeHss1 = 9
        
        <** @description: Magnetometer sensor 0 **>
        NodeMag0 = 10
        
        <** @description: Magnetometer sensor 1 **>
        NodeMag1 = 11
        
        <** @description: External sensor 0 **>
        NodeExt0 = 12
        
        <** @description: External sensor 1 **>
        NodeExt1 = 13
        
        <** @description: Reaction wheel 0 **>
        NodeRwl0 = 14
        
        <** @description: Reaction wheel 1 **>
        NodeRwl1 = 15
        
        <** @description: Reaction wheel 2 **>
        NodeRwl2 = 16
        
        <** @description: Reaction wheel 3 **>
        NodeRwl3 = 17
        
        <** @description: Reaction wheel 4 **>
        NodeRwl4 = 18
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_SerialSource
    {
        
        <** @description: Serial number sourced from OTP **>
        SourceOtp = 0
        
        <** @description: Serial number sourced from Config **>
        SourceConfig = 1
        
    }
    
    
    
    
    <**
        @description: Set momentum wheel reference speed
        @details: id = 0
    **>
    method setWheelSpeedRef
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Wheel reference speed **>
            Float SpeedRef
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set motor commanded PWM control signal
        @details: id = 1
    **>
    method setWheelDuty
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Duty cycle of motor PWM control signal. The torque provided by the motor will be proportional to the PWM signal **>
            Float DutyCycle
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set the back-up wheel mode
        @details: id = 2
    **>
    method setBackupWheelMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Enable the back-up mode **>
            Boolean BackupMode
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Clear the processor error flags
        @details: id = 3
    **>
    method setClearErrors
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Main speed controller gain values
        @details: id = 4
    **>
    method setMainGain
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Proportional gain **>
            Float Kp
            
            <** @description: Integrator gain **>
            Float Ki
            
            <** @description: Feedback gain **>
            Float Kd
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Backup speed controller gain values
        @details: id = 5
    **>
    method setBackupGain
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Proportional gain **>
            Float Kp
            
            <** @description: Integrator gain **>
            Float Ki
            
            <** @description: Feedback gain **>
            Float Kd
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: General PWM gain
        @details: id = 6
    **>
    method setPWMGain
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Main gain **>
            Float K
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Switch motor power on/off
        @details: id = 7
    **>
    method setMotorPower
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Switch motor power switch on/off **>
            Boolean MotorPowerSwitch
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Backup speed controller gain values
        @details: id = 8
    **>
    method getBackupGain
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Proportional gain **>
            Float Kp
            
            <** @description: Integrator gain **>
            Float Ki
            
            <** @description: Feedback gain **>
            Float Kd
            
            
        }
    }
    
    <**
        @description: Main speed controller gain values
        @details: id = 9
    **>
    method getMainGain
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Proportional gain **>
            Float Kp
            
            <** @description: Integrator gain **>
            Float Ki
            
            <** @description: Feedback gain **>
            Float Kd
            
            
        }
    }
    
    <**
        @description: General PWM gain
        @details: id = 10
    **>
    method getPWMGain
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Main gain **>
            Float K
            
            
        }
    }
    
    <**
        @description: Processor status and error flags
        @details: id = 11
    **>
    method getStatusErrorFlags
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: An invalid telemetry request was received **>
            Boolean InvalidTelemetry
            
            <** @description: An invalid telecommand was received **>
            Boolean InvalidTelecommand
            
            <** @description: Encoder indicates an error **>
            Boolean EncoderError
            
            <** @description: Error in UART protocol **>
            Boolean UARTError
            
            <** @description: Error in I2C protocol **>
            Boolean I2CError
            
            <** @description: Error in CAN protocol **>
            Boolean CANError
            
            <** @description: Configuration load error **>
            Boolean ConfigError
            
            <** @description: Speed measurements indicates an error **>
            Boolean SpeedError
            
            
        }
    }
    
    <**
        @description: Complete wheel data
        @details: id = 12
    **>
    method getWheelData
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Wheel speed measurement in rpm **>
            Float WheelSpeed
            
            <** @description: Wheel backup speed measurement in rpm **>
            Float WheelSpeedBackup
            
            <** @description: Wheel reference speed in rpm **>
            Float WheelReference
            
            <** @description: Battery current measurement **>
            UInt16 BatteryCurrent
            
            <** @description: Wheel data status **>
            CubeWheelControlProgram3_WheelErrorState WheelErrorState
            
            
        }
    }
    
    <**
        @description: Set motor commanded PWM control signal
        @details: id = 13
    **>
    method getWheelDuty
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Duty cycle of motor PWM control signal. The torque provided by the motor will be proportional to the PWM signal **>
            Float DutyCycle
            
            
        }
    }
    
    <**
        @description: Health telemetry for CubeWheel
        @details: id = 14
    **>
    method getHealthTlm
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Battery current measurement **>
            UInt16 BatteryCurrent
            
            <** @description: Battery voltage measurement **>
            UInt16 BatteryVoltage
            
            <** @description: Total 3.3V Current **>
            UInt16 DigitalCurrent
            
            <** @description: MCU temperature measurement **>
            Float McuTemperature
            
            <** @description: Bitmask representing virtual watchdog region warning counters.  
            @details: size = 5 **>
            UInt8[] WatchdogCount
            
            
        }
    }
    
    <**
        @description: Set momentum wheel reference speed
        @details: id = 15
    **>
    method getWheelSpeedRef
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Wheel reference speed **>
            Float SpeedRef
            
            
        }
    }
    
    <**
        @description: Wheel speed measurement
        @details: id = 16
    **>
    method getWheelSpeed
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Wheel speed measurement in rpm **>
            Float wheelSpeed
            
            <** @description: Wheel error state **>
            CubeWheelControlProgram3_WheelErrorState WheelErrorState
            
            
        }
    }
    
    <**
        @description: Switch motor power on/off
        @details: id = 17
    **>
    method getMotorPower
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Switch motor power switch on/off **>
            Boolean MotorPowerSwitch
            
            
        }
    }
    
    <**
        @description: Get the motor control mode
        @details: id = 18
    **>
    method getControlMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Control mode of motor **>
            CubeWheelControlProgram3_ControlModeVal controlMode
            
            
        }
    }
    
    <**
        @description: Set the back-up wheel mode
        @details: id = 19
    **>
    method getBackupWheelMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Enable the back-up mode **>
            Boolean BackupMode
            
            
        }
    }
    
}