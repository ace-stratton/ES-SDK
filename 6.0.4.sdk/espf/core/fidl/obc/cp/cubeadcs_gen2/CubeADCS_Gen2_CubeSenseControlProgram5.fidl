// WARNING!!! THIS IS A GENERATED FILE! DO NOT MODIFY CONTENTS MANUALLY!!!

package endurosat.macif


<** @description: Interface for Cube ADCS Gen2 - CubeSenseControlProgram5
    @details: id = 312
**>

interface CubeADCS_Gen2_CubeSenseControlProgram5
{
    version {major 1 minor 0}
    
    <** @description: This enumeration holds the IDs of CubeADCS Gen2 nodes for which this interface is applicable **>
    enumeration CmdTargetNode
    {
        NodeInvalid = 0
        NodeFss0 = 4
        NodeFss1 = 5
        NodeFss2 = 6
        NodeFss3 = 7
        
    }
    
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeSenseControlProgram5_LocSelection
    {
        
        <** @description: Top Half of SRAM **>
        Top = 0
        
        <** @description: Bottom Half of SRAM **>
        Bot = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeSenseControlProgram5_DirSelection
    {
        
        <** @description: Download from node **>
        Download = 0
        
        <** @description: Upload to node **>
        Upload = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeSenseControlProgram5_ImageSize
    {
        
        <** @description: 1024 x 1024 **>
        size1024x1024 = 0
        
        <** @description: 512 x 512 **>
        size512x512 = 1
        
        <** @description: 256 x 256 **>
        size256x256 = 2
        
        <** @description: 128 x 128 **>
        size128x128 = 3
        
        <** @description: 64 x 64 **>
        size64x64 = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeSenseControlProgram5_DetectResult
    {
        
        <** @description: Initialized **>
        DetStartup = 0
        
        <** @description: Nothing Detected **>
        NoDetect = 1
        
        <** @description: Pending a result **>
        DetPending = 2
        
        <** @description: No Sun found **>
        SunNotFound = 6
        
        <** @description: Sun detected **>
        Success = 7
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeSenseControlProgram5_CaptureResult
    {
        
        <** @description: Initialized **>
        CapStartup = 0
        
        <** @description: Issued but not complete **>
        CapPending = 1
        
        <** @description: Successful capture **>
        CaptureSuccessNormal = 2
        
        <** @description: Response Timeout **>
        Timeout = 3
        
        <** @description: Overcurrent Detected **>
        SRAMErr = 4
        
        <** @description: Successful capture but result flipped **>
        CaptureSuccessFlipped = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_TcTlmError
    {
        
        <** @description: No Error **>
        Ok = 0
        
        <** @description: Invalid TcTlm ID **>
        InvalidId = 1
        
        <** @description: Invalid Length **>
        InvalidLength = 2
        
        <** @description: Invalid Parameter **>
        InvalidParam = 3
        
        <** @description: CRC Check Failed **>
        Crc = 4
        
        <** @description: TCTLM not implemented **>
        NotImplemented = 5
        
        <** @description: Busy **>
        TcTlmBusy = 6
        
        <** @description: Error in sequence of commands **>
        Sequence = 7
        
        <** @description: Internal error **>
        Internal = 8
        
        <** @description: Passthrough node timeout error **>
        PassTimeout = 9
        
        <** @description: Passthrough target is invalid (passthrough is disabled) **>
        PassTarget = 10
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_NodeType
    {
        
        <** @description: Invalid Node Type **>
        NodeTypeInvalid = 0
        
        <** @description: CubeComputer Type - version independant **>
        NodeTypeCubeComputer = 1
        
        <** @description: CubeSense Type - version independant **>
        NodeTypeCubeSense = 2
        
        <** @description: CubeWheel Type - version independant **>
        NodeTypeCubeWheel = 3
        
        <** @description: CubeIR Type - version independant **>
        NodeTypeCubeIr = 4
        
        <** @description: CubeMag Deploy Type - version independant **>
        NodeTypeCubeMagDeploy = 5
        
        <** @description: CubeMag Compact Type - version independant **>
        NodeTypeCubeMagCompact = 6
        
        <** @description: CubeStar Type - version independant **>
        NodeTypeCubeStar = 7
        
        <** @description: CubeAuriga Type - version independant **>
        NodeTypeAuriga = 8
        
        <** @description: CubeNode General Type - version independant **>
        NodeTypeCubeNode = 9
        
        <** @description: CubeNode SLT Type - version independant **>
        NodeTypeCubeNodeSlt = 10
        
        <** @description: CubeNode PST3S Type - version independant **>
        NodeTypeCubeNodePst3s = 11
        
        <** @description: CubeNode NSSRWL Type - version independant **>
        NodeTypeCubeNodeNssrwl = 12
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_ProgramType
    {
        
        <** @description: Invalid Program Type **>
        ProgramTypeInvalid = 0
        
        <** @description: control-program primary product application **>
        ProgramTypeControl = 1
        
        <** @description: cube-computer flash-bootloader Bootloader application **>
        ProgramTypeBootloader = 4
        
        <** @description: health-check Health Check application **>
        ProgramTypeHealthCheck = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_AbstractNode
    {
        
        <** @description: Invalid Abstract Node **>
        NodeInvalid = 0
        
        <** @description: CubeComputer **>
        NodeComputer = 1
        
        <** @description: Star tracker 0 **>
        NodeStr0 = 2
        
        <** @description: Star tracker 1 **>
        NodeStr1 = 3
        
        <** @description: Fine sun sensor 0 **>
        NodeFss0 = 4
        
        <** @description: Fine sun sensor 1 **>
        NodeFss1 = 5
        
        <** @description: Fine sun sensor 2 **>
        NodeFss2 = 6
        
        <** @description: Fine sun sensor 3 **>
        NodeFss3 = 7
        
        <** @description: Horizon sun sensor 0 **>
        NodeHss0 = 8
        
        <** @description: Horizon sun sensor 1 **>
        NodeHss1 = 9
        
        <** @description: Magnetometer sensor 0 **>
        NodeMag0 = 10
        
        <** @description: Magnetometer sensor 1 **>
        NodeMag1 = 11
        
        <** @description: External sensor 0 **>
        NodeExt0 = 12
        
        <** @description: External sensor 1 **>
        NodeExt1 = 13
        
        <** @description: Reaction wheel 0 **>
        NodeRwl0 = 14
        
        <** @description: Reaction wheel 1 **>
        NodeRwl1 = 15
        
        <** @description: Reaction wheel 2 **>
        NodeRwl2 = 16
        
        <** @description: Reaction wheel 3 **>
        NodeRwl3 = 17
        
        <** @description: Reaction wheel 4 **>
        NodeRwl4 = 18
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_SerialSource
    {
        
        <** @description: Serial number sourced from OTP **>
        SourceOtp = 0
        
        <** @description: Serial number sourced from Config **>
        SourceConfig = 1
        
    }
    
    
    
    
    <**
        @description: Distortion coefficients for CAM
        @details: id = 0
    **>
    method setCamLensDistortion
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Coefficient 0 **>
            Float C0
            
            <** @description: Coefficient 0 **>
            Float C1
            
            <** @description: Coefficient 0 **>
            Float C2
            
            <** @description: Coefficient 0 **>
            Float C3
            
            <** @description: Coefficient 0 **>
            Float C4
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Capture image and perform detection
        @details: id = 1
    **>
    method setCaptureDetect
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Performs sun detection only
        @details: id = 2
    **>
    method setDetect
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Clear overcurrent flags
        @details: id = 3
    **>
    method setClearOvercurrentFlags
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Capture image to specified location
        @details: id = 4
    **>
    method setImageCapture
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Location in SRAM to save image **>
            CubeSenseControlProgram5_LocSelection LocSelect
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Setup image transfer details
        @details: id = 5
    **>
    method setImageTransferSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Location in SRAM from which to download **>
            CubeSenseControlProgram5_LocSelection LocSelect
            
            <** @description: Resolution selection of image to be downloaded **>
            CubeSenseControlProgram5_ImageSize ImageSize
            
            <** @description: Download or upload image **>
            CubeSenseControlProgram5_DirSelection Direction
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set Camera boresight pixel location
        @details: id = 6
    **>
    method setCamBoresight
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: 100\*(X Pixel location of camera boresight) **>
            Double Xpixel
            
            <** @description: 100\*(Y Pixel location of camera boresight) **>
            Double Ypixel
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Specify which areas of sensor to mask
        @details: id = 7
    **>
    method setCamMask
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Number indicating which of 5 (0-4) areas will be specified **>
            UInt8 AreaNumber
            
            <** @description: Minimum X value of the area (X=0 is left side of image) **>
            UInt16 Xmin
            
            <** @description: Maximum X value of the area **>
            UInt16 Xmax
            
            <** @description: Minimum Y value of the area (Y=0 is top of image) **>
            UInt16 Ymin
            
            <** @description: Maximum Y value of the area **>
            UInt16 Ymax
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set threshold for cam detection
        @details: id = 8
    **>
    method setCamThreshold
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Threshold for detection **>
            UInt8 Threshold
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Detection Area Row Select
        @details: id = 9
    **>
    method setDetectionAreaRowSelect
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Row select **>
            UInt8 RowSelect
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Timestamp of last results
        @details: id = 10
    **>
    method getSensorResultsTimestamp
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix timestamp s **>
            UInt32 UnixTimestampSeconds
            
            <** @description: Unix timestamp ns **>
            UInt32 UnixTimestampNanoSeconds
            
            
        }
    }
    
    <**
        @description: Distortion coefficients for CAM
        @details: id = 11
    **>
    method getCamLensDistortion
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Coefficient 0 **>
            Float C0
            
            <** @description: Coefficient 0 **>
            Float C1
            
            <** @description: Coefficient 0 **>
            Float C2
            
            <** @description: Coefficient 0 **>
            Float C3
            
            <** @description: Coefficient 0 **>
            Float C4
            
            
        }
    }
    
    <**
        @description: 5 masked areas each specified by 4 coordinates
        @details: id = 12
    **>
    method getCamMasks
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Minimum X of Area 1 **>
            UInt16 Area1Xmin
            
            <** @description: Maximum X of Area 1 **>
            UInt16 Area1Xmax
            
            <** @description: Minimum Y of Area 1 **>
            UInt16 Area1Ymin
            
            <** @description: Maximum Y of Area 1 **>
            UInt16 Area1Ymax
            
            <** @description: Minimum X of Area 2 **>
            UInt16 Area2Xmin
            
            <** @description: Maximum X of Area 2 **>
            UInt16 Area2Xmax
            
            <** @description: Minimum Y of Area 2 **>
            UInt16 Area2Ymin
            
            <** @description: Maximum Y of Area 2 **>
            UInt16 Area2Ymax
            
            <** @description: Minimum X of Area 3 **>
            UInt16 Area3Xmin
            
            <** @description: Maximum X of Area 3 **>
            UInt16 Area3Xmax
            
            <** @description: Minimum Y of Area 3 **>
            UInt16 Area3Ymin
            
            <** @description: Maximum Y of Area 3 **>
            UInt16 Area3Ymax
            
            <** @description: Minimum X of Area 4 **>
            UInt16 Area4Xmin
            
            <** @description: Maximum X of Area 4 **>
            UInt16 Area4Xmax
            
            <** @description: Minimum Y of Area 4 **>
            UInt16 Area4Ymin
            
            <** @description: Maximum Y of Area 4 **>
            UInt16 Area4Ymax
            
            <** @description: Minimum X of Area 5 **>
            UInt16 Area5Xmin
            
            <** @description: Maximum X of Area 5 **>
            UInt16 Area5Xmax
            
            <** @description: Minimum Y of Area 5 **>
            UInt16 Area5Ymin
            
            <** @description: Maximum Y of Area 5 **>
            UInt16 Area5Ymax
            
            
        }
    }
    
    <**
        @description: Sensor results
        @details: id = 13
    **>
    method getSensorResults
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Alpha Angle **>
            Double SensorA
            
            <** @description: Beta Angle **>
            Double SensorB
            
            <** @description: 0 = Start-up, 1 = Result pending, 2 = Success, 3 = Timeout, 4 = SRAMErr **>
            CubeSenseControlProgram5_CaptureResult SensorCaptureResult
            
            <** @description: 0 = Start-up, 1 = No Detection Performed, 2 = Detection Pending, 6 = Sun not found, 7 = Succesful Detection **>
            CubeSenseControlProgram5_DetectResult SensorDetectionResult
            
            
        }
    }
    
    <**
        @description: Sensor Results with Auto-trigger
        @details: id = 14
    **>
    method getSensorResultTrigger
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Alpha Angle **>
            Double SensorA
            
            <** @description: Beta Angle **>
            Double SensorB
            
            <** @description: 0 = Start-up, 1 = Result pending, 2 = Success, 3 = Timeout, 4 = SRAMErr **>
            CubeSenseControlProgram5_CaptureResult SensorCaptureResult
            
            <** @description: 0 = Start-up, 1 = No Detection Performed, 2 = Detection Pending, 6 = Sun not found, 7 = Succesful Detection **>
            CubeSenseControlProgram5_DetectResult SensorDetectionResult
            
            
        }
    }
    
    <**
        @description: Raw pixel values for calibration perposes
        @details: id = 15
    **>
    method getAutoCamSensorRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: The raw X pixel value **>
            Double PixelX
            
            <** @description: The raw Y pixel value **>
            Double PixelY
            
            
        }
    }
    
    <**
        @description: Detection Area Row (25 pixels)
        @details: id = 16
    **>
    method getDetectionAreaRow
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Row bytes  
            @details: size = 25 **>
            UInt8[] RowBytes
            
            
        }
    }
    
    <**
        @description: Set Camera boresight pixel location
        @details: id = 17
    **>
    method getCamBoresight
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: 100\*(X Pixel location of camera boresight) **>
            Double Xpixel
            
            <** @description: 100\*(Y Pixel location of camera boresight) **>
            Double Ypixel
            
            
        }
    }
    
}