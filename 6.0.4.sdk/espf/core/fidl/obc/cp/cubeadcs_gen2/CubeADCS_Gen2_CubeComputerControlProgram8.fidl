// WARNING!!! THIS IS A GENERATED FILE! DO NOT MODIFY CONTENTS MANUALLY!!!

package endurosat.macif


<** @description: Interface for Cube ADCS Gen2 - CubeComputerControlProgram8
    @details: id = 303
**>

interface CubeADCS_Gen2_CubeComputerControlProgram8
{
    version {major 1 minor 0}
    
    <** @description: This enumeration holds the IDs of CubeADCS Gen2 nodes for which this interface is applicable **>
    enumeration CmdTargetNode
    {
        NodeInvalid = 0
        NodeComputer = 1
        
    }
    
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_AdcsRunModeSelect
    {
        
        <** @description: ADCS loop is inactive **>
        AdcsOff = 0
        
        <** @description: ADCS loop is active **>
        AdcsEnabled = 1
        
        <** @description: ADCS loop executed on trigger **>
        AdcsTriggered = 2
        
        <** @description: ADCS is in simulation mode **>
        AdcsSimulation = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_AdcsOpStateSelect
    {
        
        <** @description: Manual operational state **>
        OpStateManual = 0
        
        <** @description: Autonomous operational state **>
        OpStateAuto = 1
        
        <** @description: Safe operational state **>
        OpStateSafe = 2
        
        <** @description: Fault operational state **>
        OpStateFault = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_EstSelect
    {
        
        <** @description: EstMain **>
        EstMain = 0
        
        <** @description: EstBackup **>
        EstBackup = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_EstModeSelect
    {
        
        <** @description: No estimator **>
        EstNone = 0
        
        <** @description: Gyro measured rates **>
        EstGyro = 1
        
        <** @description: Magnetometer estimated rates **>
        EstMagRkf = 2
        
        <** @description: Magnetometer estimated rates with pitch estimation **>
        EstPitchRkf = 3
        
        <** @description: Triad attitude estimation plus gyro rates **>
        EstTriad = 4
        
        <** @description: Full state EKF **>
        EstFullEkf = 5
        
        <** @description: Gyro EKF for attitude and gyro bias estimation **>
        EstGyroEkf = 6
        
        <** @description: User coded estimator **>
        EstUser = 100
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_ConModeSelect
    {
        
        <** @description: No control **>
        ConNone = 0
        
        <** @description: Single axis Bdot for detumbling **>
        ConBdot = 1
        
        <** @description: Y-Thomson spin **>
        ConYspin = 2
        
        <** @description: 3-axis Bdot detumbling **>
        ConBdot3 = 3
        
        <** @description: 3-axis low power detumbling **>
        ConDetumble = 4
        
        <** @description: Sun Y-axis spin detumbling **>
        ConSunYspin = 5
        
        <** @description: Z-Thomson spin **>
        ConZspin = 6
        
        <** @description: Sun Z-axis spin detumbling **>
        ConSunZspin = 7
        
        <** @description: Mag control of GG boom and yaw zero control **>
        ConGGboom = 8
        
        <** @description: Mag control of GG boom and Z-RW yaw sun pointing **>
        ConGGsun = 9
        
        <** @description: Initial Y-wheel ramp to Y-Wheel control **>
        ConYwheelInit = 10
        
        <** @description: Y-wheel pitch control **>
        ConYwheel = 11
        
        <** @description: 3-axis reaction wheel control **>
        ConXYZwheel = 12
        
        <** @description: RW sun tracking control **>
        ConSunTrack = 13
        
        <** @description: RW EO target tracking control **>
        ConTgtTrack = 14
        
        <** @description: RW Earth target steering control **>
        ConTgtSteer = 15
        
        <** @description: RW G/S target tracking control **>
        ConGndTrack = 16
        
        <** @description: RW Inertial target tracking control **>
        ConIrcTrack = 17
        
        <** @description: RW moon tracking control **>
        ConMoonTrack = 18
        
        <** @description: RW satellite target tracking control **>
        ConSatTrack = 19
        
        <** @description: Nadir pointing and yaw towards the sun **>
        ConYawSun = 20
        
        <** @description: Nadir pointing and yaw towards ground target **>
        ConYawTarget = 21
        
        <** @description: Velocity pointing and roll towards the sun **>
        ConRollSun = 22
        
        <** @description: Velocity pointing and roll towards ground target **>
        ConRollTarget = 23
        
        <** @description: Nadir pointing and yaw best +/-Y body axis to G/S **>
        ConYawTargetBest = 24
        
        <** @description: Controlled stop of RWs **>
        ConStopRW = 50
        
        <** @description: Open loop XYZ RW momentum command control **>
        ConHxyzRW = 51
        
        <** @description: User coded control mode **>
        ConUser = 100
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_OrbModeSelect
    {
        
        <** @description: Orbit calculated from SGP4 TLEs only **>
        OrbTle = 0
        
        <** @description: Orbit calculated from SGP4 TLE but replaced with GNSS measurements if available **>
        OrbTleGnss = 1
        
        <** @description: Orbit calculated from Augmented SGP4 TLE **>
        OrbAsgp4 = 2
        
        <** @description: Orbit calculated from Augmented SGP4 TLE but replaced with GNSS measurements if available **>
        OrbAsgp4Gnss = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_VecSelect
    {
        
        <** @description: Select magnetometer vector **>
        VecMag = 0
        
        <** @description: Select fine sun sensor vector **>
        VecFss = 1
        
        <** @description: Select coarse sun sensor vector **>
        VecCss = 2
        
        <** @description: Select horizon (nadir) vector **>
        VecHss = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_AxisSelect
    {
        
        <** @description: Not Used **>
        AxisNotUsed = 0
        
        <** @description: Positive X **>
        AxisPosX = 1
        
        <** @description: Negative X **>
        AxisNegX = 2
        
        <** @description: Positive Y **>
        AxisPosY = 3
        
        <** @description: Negative Y **>
        AxisNegY = 4
        
        <** @description: Positive Z **>
        AxisPosZ = 5
        
        <** @description: Negative Z **>
        AxisNegZ = 6
        
        <** @description: Tetrahedral A **>
        AxisThdA = 7
        
        <** @description: Tetrahedral B **>
        AxisThdB = 8
        
        <** @description: Tetrahedral C **>
        AxisThdC = 9
        
        <** @description: Tetrahedral D **>
        AxisThdD = 10
        
        <** @description: Pyramid A **>
        AxisPmdA = 11
        
        <** @description: Pyramid B **>
        AxisPmdB = 12
        
        <** @description: Pyramid C **>
        AxisPmdC = 13
        
        <** @description: Pyramid D **>
        AxisPmdD = 14
        
        <** @description: Skewed 4th wheel at PosXYZ **>
        AxisSkew = 15
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_RwlScheme
    {
        
        <** @description: RwlSchemeNoWheels **>
        RwlSchemeNoWheels = 0
        
        <** @description: RwlSchemeYMomentum **>
        RwlSchemeYMomentum = 1
        
        <** @description: RwlSchemeXYZ **>
        RwlSchemeXYZ = 2
        
        <** @description: RwlSchemePyramid **>
        RwlSchemePyramid = 3
        
        <** @description: RwlSchemeTetrahedral **>
        RwlSchemeTetrahedral = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_RwlFailId
    {
        
        <** @description: RwlFailNone **>
        RwlFailNone = 0
        
        <** @description: RwlFail0 **>
        RwlFail0 = 1
        
        <** @description: RwlFail1 **>
        RwlFail1 = 2
        
        <** @description: RwlFail2 **>
        RwlFail2 = 3
        
        <** @description: RwlFail3 **>
        RwlFail3 = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_WheelId
    {
        
        <** @description: CubeWheel0 **>
        CubeWheel0 = 0
        
        <** @description: CubeWheel1 **>
        CubeWheel1 = 1
        
        <** @description: CubeWheel2 **>
        CubeWheel2 = 2
        
        <** @description: CubeWheel3 **>
        CubeWheel3 = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_SensorId
    {
        
        <** @description: CubeMag0 **>
        CubeMag0 = 0
        
        <** @description: CubeMag1 **>
        CubeMag1 = 1
        
        <** @description: CubeSenseSun0 **>
        CubeSenseSun0 = 2
        
        <** @description: CubeSenseSun1 **>
        CubeSenseSun1 = 3
        
        <** @description: CubeSenseSun2 **>
        CubeSenseSun2 = 4
        
        <** @description: CubeSenseSun3 **>
        CubeSenseSun3 = 5
        
        <** @description: CubeSenseEarth0 **>
        CubeSenseEarth0 = 6
        
        <** @description: CubeSenseEarth1 **>
        CubeSenseEarth1 = 7
        
        <** @description: CubeStar0 **>
        CubeStar0 = 8
        
        <** @description: CubeStar1 **>
        CubeStar1 = 9
        
        <** @description: ExtStarTracker0 **>
        ExtStarTracker0 = 10
        
        <** @description: ExtStarTracker1 **>
        ExtStarTracker1 = 11
        
        <** @description: ExtSensor0 **>
        ExtSensor0 = 12
        
        <** @description: ExtSensor1 **>
        ExtSensor1 = 13
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_StrInstanceSelect
    {
        
        <** @description: Str0 **>
        Str0 = 0
        
        <** @description: Str1 **>
        Str1 = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_FssInstanceSelect
    {
        
        <** @description: Fss0 **>
        Fss0 = 0
        
        <** @description: Fss1 **>
        Fss1 = 1
        
        <** @description: Fss2 **>
        Fss2 = 2
        
        <** @description: Fss3 **>
        Fss3 = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_AcpExecutionPoint
    {
        
        <** @description: Initialisation **>
        ExecPointInit = 0
        
        <** @description: Idle **>
        ExecPointIdle = 1
        
        <** @description: Sensor communication **>
        ExecPointSensorComms = 2
        
        <** @description: ADCS estimation update **>
        ExecPointAdcsEstimation = 3
        
        <** @description: ADCS controller update **>
        ExecPointAdcsController = 4
        
        <** @description: Reaction wheel communication **>
        ExecPointWheelComms = 5
        
        <** @description: ADCS models update **>
        ExecPointAdcsModels = 6
        
        <** @description: Housekeeping **>
        ExecPointHousekeeping = 7
        
        <** @description: Telemetry logging **>
        ExecPointTlmLog = 8
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_ConModeNotAllowedReason
    {
        
        <** @description: Invalid control/estimation combination **>
        ConModeNotAllowConEstCombo = 1
        
        <** @description: Actuators not compatible with mode **>
        ConModeNotAllowAct = 2
        
        <** @description: Invalid initial conditions **>
        ConModeNotAllowInitCond = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_EstModeNotAllowedReason
    {
        
        <** @description: Invalid control/estimation combination **>
        EstModeNotAllowConEstCombo = 1
        
        <** @description: Sensors not compatible with mode **>
        EstModeNotAllowSen = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_ConModeChangeReason
    {
        
        <** @description: Commanded change in control mode **>
        ConChangeCmd = 1
        
        <** @description: Magnetic control timeout **>
        ConChangeMagTimeout = 2
        
        <** @description: Gyro measurement error while using GyroEkf estimator and wheel control **>
        ConChangeGyroError = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_EstModeChangeReason
    {
        
        <** @description: Commanded change in estimation mode **>
        EstChangeCmd = 1
        
        <** @description: Gyro measurement error while using GyroEKF or Gyro rate estimator **>
        EstChangeGyroError = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_AdcsConfigChangeType
    {
        
        <** @description: Mounting configuration **>
        CfgChangeMounting = 0
        
        <** @description: Mag0 magnetometer in-orbit calibration configuration **>
        CfgChangeMag0Calib = 1
        
        <** @description: Mag1 magnetometer in-orbit calibration configuration **>
        CfgChangeMag1Calib = 2
        
        <** @description: ADCS controller configuration **>
        CfgChangeController = 3
        
        <** @description: ADCS estimator configuration **>
        CfgChangeEstimator = 4
        
        <** @description: ADCS satellite configuration **>
        CfgChangeSatellite = 5
        
        <** @description: Satellite orbit parameter configuration **>
        CfgChangeSatOrbit = 6
        
        <** @description: Target satellite orbit parameter configuration **>
        CfgChangeTgtOrbit = 7
        
        <** @description: Node selection configuration **>
        CfgChangeNodeSelect = 8
        
        <** @description: wheel configuration **>
        CfgChangeActRwl = 9
        
        <** @description: Magnetorquer configuration **>
        CfgChangeActMtq = 10
        
        <** @description: ASGP4 configuration **>
        CfgChangeAsgp4 = 11
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_AdcsConfigValidationError
    {
        
        <** @description: Error in stack mounting configuration **>
        CfgErrStackMnt = 0
        
        <** @description: Error in magnetorquer mounting configuration **>
        CfgErrMtqMnt = 1
        
        <** @description: Wheel mounting configuration not allowed **>
        CfgErrWhlMnt = 2
        
        <** @description: Mag0 sensitivity matrix elements out of range **>
        CfgErrMag0Sens = 3
        
        <** @description: Mag1 sensitivity matrix elements out of range **>
        CfgErrMag1Sens = 4
        
        <** @description: Moments of inertia out of range **>
        CfgErrMoI = 5
        
        <** @description: Products of inertia ratio out of range **>
        CfgErrPoI = 6
        
        <** @description: Satellite orbit parameter error **>
        CfgErrSatOrb = 7
        
        <** @description: Target satellite orbit parameter error **>
        CfgErrTgtOrb = 8
        
        <** @description: Wheel parameters out of range **>
        CfgErrRwlParams = 9
        
        <** @description: Magnetorquer parameters out of range **>
        CfgErrMtqParams = 10
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_LoopFailureContext
    {
        
        <** @description: Control loop sync timeout at start of configuration of loop period **>
        LoopSyncTimeoutStart = 0
        
        <** @description: Control loop sync timeout during runtime **>
        LoopSyncTimeoutRuntime = 1
        
        <** @description: Control loop overrun **>
        LoopOverrun = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_LoopCriticalContext
    {
        
        <** @description: Control loop critical failure state due to multiple consecutive syncronization timeouts **>
        CriticalLoopSync = 0
        
        <** @description: Control loop critical failure state due to multiple consecutive overruns **>
        CriticalLoopOverrun = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_MtqPolarity
    {
        
        <** @description: Magnetorquer is off **>
        MtqOff = 0
        
        <** @description: Magnetorquer is on with positive polarity **>
        MtqPositive = 1
        
        <** @description: Magnetorquer is on with negative polarity **>
        MtqNegative = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_GyroErrorContext
    {
        
        <** @description: The gyro did not signal data-ready in time **>
        GyroDrdyTimeout = 0
        
        <** @description: Failure to sample the gyro **>
        GyroSample = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_GyroCriticalContext
    {
        
        <** @description: Low-level driver setup failed **>
        GyroDriverSetup = 0
        
        <** @description: Data ready gpio setup failed **>
        GyroDrdySetup = 1
        
        <** @description: Failed to configure the gyro **>
        GyroConfigure = 2
        
        <** @description: The gyro has experience multiple, consecutive errors (GyroErrorContext) and is presumed unusable **>
        GyroComatose = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_InitState
    {
        
        <** @description: Node is powered off **>
        InitOff = 0
        
        <** @description: Node is being commanded to jump to its control-program **>
        InitJump = 1
        
        <** @description: Node control-program setup in progress **>
        InitSetup = 2
        
        <** @description: Node initialization is complete. The control-program is running and ready for control **>
        InitDone = 3
        
        <** @description: Node is powered on for passthrough and is not performing any tasks **>
        InitPass = 4
        
        <** @description: Node is being used for upgrade - note that is any node bootloader is being upgraded, all nodes will be used since the whole bus is needed **>
        InitUpgrade = 5
        
        <** @description: Enumeration max value (invalid) **>
        InitMax = 6
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sVersion
    {
        
        <** @description: PSST3S Version G2 **>
        Pst3sVersionG2 = 0
        
        <** @description: PSST3S Version H3 **>
        Pst3sVersionH3 = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sDynamicMode
    {
        
        <** @description: Invalid Dynamic Mode. Depends on PST3S version. **>
        DynamicModeInvalid = 0
        
        <** @description: High Dynamic Mode **>
        DynamicModeHigh = 1
        
        <** @description: Low Dynamic Mode **>
        DynamicModeLow = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sSaaWorkingMode
    {
        
        <** @description: SAA Invalid. Depends on PST3S version. **>
        SaaInvalid = 0
        
        <** @description: SAA Off **>
        SaaOff = 1
        
        <** @description: SAA On when Tracking **>
        SaaTracking = 2
        
        <** @description: SAA on when Capture **>
        SaaCapture = 3
        
        <** @description: SAA on when Tracking and Capture **>
        SaaAll = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sOperatingModes
    {
        
        <** @description: Normal Mode **>
        NormalMode = 0
        
        <** @description: Fixed Threshold **>
        FixedThreshold = 1
        
        <** @description: Self-Test Mode **>
        SelfTest = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState
    {
        
        <** @description: Filtering Invalid. Depends on PST3S version. **>
        QFilteringGetInvalid = 0
        
        <** @description: Filtering Off **>
        QFilteringGetOff = 1
        
        <** @description: Filtering On **>
        QFilteringGetOn = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sSelfTestResult
    {
        
        <** @description: Selt-test OK **>
        Correct = 0
        
        <** @description: Selt-test Error **>
        Error = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sDataValid
    {
        
        <** @description: Gesture Data Valid **>
        GestureValid = 0
        
        <** @description: Attitude Data Valid **>
        AttitudeValid = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sExtImageState
    {
        
        <** @description: External Image State Invalid for API version **>
        ImageInvalid = 0
        
        <** @description: External Image State Off **>
        ImageOff = 1
        
        <** @description: External Image State On **>
        ImageOn = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_Pst3sRateQuality
    {
        
        <** @description: Invalid - no velocity information **>
        RateInvalid = 0
        
        <** @description: Velocity is estimated from previous calculations **>
        Estimated = 1
        
        <** @description: Velocity is precise and calculated from attitude data **>
        Precise = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_SunDetectResult
    {
        
        <** @description: Initialized **>
        SunDetStartup = 0
        
        <** @description: Nothing Detected **>
        SunNoDetect = 1
        
        <** @description: Pending a result **>
        SunDetPending = 2
        
        <** @description: No Sun found **>
        SunNotFound = 6
        
        <** @description: Sun detected **>
        SunSuccess = 7
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_SunCaptureResult
    {
        
        <** @description: Initialized **>
        SunCapStartup = 0
        
        <** @description: Issued but not complete **>
        SunCapPending = 1
        
        <** @description: Successful capture **>
        SunCaptureSuccessNormal = 2
        
        <** @description: Response Timeout **>
        SunTimeout = 3
        
        <** @description: Overcurrent Detected **>
        SunSRAMErr = 4
        
        <** @description: Successful capture but result flipped **>
        SunCaptureSuccessFlipped = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_EarthDetectResult
    {
        
        <** @description: Initialized **>
        EarthDetStartup = 0
        
        <** @description: Pending a result **>
        EarthDetPending = 1
        
        <** @description: No horizon detected in field of view **>
        EarthNoHorizon = 2
        
        <** @description: Not enough edge points detected **>
        EarthTooFewEdges = 3
        
        <** @description: Failed to fit shape on horizon **>
        EarthBadFit = 4
        
        <** @description: Horizon detected **>
        EarthSuccess = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_EarthCaptureResult
    {
        
        <** @description: Initialized **>
        EarthCapStartup = 0
        
        <** @description: Issued but not complete **>
        EarthCapPending = 1
        
        <** @description: Successful capture **>
        EarthCapSuccess = 2
        
        <** @description: Response Timeout **>
        EarthCapTimeout = 3
        
        <** @description: Capture driver error **>
        EarthCapError = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_MagSensingElementSelect
    {
        
        <** @description: Use the primary magnetometer sensing element on the CubeMag **>
        MagPrimary = 0
        
        <** @description: Use the redundant magnetometer sensing element on the CubeMag **>
        MagRedundant = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_GyroSelect
    {
        
        <** @description: Primary Gyro **>
        GyroPrimary = 0
        
        <** @description: Redundant Gyro **>
        GyroRedundant = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_FtpOpCode
    {
        
        <** @description: No operation **>
        FtpNone = 0
        
        <** @description: Cancel the Current Transfer **>
        FtpCancel = 1
        
        <** @description: Upload a File **>
        FtpUpload = 2
        
        <** @description: Perform Upgrade with file **>
        FtpUpgrade = 3
        
        <** @description: Erase the file **>
        FtpErase = 4
        
        <** @description: Retrieve file information and cache it without other operations **>
        FtpInfo = 5
        
        <** @description: Format the filesystem. Effectively erase all files. **>
        FtpFormat = 6
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_FtpFiles
    {
        
        <** @description: Invalid File **>
        FileInvalid = 0
        
        <** @description: Base Bootloader for CubeComputer Image Binary **>
        BaseblCcBin = 1
        
        <** @description: Base Bootloader for R5 nodes - single bank Image Binary **>
        BaseblR5SbBin = 2
        
        <** @description: Base Bootloader for 52 nodes Image Binary **>
        Basebl52Bin = 3
        
        <** @description: CubeWheel Image Binary **>
        CubeWheelBin = 4
        
        <** @description: CubeStar Image Binary **>
        CubeStarBin = 5
        
        <** @description: CubeSense Image Binary **>
        CubeSenseBin = 6
        
        <** @description: CubeMag Deploy Image Binary **>
        CubeMagDeployBin = 7
        
        <** @description: CubeMag Deploy Image Binary **>
        CubeMagCompactBin = 8
        
        <** @description: CubeAuriga Image Binary **>
        CubeAurigaBin = 9
        
        <** @description: CubeIR Image Binary **>
        CubeIrBin = 10
        
        <** @description: CubeNode-SLT Image Binary **>
        CubeNodeSltBin = 11
        
        <** @description: CubeNode-PST3S Image Binary **>
        CubeNodePst3sBin = 12
        
        <** @description: CubeNode-NSSRWL Image Binary **>
        CubeNodeNssrwlBin = 13
        
        <** @description: CubeWheel-0 Config Binary **>
        CubeWheelCfg0 = 14
        
        <** @description: CubeWheel-1 Config Binary **>
        CubeWheelCfg1 = 15
        
        <** @description: CubeWheel-2 Config Binary **>
        CubeWheelCfg2 = 16
        
        <** @description: CubeWheel-3 Config Binary **>
        CubeWheelCfg3 = 17
        
        <** @description: CubeWheel-4 Config Binary **>
        CubeWheelCfg4 = 18
        
        <** @description: CubeStar-0 Config Binary **>
        CubeStarCfg0 = 19
        
        <** @description: CubeStar-1 Config Binary **>
        CubeStarCfg1 = 20
        
        <** @description: CubeStar-2 Config Binary **>
        CubeStarCfg2 = 21
        
        <** @description: CubeStar-3 Config Binary **>
        CubeStarCfg3 = 22
        
        <** @description: CubeSense-0 Config Binary **>
        CubeSenseCfg0 = 23
        
        <** @description: CubeSense-1 Config Binary **>
        CubeSenseCfg1 = 24
        
        <** @description: CubeSense-2 Config Binary **>
        CubeSenseCfg2 = 25
        
        <** @description: CubeSense-3 Config Binary **>
        CubeSenseCfg3 = 26
        
        <** @description: CubeMag-0 Deploy Config Binary **>
        CubeMagDeployCfg0 = 27
        
        <** @description: CubeMag-1 Deploy Config Binary **>
        CubeMagDeployCfg1 = 28
        
        <** @description: CubeMag-0 Compact Config Binary **>
        CubeMagCompactCfg0 = 29
        
        <** @description: CubeMag-1 Compact Config Binary **>
        CubeMagCompactCfg1 = 30
        
        <** @description: CubeAuriga-0 Config Binary **>
        CubeAurigaCfg0 = 31
        
        <** @description: CubeAuriga-1 Config Binary **>
        CubeAurigaCfg1 = 32
        
        <** @description: CubeIr-0 Config Binary **>
        CubeIrCfg0 = 33
        
        <** @description: CubeIr-1 Config Binary **>
        CubeIrCfg1 = 34
        
        <** @description: CubeNode-SLT-0 Config Binary **>
        CubeNodeSltCfg0 = 35
        
        <** @description: CubeNode-PST3S-0 Config Binary **>
        CubeNodePst3sCfg0 = 36
        
        <** @description: CubeNode-PST3S-1 Config Binary **>
        CubeNodePst3sCfg1 = 37
        
        <** @description: CubeNode-NSSRWL-0 Config Binary **>
        CubeNodeNssrwlCfg0 = 38
        
        <** @description: CubeNode-NSSRWL-1 Config Binary **>
        CubeNodeNssrwlCfg1 = 39
        
        <** @description: CubeNode-NSSRWL-2 Config Binary **>
        CubeNodeNssrwlCfg2 = 40
        
        <** @description: CubeNode-NSSRWL-3 Config Binary **>
        CubeNodeNssrwlCfg3 = 41
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_FtpState
    {
        
        <** @description: No File Transfer in Progress **>
        Idle = 0
        
        <** @description: Initializing File Operation **>
        Init = 1
        
        <** @description: File Transfer is in Progress **>
        Busy = 2
        
        <** @description: File Transfer service is locked **>
        Locked = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_FtpUpgradeState
    {
        
        <** @description: No Upgrade in Progress **>
        UpgradeIdle = 0
        
        <** @description: Initializing upgrade operation - first state immediately following transfer setup **>
        UpgradeInit = 1
        
        <** @description: Upgrade transitioning from image binary to config binary uupgrade **>
        UpgradeTrans = 2
        
        <** @description: Initializing image binary upgrade **>
        UpgradeInitBin = 3
        
        <** @description: Initializing config binary upgrade **>
        UpgradeInitCfg = 4
        
        <** @description: Image binary upgrade in progress **>
        UpgradeBusyBin = 5
        
        <** @description: Config binary upgrade in progress **>
        UpgradeBusyCfg = 6
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_FtpBackend
    {
        
        <** @description: FRAM Storage Medium **>
        BackendFram = 0
        
        <** @description: Node connected on internal bus **>
        BackendNode = 1
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_FtpFileType
    {
        
        <** @description: Binary image file **>
        Bin = 0
        
        <** @description: Binary config file **>
        Cfg = 1
        
        <** @description: Log file **>
        Log = 2
        
        <** @description: Bitmap photo **>
        Photo = 3
        
        <** @description: General/internal-use **>
        General = 4
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerControlProgram8_NodePort
    {
        
        <** @description: No port. Use the value if the Node Port is not relevent **>
        PortNone = 0
        
        <** @description: Wheel 1 Port **>
        PortWheel1 = 1
        
        <** @description: Wheel 2 Port **>
        PortWheel2 = 2
        
        <** @description: Wheel 3 Port **>
        PortWheel3 = 3
        
        <** @description: Wheel 4 Port **>
        PortWheel4 = 4
        
        <** @description: Sensor 1 Port **>
        PortSensor1 = 5
        
        <** @description: Sensor 2 Port **>
        PortSensor2 = 6
        
        <** @description: Sensor 3 Port **>
        PortSensor3 = 7
        
        <** @description: Sensor 4 Port **>
        PortSensor4 = 8
        
        <** @description: Sensor 5 Port **>
        PortSensor5 = 9
        
        <** @description: Sensor 6 Port **>
        PortSensor6 = 10
        
        <** @description: Sensor 7 Port **>
        PortSensor7 = 11
        
        <** @description: Sensor 8 Port **>
        PortSensor8 = 12
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_TcTlmError
    {
        
        <** @description: No Error **>
        Ok = 0
        
        <** @description: Invalid TcTlm ID **>
        InvalidId = 1
        
        <** @description: Invalid Length **>
        InvalidLength = 2
        
        <** @description: Invalid Parameter **>
        InvalidParam = 3
        
        <** @description: CRC Check Failed **>
        Crc = 4
        
        <** @description: TCTLM not implemented **>
        NotImplemented = 5
        
        <** @description: Busy **>
        TcTlmBusy = 6
        
        <** @description: Error in sequence of commands **>
        Sequence = 7
        
        <** @description: Internal error **>
        Internal = 8
        
        <** @description: Passthrough node timeout error **>
        PassTimeout = 9
        
        <** @description: Passthrough target is invalid (passthrough is disabled) **>
        PassTarget = 10
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_NodeType
    {
        
        <** @description: Invalid Node Type **>
        NodeTypeInvalid = 0
        
        <** @description: CubeComputer Type - version independant **>
        NodeTypeCubeComputer = 1
        
        <** @description: CubeSense Type - version independant **>
        NodeTypeCubeSense = 2
        
        <** @description: CubeWheel Type - version independant **>
        NodeTypeCubeWheel = 3
        
        <** @description: CubeIR Type - version independant **>
        NodeTypeCubeIr = 4
        
        <** @description: CubeMag Deploy Type - version independant **>
        NodeTypeCubeMagDeploy = 5
        
        <** @description: CubeMag Compact Type - version independant **>
        NodeTypeCubeMagCompact = 6
        
        <** @description: CubeStar Type - version independant **>
        NodeTypeCubeStar = 7
        
        <** @description: CubeAuriga Type - version independant **>
        NodeTypeAuriga = 8
        
        <** @description: CubeNode General Type - version independant **>
        NodeTypeCubeNode = 9
        
        <** @description: CubeNode SLT Type - version independant **>
        NodeTypeCubeNodeSlt = 10
        
        <** @description: CubeNode PST3S Type - version independant **>
        NodeTypeCubeNodePst3s = 11
        
        <** @description: CubeNode NSSRWL Type - version independant **>
        NodeTypeCubeNodeNssrwl = 12
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_ProgramType
    {
        
        <** @description: Invalid Program Type **>
        ProgramTypeInvalid = 0
        
        <** @description: control-program primary product application **>
        ProgramTypeControl = 1
        
        <** @description: cube-computer flash-bootloader Bootloader application **>
        ProgramTypeBootloader = 4
        
        <** @description: health-check Health Check application **>
        ProgramTypeHealthCheck = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_AbstractNode
    {
        
        <** @description: Invalid Abstract Node **>
        NodeInvalid = 0
        
        <** @description: CubeComputer **>
        NodeComputer = 1
        
        <** @description: Star tracker 0 **>
        NodeStr0 = 2
        
        <** @description: Star tracker 1 **>
        NodeStr1 = 3
        
        <** @description: Fine sun sensor 0 **>
        NodeFss0 = 4
        
        <** @description: Fine sun sensor 1 **>
        NodeFss1 = 5
        
        <** @description: Fine sun sensor 2 **>
        NodeFss2 = 6
        
        <** @description: Fine sun sensor 3 **>
        NodeFss3 = 7
        
        <** @description: Horizon sun sensor 0 **>
        NodeHss0 = 8
        
        <** @description: Horizon sun sensor 1 **>
        NodeHss1 = 9
        
        <** @description: Magnetometer sensor 0 **>
        NodeMag0 = 10
        
        <** @description: Magnetometer sensor 1 **>
        NodeMag1 = 11
        
        <** @description: External sensor 0 **>
        NodeExt0 = 12
        
        <** @description: External sensor 1 **>
        NodeExt1 = 13
        
        <** @description: Reaction wheel 0 **>
        NodeRwl0 = 14
        
        <** @description: Reaction wheel 1 **>
        NodeRwl1 = 15
        
        <** @description: Reaction wheel 2 **>
        NodeRwl2 = 16
        
        <** @description: Reaction wheel 3 **>
        NodeRwl3 = 17
        
        <** @description: Reaction wheel 4 **>
        NodeRwl4 = 18
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_SerialSource
    {
        
        <** @description: Serial number sourced from OTP **>
        SourceOtp = 0
        
        <** @description: Serial number sourced from Config **>
        SourceConfig = 1
        
    }
    
    
    
    
    <**
        @description: Default mode configuration
        @details: id = 0
    **>
    method setConfigDefaultModes
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Default ADCS run mode **>
            CubeComputerControlProgram8_AdcsRunModeSelect RunModeDefault
            
            <** @description: Default ADCS operational state **>
            CubeComputerControlProgram8_AdcsOpStateSelect OpStateDefault
            
            <** @description: Default control mode in OpStateSafe **>
            CubeComputerControlProgram8_ConModeSelect ConModeSafe
            
            <** @description: Default control mode in OpStateAuto **>
            CubeComputerControlProgram8_ConModeSelect ConModeAuto
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Mounting configuration
        @details: id = 1
    **>
    method setConfigMount
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: StackX mounting **>
            CubeComputerControlProgram8_AxisSelect MountStackX
            
            <** @description: StackY mounting **>
            CubeComputerControlProgram8_AxisSelect MountStackY
            
            <** @description: StackZ mounting **>
            CubeComputerControlProgram8_AxisSelect MountStackZ
            
            <** @description: MTQ0 mounting **>
            CubeComputerControlProgram8_AxisSelect MountMtq0
            
            <** @description: MTQ1 mounting **>
            CubeComputerControlProgram8_AxisSelect MountMtq1
            
            <** @description: MTQ2 mounting **>
            CubeComputerControlProgram8_AxisSelect MountMtq2
            
            <** @description: Wheel0 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl0
            
            <** @description: Wheel1 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl1
            
            <** @description: Wheel2 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl2
            
            <** @description: Wheel3 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl3
            
            <** @description: Pyramid RWL mounting alpha angle **>
            Double MountRwlPyrAlpha
            
            <** @description: Pyramid RWL mounting beta angle **>
            Double MountRwlPyrBeta
            
            <** @description: Pyramid RWL mounting gamma angle **>
            Double MountRwlPyrGamma
            
            <** @description: CSS0 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss0
            
            <** @description: CSS1 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss1
            
            <** @description: CSS2 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss2
            
            <** @description: CSS3 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss3
            
            <** @description: CSS4 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss4
            
            <** @description: CSS5 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss5
            
            <** @description: CSS6 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss6
            
            <** @description: CSS7 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss7
            
            <** @description: CSS8 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss8
            
            <** @description: CSS9 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss9
            
            <** @description: FSS0 mounting alpha angle **>
            Double MountFss0Alpha
            
            <** @description: FSS0 mounting beta angle **>
            Double MountFss0Beta
            
            <** @description: FSS0 mounting gamma angle **>
            Double MountFss0Gamma
            
            <** @description: FSS1 mounting alpha angle **>
            Double MountFss1Alpha
            
            <** @description: FSS1 mounting beta angle **>
            Double MountFss1Beta
            
            <** @description: FSS1 mounting gamma angle **>
            Double MountFss1Gamma
            
            <** @description: FSS2 mounting alpha angle **>
            Double MountFss2Alpha
            
            <** @description: FSS2 mounting beta angle **>
            Double MountFss2Beta
            
            <** @description: FSS2 mounting gamma angle **>
            Double MountFss2Gamma
            
            <** @description: FSS3 mounting alpha angle **>
            Double MountFss3Alpha
            
            <** @description: FSS3 mounting beta angle **>
            Double MountFss3Beta
            
            <** @description: FSS3 mounting gamma angle **>
            Double MountFss3Gamma
            
            <** @description: HSS0 mounting alpha angle **>
            Double MountHss0Alpha
            
            <** @description: HSS0 mounting beta angle **>
            Double MountHss0Beta
            
            <** @description: HSS0 mounting gamma angle **>
            Double MountHss0Gamma
            
            <** @description: HSS1 mounting alpha angle **>
            Double MountHss1Alpha
            
            <** @description: HSS1 mounting beta angle **>
            Double MountHss1Beta
            
            <** @description: HSS1 mounting gamma angle **>
            Double MountHss1Gamma
            
            <** @description: MAG0 mounting alpha angle **>
            Double MountMag0Alpha
            
            <** @description: MAG0 mounting beta angle **>
            Double MountMag0Beta
            
            <** @description: MAG0 mounting gamma angle **>
            Double MountMag0Gamma
            
            <** @description: MAG1 mounting alpha angle **>
            Double MountMag1Alpha
            
            <** @description: MAG1 mounting beta angle **>
            Double MountMag1Beta
            
            <** @description: MAG1 mounting gamma angle **>
            Double MountMag1Gamma
            
            <** @description: STR0 mounting alpha angle **>
            Double MountStr0Alpha
            
            <** @description: STR0 mounting beta angle **>
            Double MountStr0Beta
            
            <** @description: STR0 mounting gamma angle **>
            Double MountStr0Gamma
            
            <** @description: STR1 mounting alpha angle **>
            Double MountStr1Alpha
            
            <** @description: STR1 mounting beta angle **>
            Double MountStr1Beta
            
            <** @description: STR1 mounting gamma angle **>
            Double MountStr1Gamma
            
            <** @description: ExtSensor0 mounting alpha angle **>
            Double MountExtSensor0Alpha
            
            <** @description: ExtSensor0 mounting beta angle **>
            Double MountExtSensor0Beta
            
            <** @description: ExtSensor0 mounting gamma angle **>
            Double MountExtSensor0Gamma
            
            <** @description: ExtSensor1 mounting alpha angle **>
            Double MountExtSensor1Alpha
            
            <** @description: ExtSensor1 mounting beta angle **>
            Double MountExtSensor1Beta
            
            <** @description: ExtSensor1 mounting gamma angle **>
            Double MountExtSensor1Gamma
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Mag0 magnetometer in-orbit calibration configuration
        @details: id = 2
    **>
    method setConfigMag0OrbitCal
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Magnetometer channel 1 offset **>
            Double Offset1
            
            <** @description: Magnetometer channel 2 offset **>
            Double Offset2
            
            <** @description: Magnetometer channel 3 offset **>
            Double Offset3
            
            <** @description: Magnetometer sensitivity matrix S11 **>
            Double SensMatrix11
            
            <** @description: Magnetometer sensitivity matrix S22 **>
            Double SensMatrix22
            
            <** @description: Magnetometer sensitivity matrix S33 **>
            Double SensMatrix33
            
            <** @description: Magnetometer sensitivity matrix S12 **>
            Double SensMatrix12
            
            <** @description: Magnetometer sensitivity matrix S13 **>
            Double SensMatrix13
            
            <** @description: Magnetometer sensitivity matrix S21 **>
            Double SensMatrix21
            
            <** @description: Magnetometer sensitivity matrix S23 **>
            Double SensMatrix23
            
            <** @description: Magnetometer sensitivity matrix S31 **>
            Double SensMatrix31
            
            <** @description: Magnetometer sensitivity matrix S32 **>
            Double SensMatrix32
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Mag1 magnetometer in-orbit calibration configuration
        @details: id = 3
    **>
    method setConfigMag1OrbitCal
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Magnetometer channel 1 offset **>
            Double Offset1
            
            <** @description: Magnetometer channel 2 offset **>
            Double Offset2
            
            <** @description: Magnetometer channel 3 offset **>
            Double Offset3
            
            <** @description: Magnetometer sensitivity matrix S11 **>
            Double SensMatrix11
            
            <** @description: Magnetometer sensitivity matrix S22 **>
            Double SensMatrix22
            
            <** @description: Magnetometer sensitivity matrix S33 **>
            Double SensMatrix33
            
            <** @description: Magnetometer sensitivity matrix S12 **>
            Double SensMatrix12
            
            <** @description: Magnetometer sensitivity matrix S13 **>
            Double SensMatrix13
            
            <** @description: Magnetometer sensitivity matrix S21 **>
            Double SensMatrix21
            
            <** @description: Magnetometer sensitivity matrix S23 **>
            Double SensMatrix23
            
            <** @description: Magnetometer sensitivity matrix S31 **>
            Double SensMatrix31
            
            <** @description: Magnetometer sensitivity matrix S32 **>
            Double SensMatrix32
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: ADCS controller configuration
        @details: id = 4
    **>
    method setConfigAdcsController
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Default control mode **>
            CubeComputerControlProgram8_ConModeSelect ConModeDefault
            
            <** @description: Detumbling damping gain (Kd) **>
            Float Kd
            
            <** @description: Sun-spin control gain (KDsun) **>
            Float Kdsun
            
            <** @description: Sun-spin control gain (KDecl) **>
            Float Kdecl
            
            <** @description: Detumbling spin gain (Ks) **>
            Float Ks
            
            <** @description: Fast B-dot detumbling gain (Kdf) **>
            Float Kdf
            
            <** @description: Y-momentum nutation damping gain (Kn) **>
            Float Kn
            
            <** @description: Y-momentum nutation damping quaternion gain (Kq) **>
            Float Kq
            
            <** @description: X-axis GG nutation damping quaternion gain (Kqx) **>
            Float Kqx
            
            <** @description: Y-axis GG nutation damping quaternion gain (Kqy) **>
            Float Kqy
            
            <** @description: Z-axis GG nutation damping quaternion gain (Kqz) **>
            Float Kqz
            
            <** @description: Wheel momentum dumping magnetic control gain (Kh) **>
            Float Kh
            
            <** @description: Y-momentum proportional gain (Kp1) **>
            Float Kp1
            
            <** @description: Y-momentum derivative gain (Kd1) **>
            Float Kd1
            
            <** @description: RWheel proportional gain (Kp2) **>
            Float Kp2
            
            <** @description: RWheel derivative gain (Kd2) **>
            Float Kd2
            
            <** @description: Tracking proportional gain (Kp3) **>
            Float Kp3
            
            <** @description: Tracking derivative gain (Kd3) **>
            Float Kd3
            
            <** @description: Tracking integral gain (Ki3) **>
            Float Ki3
            
            <** @description: Reference spin rate (wy-ref). Must always be smaller than 0 **>
            Float wy_ref
            
            <** @description: Reference wheel momentum (H-ref). Must always be smaller than 0 **>
            Float H_ref
            
            <** @description: Y-wheel bias momentum during XYZ-control (Hy-bias) **>
            Float Hy_bias
            
            <** @description: Perform yaw compensation for earth rotation in 3-axis RPY control **>
            Boolean YawCompensate
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: ADCS estimator configuration
        @details: id = 5
    **>
    method setConfigAdcsEstimator
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Default main estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeMainDefault
            
            <** @description: Default backup estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeBackupDefault
            
            <** @description: Magnetometer measurement noise **>
            Float MagR
            
            <** @description: Coarse sun sensor measurement noise **>
            Float CssR
            
            <** @description: Fine sun sensor measurement noise **>
            Float FssR
            
            <** @description: Horizon sensor measurement noise **>
            Float HssR
            
            <** @description: Star tracker measurement noise **>
            Float StrR
            
            <** @description: Magnetometer RKF system noise **>
            Float RkfQ
            
            <** @description: EKF system noise **>
            Float EkfQ
            
            <** @description: Polar nutation Epsilon correction **>
            Float NutDeps
            
            <** @description: Polar nutation Psi correction **>
            Float NutDpsi
            
            <** @description: Use fine sun sensor measurements in EKF **>
            Boolean EkfUseFss
            
            <** @description: Use coarse sun sensor measurements in EKF **>
            Boolean EkfUseCss
            
            <** @description: Use horizon sensor measurements in EKF **>
            Boolean EkfUseHss
            
            <** @description: Use star tracker measurements in EKF **>
            Boolean EkfUseStr
            
            <** @description: Vector 1 selection for Triad **>
            CubeComputerControlProgram8_VecSelect TVec1
            
            <** @description: Vector 2 selection for Triad **>
            CubeComputerControlProgram8_VecSelect TVec2
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: ADCS satellite configuration
        @details: id = 6
    **>
    method setConfigAdcsSatellite
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Moment of inertia Ixx **>
            Float Ixx
            
            <** @description: Moment of inertia Iyy **>
            Float Iyy
            
            <** @description: Moment of inertia Izz **>
            Float Izz
            
            <** @description: Product of inertia Ixy **>
            Float Ixy
            
            <** @description: Product of inertia Ixz **>
            Float Ixz
            
            <** @description: Product of inertia Iyz **>
            Float Iyz
            
            <** @description: Sun-pointing body vector X component **>
            Double SunPointBodyVecX
            
            <** @description: Sun-pointing body vector Y component **>
            Double SunPointBodyVecY
            
            <** @description: Sun-pointing body vector Z component **>
            Double SunPointBodyVecZ
            
            <** @description: Target-tracking body vector X component **>
            Double TgtTrackBodyVecX
            
            <** @description: Target-tracking body vector Y component **>
            Double TgtTrackBodyVecY
            
            <** @description: Target-tracking body vector Z component **>
            Double TgtTrackBodyVecZ
            
            <** @description: Satellite-tracking body vector X component **>
            Double SatTrackBodyVecX
            
            <** @description: Satellite-tracking body vector Y component **>
            Double SatTrackBodyVecY
            
            <** @description: Satellite-tracking body vector Z component **>
            Double SatTrackBodyVecZ
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Satellite orbit parameter configuration
        @details: id = 7
    **>
    method setConfigOrbitSatParams
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Orbit epoch **>
            Double OrbitEpoch
            
            <** @description: Orbit inclination **>
            Double OrbitIncl
            
            <** @description: Orbit RAAN **>
            Double OrbitRaan
            
            <** @description: Orbit eccentricity **>
            Double OrbitEccen
            
            <** @description: Orbit argument of perigee **>
            Double OrbitAP
            
            <** @description: Orbit mean anomaly **>
            Double OrbitMA
            
            <** @description: Orbit mean motion **>
            Double OrbitMM
            
            <** @description: Orbit B-star drag term **>
            Double OrbitBstar
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Satellite orbit parameter configuration
        @details: id = 8
    **>
    method setConfigOrbitTargetParams
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Orbit epoch **>
            Double OrbitEpoch
            
            <** @description: Orbit inclination **>
            Double OrbitIncl
            
            <** @description: Orbit RAAN **>
            Double OrbitRaan
            
            <** @description: Orbit eccentricity **>
            Double OrbitEccen
            
            <** @description: Orbit argument of perigee **>
            Double OrbitAP
            
            <** @description: Orbit mean anomaly **>
            Double OrbitMA
            
            <** @description: Orbit mean motion **>
            Double OrbitMM
            
            <** @description: Orbit B-star drag term **>
            Double OrbitBstar
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Node selection configuration
        @details: id = 9
    **>
    method setConfigNodeSelection
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: RWL selection flags **>
            UInt8 SelectRwl
            
            <** @description: MAG selection flags **>
            UInt8 SelectMag
            
            <** @description: FSS selection flags **>
            UInt8 SelectFss
            
            <** @description: HSS selection flags **>
            UInt8 SelectHss
            
            <** @description: GYR selection flags **>
            UInt8 SelectGyro
            
            <** @description: STR selection flags **>
            UInt8 SelectStr
            
            <** @description: GNSS selection flags **>
            UInt8 SelectGnss
            
            <** @description: External sensor selection flags **>
            UInt8 SelectExt
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Wheel configuration
        @details: id = 10
    **>
    method setConfigActuatorRwl
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: RWL0 inertia **>
            Float Rwl0Iw
            
            <** @description: RWL0 maximum momentum **>
            Float Rwl0Hmax
            
            <** @description: RWL0 maximum torque **>
            Float Rwl0Nmax
            
            <** @description: RWL1 inertia **>
            Float Rwl1Iw
            
            <** @description: RWL1 maximum momentum **>
            Float Rwl1Hmax
            
            <** @description: RWL1 maximum torque **>
            Float Rwl1Nmax
            
            <** @description: RWL2 inertia **>
            Float Rwl2Iw
            
            <** @description: RWL2 maximum momentum **>
            Float Rwl2Hmax
            
            <** @description: RWL2 maximum torque **>
            Float Rwl2Nmax
            
            <** @description: RWL3 inertia **>
            Float Rwl3Iw
            
            <** @description: RWL3 maximum momentum **>
            Float Rwl3Hmax
            
            <** @description: RWL3 maximum torque **>
            Float Rwl3Nmax
            
            <** @description: Wheel ramp torque **>
            Float NDel
            
            <** @description: Wheel scheme **>
            CubeComputerControlProgram8_RwlScheme RwlScheme
            
            <** @description: Failed wheel ID **>
            CubeComputerControlProgram8_RwlFailId RwlFailId
            
            <** @description: Pyramid nominal momentum **>
            Float PyrHnom
            
            <** @description: Pyramid tilt angle **>
            Float PyrTiltAngle
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Magnetorquer configuration
        @details: id = 11
    **>
    method setConfigActuatorMtq
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: MTQ0 maximum dipole moment **>
            Float Mtq0Mmax
            
            <** @description: MTQ1 maximum dipole moment **>
            Float Mtq1Mmax
            
            <** @description: MTQ2 maximum dipole moment **>
            Float Mtq2Mmax
            
            <** @description: Maximum magnetorquer on-time **>
            UInt16 OnTimeMax
            
            <** @description: Minimum magnetorquer on-time **>
            UInt16 OnTimeMin
            
            <** @description: LPF factor for magnetorquer commands. Set to zero for no filtering **>
            Float MtqFfac
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Mag sensing element (primary/redundant) configuration
        @details: id = 12
    **>
    method setConfigMagSensingElement
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: MAG0 sensing element (primary/redundant) **>
            CubeComputerControlProgram8_MagSensingElementSelect Mag0SensingElement
            
            <** @description: MAG1 sensing element (primary/redundant) **>
            CubeComputerControlProgram8_MagSensingElementSelect Mag1SensingElement
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Augmented SGP4 configuration
        @details: id = 13
    **>
    method setConfigAsgp4
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Number of GNSS measurements before computing updates TLEs **>
            UInt16 BatchSize
            
            <** @description: Maximum time between GNSS measurements before resetting filters **>
            UInt32 MaxTimeBetween
            
            <** @description: Maximum position error for asgp4 to continue working **>
            UInt16 MaxPosErr
            
            <** @description: Time offset compensation gain **>
            Float TimeGain
            
            <** @description: Update SGP4 RAAN and Inclination angles from GNSS **>
            Boolean UpdateRaanIncl
            
            <** @description: Update SGP4 Eccentricity from GNSS **>
            Boolean UpdateEccen
            
            <** @description: Update SGP4 Arg. Perigee and Mean Anomaly from GNSS **>
            Boolean UpdateApMa
            
            <** @description: Update SGP4 Epoch from GNSS **>
            Boolean UpdateTime
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Control mode
        @details: id = 14
    **>
    method setConMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Control mode **>
            CubeComputerControlProgram8_ConModeSelect ControlMode
            
            <** @description: Magnetic control timeout **>
            UInt16 MagConTimeout
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Estimation mode
        @details: id = 15
    **>
    method setEstMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Main estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeMain
            
            <** @description: Backup estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeBackup
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Orbit mode
        @details: id = 16
    **>
    method setOrbMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Orbit calculation mode **>
            CubeComputerControlProgram8_OrbModeSelect OrbitMode
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: ADCS run mode
        @details: id = 17
    **>
    method setAdcsRunMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: ADCS run mode **>
            CubeComputerControlProgram8_AdcsRunModeSelect RunMode
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: ADCS operational state
        @details: id = 18
    **>
    method setAdcsOpState
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: ADCS operational state **>
            CubeComputerControlProgram8_AdcsOpStateSelect OpState
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Simulation raw sensor telemetry
        @details: id = 19
    **>
    method setSimSensorRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: FSS0 raw centroid X **>
            Double Fss0RawCenX
            
            <** @description: FSS0 raw centroid Y **>
            Double Fss0RawCenY
            
            <** @description: FSS1 raw centroid X **>
            Double Fss1RawCenX
            
            <** @description: FSS1 raw centroid Y **>
            Double Fss1RawCenY
            
            <** @description: FSS2 raw centroid X **>
            Double Fss2RawCenX
            
            <** @description: FSS2 raw centroid Y **>
            Double Fss2RawCenY
            
            <** @description: FSS3 raw centroid X **>
            Double Fss3RawCenX
            
            <** @description: FSS3 raw centroid Y **>
            Double Fss3RawCenY
            
            <** @description: CSS0 raw measurement **>
            UInt16 Css0Raw
            
            <** @description: CSS1 raw measurement **>
            UInt16 Css1Raw
            
            <** @description: CSS2 raw measurement **>
            UInt16 Css2Raw
            
            <** @description: CSS3 raw measurement **>
            UInt16 Css3Raw
            
            <** @description: CSS4 raw measurement **>
            UInt16 Css4Raw
            
            <** @description: CSS5 raw measurement **>
            UInt16 Css5Raw
            
            <** @description: CSS6 raw measurement **>
            UInt16 Css6Raw
            
            <** @description: CSS7 raw measurement **>
            UInt16 Css7Raw
            
            <** @description: CSS8 raw measurement **>
            UInt16 Css8Raw
            
            <** @description: CSS9 raw measurement **>
            UInt16 Css9Raw
            
            <** @description: MAG0 raw vector X component **>
            Double Mag0RawVecX
            
            <** @description: MAG0 raw vector Y component **>
            Double Mag0RawVecY
            
            <** @description: MAG0 raw vector Z component **>
            Double Mag0RawVecZ
            
            <** @description: MAG1 raw vector X component **>
            Double Mag1RawVecX
            
            <** @description: MAG1 raw vector Y component **>
            Double Mag1RawVecY
            
            <** @description: MAG1 raw vector Z component **>
            Double Mag1RawVecZ
            
            <** @description: GYR0 raw rate X component **>
            Float Gyro0RawRateX
            
            <** @description: GYR0 raw rate Y component **>
            Float Gyro0RawRateY
            
            <** @description: GYR0 raw rate Z component **>
            Float Gyro0RawRateZ
            
            <** @description: GYR1 raw rate X component **>
            Float Gyro1RawRateX
            
            <** @description: GYR1 raw rate Y component **>
            Float Gyro1RawRateY
            
            <** @description: GYR1 raw rate Z component **>
            Float Gyro1RawRateZ
            
            <** @description: HSS0 raw elevation angle **>
            Double Hss0RawElev
            
            <** @description: HSS0 raw rotation angle **>
            Double Hss0RawRot
            
            <** @description: HSS1 raw elevation angle **>
            Double Hss1RawElev
            
            <** @description: HSS1 raw rotation angle **>
            Double Hss1RawRot
            
            <** @description: STR0 measured vector 0 X component (sensor frame) **>
            Double Str0MeasVec0X
            
            <** @description: STR0 measured vector 0 Y component (sensor frame) **>
            Double Str0MeasVec0Y
            
            <** @description: STR0 measured vector 0 Z component (sensor frame) **>
            Double Str0MeasVec0Z
            
            <** @description: STR0 measured vector 1 X component (sensor frame) **>
            Double Str0MeasVec1X
            
            <** @description: STR0 measured vector 1 Y component (sensor frame) **>
            Double Str0MeasVec1Y
            
            <** @description: STR0 measured vector 1 Z component (sensor frame) **>
            Double Str0MeasVec1Z
            
            <** @description: STR0 measured vector 2 X component (sensor frame) **>
            Double Str0MeasVec2X
            
            <** @description: STR0 measured vector 2 Y component (sensor frame) **>
            Double Str0MeasVec2Y
            
            <** @description: STR0 measured vector 2 Z component (sensor frame) **>
            Double Str0MeasVec2Z
            
            <** @description: STR0 modelled vector 0 X component (IRC frame) **>
            Double Str0ModelVec0X
            
            <** @description: STR0 modelled vector 0 Y component (IRC frame) **>
            Double Str0ModelVec0Y
            
            <** @description: STR0 modelled vector 0 Z component (IRC frame) **>
            Double Str0ModelVec0Z
            
            <** @description: STR0 modelled vector 1 X component (IRC frame) **>
            Double Str0ModelVec1X
            
            <** @description: STR0 modelled vector 1 Y component (IRC frame) **>
            Double Str0ModelVec1Y
            
            <** @description: STR0 modelled vector 1 Z component (IRC frame) **>
            Double Str0ModelVec1Z
            
            <** @description: STR0 modelled vector 2 X component (IRC frame) **>
            Double Str0ModelVec2X
            
            <** @description: STR0 modelled vector 2 Y component (IRC frame) **>
            Double Str0ModelVec2Y
            
            <** @description: STR0 modelled vector 2 Z component (IRC frame) **>
            Double Str0ModelVec2Z
            
            <** @description: STR0 measured quaternion Q0 (sensor to IRC frame) **>
            Double Str0MeasQ0
            
            <** @description: STR0 measured quaternion Q1 (sensor to IRC frame) **>
            Double Str0MeasQ1
            
            <** @description: STR0 measured quaternion Q2 (sensor to IRC frame) **>
            Double Str0MeasQ2
            
            <** @description: STR0 measured quaternion Q3 (sensor to IRC frame) **>
            Double Str0MeasQ3
            
            <** @description: STR0 number of identified stars **>
            UInt8 Str0StarIdCount
            
            <** @description: STR1 measured vector 0 X component (sensor frame) **>
            Double Str1MeasVec0X
            
            <** @description: STR1 measured vector 0 Y component (sensor frame) **>
            Double Str1MeasVec0Y
            
            <** @description: STR1 measured vector 0 Z component (sensor frame) **>
            Double Str1MeasVec0Z
            
            <** @description: STR1 measured vector 1 X component (sensor frame) **>
            Double Str1MeasVec1X
            
            <** @description: STR1 measured vector 1 Y component (sensor frame) **>
            Double Str1MeasVec1Y
            
            <** @description: STR1 measured vector 1 Z component (sensor frame) **>
            Double Str1MeasVec1Z
            
            <** @description: STR1 measured vector 2 X component (sensor frame) **>
            Double Str1MeasVec2X
            
            <** @description: STR1 measured vector 2 Y component (sensor frame) **>
            Double Str1MeasVec2Y
            
            <** @description: STR1 measured vector 2 Z component (sensor frame) **>
            Double Str1MeasVec2Z
            
            <** @description: STR1 modelled vector 0 X component (IRC frame) **>
            Double Str1ModelVec0X
            
            <** @description: STR1 modelled vector 0 Y component (IRC frame) **>
            Double Str1ModelVec0Y
            
            <** @description: STR1 modelled vector 0 Z component (IRC frame) **>
            Double Str1ModelVec0Z
            
            <** @description: STR1 modelled vector 1 X component (IRC frame) **>
            Double Str1ModelVec1X
            
            <** @description: STR1 modelled vector 1 Y component (IRC frame) **>
            Double Str1ModelVec1Y
            
            <** @description: STR1 modelled vector 1 Z component (IRC frame) **>
            Double Str1ModelVec1Z
            
            <** @description: STR1 modelled vector 2 X component (IRC frame) **>
            Double Str1ModelVec2X
            
            <** @description: STR1 modelled vector 2 Y component (IRC frame) **>
            Double Str1ModelVec2Y
            
            <** @description: STR1 modelled vector 2 Z component (IRC frame) **>
            Double Str1ModelVec2Z
            
            <** @description: STR1 measured quaternion Q0 (sensor to IRC frame) **>
            Double Str1MeasQ0
            
            <** @description: STR1 measured quaternion Q1 (sensor to IRC frame) **>
            Double Str1MeasQ1
            
            <** @description: STR1 measured quaternion Q2 (sensor to IRC frame) **>
            Double Str1MeasQ2
            
            <** @description: STR1 measured quaternion Q3 (sensor to IRC frame) **>
            Double Str1MeasQ3
            
            <** @description: STR1 number of identified stars **>
            UInt8 Str1StarIdCount
            
            <** @description: GNSS Unix time integer seconds **>
            UInt32 GnssTimeSeconds
            
            <** @description: GNSS Unix time fraction nanoseconds **>
            UInt32 GnssTimeNs
            
            <** @description: Satellite position vector X component (GNSS frame) **>
            Int32 GnssSatPosX
            
            <** @description: Satellite position vector Y component (GNSS frame) **>
            Int32 GnssSatPosY
            
            <** @description: Satellite position vector Z component (GNSS frame) **>
            Int32 GnssSatPosZ
            
            <** @description: Satellite velocity vector X component (GNSS frame) **>
            Int32 GnssSatVelX
            
            <** @description: Satellite velocity vector Y component (GNSS frame) **>
            Int32 GnssSatVelY
            
            <** @description: Satellite velocity vector Z component (GNSS frame) **>
            Int32 GnssSatVelZ
            
            <** @description: ExtSensor0 raw measurement float 0 **>
            Float ExtSensor0Float0
            
            <** @description: ExtSensor0 raw measurement float 1 **>
            Float ExtSensor0Float1
            
            <** @description: ExtSensor0 raw measurement float 2 **>
            Float ExtSensor0Float2
            
            <** @description: ExtSensor0 raw measurement float 3 **>
            Float ExtSensor0Float3
            
            <** @description: ExtSensor0 raw measurement float 4 **>
            Float ExtSensor0Float4
            
            <** @description: ExtSensor0 raw measurement float 5 **>
            Float ExtSensor0Float5
            
            <** @description: ExtSensor1 raw measurement float 0 **>
            Float ExtSensor1Float0
            
            <** @description: ExtSensor1 raw measurement float 1 **>
            Float ExtSensor1Float1
            
            <** @description: ExtSensor1 raw measurement float 2 **>
            Float ExtSensor1Float2
            
            <** @description: ExtSensor1 raw measurement float 3 **>
            Float ExtSensor1Float3
            
            <** @description: ExtSensor1 raw measurement float 4 **>
            Float ExtSensor1Float4
            
            <** @description: ExtSensor1 raw measurement float 5 **>
            Float ExtSensor1Float5
            
            <** @description: RWL0 raw speed measurement **>
            Float Rwl0SpeedMeas
            
            <** @description: RWL1 raw speed measurement **>
            Float Rwl1SpeedMeas
            
            <** @description: RWL2 raw speed measurement **>
            Float Rwl2SpeedMeas
            
            <** @description: RWL3 raw speed measurement **>
            Float Rwl3SpeedMeas
            
            <** @description: FSS0 valid flag **>
            Boolean Fss0IsValid
            
            <** @description: FSS1 valid flag **>
            Boolean Fss1IsValid
            
            <** @description: FSS2 valid flag **>
            Boolean Fss2IsValid
            
            <** @description: FSS3 valid flag **>
            Boolean Fss3IsValid
            
            <** @description: CSS valid flag **>
            Boolean CssIsValid
            
            <** @description: MAG0 valid flag **>
            Boolean Mag0IsValid
            
            <** @description: MAG1 valid flag **>
            Boolean Mag1IsValid
            
            <** @description: GYR0 valid flag **>
            Boolean Gyro0IsValid
            
            <** @description: GYR1 valid flag **>
            Boolean Gyro1IsValid
            
            <** @description: HSS0 valid flag **>
            Boolean Hss0IsValid
            
            <** @description: HSS1 valid flag **>
            Boolean Hss1IsValid
            
            <** @description: STR0 valid flag **>
            Boolean Str0IsValid
            
            <** @description: STR1 valid flag **>
            Boolean Str1IsValid
            
            <** @description: GNSS valid flag **>
            Boolean GnssIsValid
            
            <** @description: GNSS new flag **>
            Boolean GnssIsNew
            
            <** @description: ExtSensor0 valid flag **>
            Boolean ExtSensor0IsValid
            
            <** @description: ExtSensor1 valid flag **>
            Boolean ExtSensor1IsValid
            
            <** @description: RWL0 valid flag **>
            Boolean Rwl0IsValid
            
            <** @description: RWL1 valid flag **>
            Boolean Rwl1IsValid
            
            <** @description: RWL2 valid flag **>
            Boolean Rwl2IsValid
            
            <** @description: RWL3 valid flag **>
            Boolean Rwl3IsValid
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: OpenLoopCommandMtq
        @details: id = 20
    **>
    method setOpenLoopCommandMtq
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: MTQ0 open-loop on-time command **>
            Int16 Mtq0OnTimeCmd
            
            <** @description: MTQ1 open-loop on-time command **>
            Int16 Mtq1OnTimeCmd
            
            <** @description: MTQ2 open-loop on-time command **>
            Int16 Mtq2OnTimeCmd
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: OpenLoopCommandRwl
        @details: id = 21
    **>
    method setOpenLoopCommandRwl
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: RWL0 open-loop speed command **>
            Float Rwl0SpeedCmd
            
            <** @description: RWL1 open-loop speed command **>
            Float Rwl1SpeedCmd
            
            <** @description: RWL2 open-loop speed command **>
            Float Rwl2SpeedCmd
            
            <** @description: RWL3 open-loop speed command **>
            Float Rwl3SpeedCmd
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: OpenLoopCommandHxyzRW
        @details: id = 22
    **>
    method setOpenLoopCommandHxyzRW
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: X-momentum open-loop speed command **>
            Float Hx
            
            <** @description: Y-momentum open-loop speed command **>
            Float Hy
            
            <** @description: Z-momentum open-loop speed command **>
            Float Hz
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Reference commands for controllers
        @details: id = 23
    **>
    method setReferenceCommands
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: RPY Roll command **>
            Float CmdRpyRoll
            
            <** @description: RPY Pitch command **>
            Float CmdRpyPitch
            
            <** @description: RPY Yaw command **>
            Float CmdRpyYaw
            
            <** @description: Target latitude command **>
            Float CmdTargetLatitude
            
            <** @description: Target longitude command **>
            Float CmdTargetLongitude
            
            <** @description: Target altitude command **>
            Float CmdTargetAltitude
            
            <** @description: Commanded ECI pointing vector X component **>
            Float CmdEciVecX
            
            <** @description: Commanded ECI pointing vector Y component **>
            Float CmdEciVecY
            
            <** @description: Commanded ECI pointing vector Z component **>
            Float CmdEciVecZ
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Star tracker instance used for TCTLM
        @details: id = 24
    **>
    method setStrTctlmInstance
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Star tracker TCTLM instance **>
            CubeComputerControlProgram8_StrInstanceSelect StrInstance
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Sun Sensor instance used for TCTLM
        @details: id = 25
    **>
    method setFssTctlmInstance
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Sun Sensor TCTLM instance **>
            CubeComputerControlProgram8_FssInstanceSelect FssInstance
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Deploy Magnetometer
        @details: id = 26
    **>
    method setDeployCommandMag
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Deploy MAG0 **>
            Boolean DeployMag0
            
            <** @description: Deploy MAG1 **>
            Boolean DeployMag1
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: GNSS sensor measurements as command to the ADCS
        @details: id = 27
    **>
    method setGnssSensorCmd
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: GNSS Unix time integer seconds **>
            UInt32 GnssTimeSeconds
            
            <** @description: GNSS Unix time fraction nanoseconds **>
            UInt32 GnssTimeNs
            
            <** @description: Satellite position vector X component (GNSS frame) **>
            Int32 GnssSatPosX
            
            <** @description: Satellite position vector Y component (GNSS frame) **>
            Int32 GnssSatPosY
            
            <** @description: Satellite position vector Z component (GNSS frame) **>
            Int32 GnssSatPosZ
            
            <** @description: Satellite velocity vector X component (GNSS frame) **>
            Int32 GnssSatVelX
            
            <** @description: Satellite velocity vector Y component (GNSS frame) **>
            Int32 GnssSatVelY
            
            <** @description: Satellite velocity vector Z component (GNSS frame) **>
            Int32 GnssSatVelZ
            
            <** @description: Flag to indicate if RTC should sync with unix time **>
            Boolean SyncTime
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Setup a file transfer
        @details: id = 28
    **>
    method setFileTransferSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Operation to perform **>
            CubeComputerControlProgram8_FtpOpCode OpCode
            
            <** @description: File to target **>
            CubeComputerControlProgram8_FtpFiles File
            
            <** @description: OpCode = Upgrade: Node to upgrade in conjunction with SerialInt **>
            CommonFrameworkEnums_NodeType Node
            
            <** @description: OpCode = Upgrade: Serial Number Integer of node to upgrade in conjunction with Node **>
            UInt32 SerialInt
            
            <** @description: OpCode = Upgrade: The Program Type to upgrade with **>
            CommonFrameworkEnums_ProgramType Program
            
            <** @description: Size of target file: Only used to confirm setup. **>
            UInt32 FileSize
            
            <** @description: OpCode = Upgrade: Force that the node on this port is upgraded In the event that the node is not discoverable. **>
            CubeComputerControlProgram8_NodePort ForcePort
            
            <** @description: CubeSpace File Meta Data. May be less than allocated size (padding required)  
            @details: size = 128 **>
            UInt8[] MetaData
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Default mode configuration
        @details: id = 29
    **>
    method getConfigDefaultModes
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Default ADCS run mode **>
            CubeComputerControlProgram8_AdcsRunModeSelect RunModeDefault
            
            <** @description: Default ADCS operational state **>
            CubeComputerControlProgram8_AdcsOpStateSelect OpStateDefault
            
            <** @description: Default control mode in OpStateSafe **>
            CubeComputerControlProgram8_ConModeSelect ConModeSafe
            
            <** @description: Default control mode in OpStateAuto **>
            CubeComputerControlProgram8_ConModeSelect ConModeAuto
            
            
        }
    }
    
    <**
        @description: Mounting configuration
        @details: id = 30
    **>
    method getConfigMount
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: StackX mounting **>
            CubeComputerControlProgram8_AxisSelect MountStackX
            
            <** @description: StackY mounting **>
            CubeComputerControlProgram8_AxisSelect MountStackY
            
            <** @description: StackZ mounting **>
            CubeComputerControlProgram8_AxisSelect MountStackZ
            
            <** @description: MTQ0 mounting **>
            CubeComputerControlProgram8_AxisSelect MountMtq0
            
            <** @description: MTQ1 mounting **>
            CubeComputerControlProgram8_AxisSelect MountMtq1
            
            <** @description: MTQ2 mounting **>
            CubeComputerControlProgram8_AxisSelect MountMtq2
            
            <** @description: Wheel0 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl0
            
            <** @description: Wheel1 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl1
            
            <** @description: Wheel2 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl2
            
            <** @description: Wheel3 mounting **>
            CubeComputerControlProgram8_AxisSelect MountRwl3
            
            <** @description: Pyramid RWL mounting alpha angle **>
            Double MountRwlPyrAlpha
            
            <** @description: Pyramid RWL mounting beta angle **>
            Double MountRwlPyrBeta
            
            <** @description: Pyramid RWL mounting gamma angle **>
            Double MountRwlPyrGamma
            
            <** @description: CSS0 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss0
            
            <** @description: CSS1 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss1
            
            <** @description: CSS2 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss2
            
            <** @description: CSS3 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss3
            
            <** @description: CSS4 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss4
            
            <** @description: CSS5 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss5
            
            <** @description: CSS6 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss6
            
            <** @description: CSS7 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss7
            
            <** @description: CSS8 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss8
            
            <** @description: CSS9 mounting **>
            CubeComputerControlProgram8_AxisSelect MountCss9
            
            <** @description: FSS0 mounting alpha angle **>
            Double MountFss0Alpha
            
            <** @description: FSS0 mounting beta angle **>
            Double MountFss0Beta
            
            <** @description: FSS0 mounting gamma angle **>
            Double MountFss0Gamma
            
            <** @description: FSS1 mounting alpha angle **>
            Double MountFss1Alpha
            
            <** @description: FSS1 mounting beta angle **>
            Double MountFss1Beta
            
            <** @description: FSS1 mounting gamma angle **>
            Double MountFss1Gamma
            
            <** @description: FSS2 mounting alpha angle **>
            Double MountFss2Alpha
            
            <** @description: FSS2 mounting beta angle **>
            Double MountFss2Beta
            
            <** @description: FSS2 mounting gamma angle **>
            Double MountFss2Gamma
            
            <** @description: FSS3 mounting alpha angle **>
            Double MountFss3Alpha
            
            <** @description: FSS3 mounting beta angle **>
            Double MountFss3Beta
            
            <** @description: FSS3 mounting gamma angle **>
            Double MountFss3Gamma
            
            <** @description: HSS0 mounting alpha angle **>
            Double MountHss0Alpha
            
            <** @description: HSS0 mounting beta angle **>
            Double MountHss0Beta
            
            <** @description: HSS0 mounting gamma angle **>
            Double MountHss0Gamma
            
            <** @description: HSS1 mounting alpha angle **>
            Double MountHss1Alpha
            
            <** @description: HSS1 mounting beta angle **>
            Double MountHss1Beta
            
            <** @description: HSS1 mounting gamma angle **>
            Double MountHss1Gamma
            
            <** @description: MAG0 mounting alpha angle **>
            Double MountMag0Alpha
            
            <** @description: MAG0 mounting beta angle **>
            Double MountMag0Beta
            
            <** @description: MAG0 mounting gamma angle **>
            Double MountMag0Gamma
            
            <** @description: MAG1 mounting alpha angle **>
            Double MountMag1Alpha
            
            <** @description: MAG1 mounting beta angle **>
            Double MountMag1Beta
            
            <** @description: MAG1 mounting gamma angle **>
            Double MountMag1Gamma
            
            <** @description: STR0 mounting alpha angle **>
            Double MountStr0Alpha
            
            <** @description: STR0 mounting beta angle **>
            Double MountStr0Beta
            
            <** @description: STR0 mounting gamma angle **>
            Double MountStr0Gamma
            
            <** @description: STR1 mounting alpha angle **>
            Double MountStr1Alpha
            
            <** @description: STR1 mounting beta angle **>
            Double MountStr1Beta
            
            <** @description: STR1 mounting gamma angle **>
            Double MountStr1Gamma
            
            <** @description: ExtSensor0 mounting alpha angle **>
            Double MountExtSensor0Alpha
            
            <** @description: ExtSensor0 mounting beta angle **>
            Double MountExtSensor0Beta
            
            <** @description: ExtSensor0 mounting gamma angle **>
            Double MountExtSensor0Gamma
            
            <** @description: ExtSensor1 mounting alpha angle **>
            Double MountExtSensor1Alpha
            
            <** @description: ExtSensor1 mounting beta angle **>
            Double MountExtSensor1Beta
            
            <** @description: ExtSensor1 mounting gamma angle **>
            Double MountExtSensor1Gamma
            
            
        }
    }
    
    <**
        @description: Mag0 magnetometer in-orbit calibration configuration
        @details: id = 31
    **>
    method getConfigMag0OrbitCal
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Magnetometer channel 1 offset **>
            Double Offset1
            
            <** @description: Magnetometer channel 2 offset **>
            Double Offset2
            
            <** @description: Magnetometer channel 3 offset **>
            Double Offset3
            
            <** @description: Magnetometer sensitivity matrix S11 **>
            Double SensMatrix11
            
            <** @description: Magnetometer sensitivity matrix S22 **>
            Double SensMatrix22
            
            <** @description: Magnetometer sensitivity matrix S33 **>
            Double SensMatrix33
            
            <** @description: Magnetometer sensitivity matrix S12 **>
            Double SensMatrix12
            
            <** @description: Magnetometer sensitivity matrix S13 **>
            Double SensMatrix13
            
            <** @description: Magnetometer sensitivity matrix S21 **>
            Double SensMatrix21
            
            <** @description: Magnetometer sensitivity matrix S23 **>
            Double SensMatrix23
            
            <** @description: Magnetometer sensitivity matrix S31 **>
            Double SensMatrix31
            
            <** @description: Magnetometer sensitivity matrix S32 **>
            Double SensMatrix32
            
            
        }
    }
    
    <**
        @description: Mag1 magnetometer in-orbit calibration configuration
        @details: id = 32
    **>
    method getConfigMag1OrbitCal
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Magnetometer channel 1 offset **>
            Double Offset1
            
            <** @description: Magnetometer channel 2 offset **>
            Double Offset2
            
            <** @description: Magnetometer channel 3 offset **>
            Double Offset3
            
            <** @description: Magnetometer sensitivity matrix S11 **>
            Double SensMatrix11
            
            <** @description: Magnetometer sensitivity matrix S22 **>
            Double SensMatrix22
            
            <** @description: Magnetometer sensitivity matrix S33 **>
            Double SensMatrix33
            
            <** @description: Magnetometer sensitivity matrix S12 **>
            Double SensMatrix12
            
            <** @description: Magnetometer sensitivity matrix S13 **>
            Double SensMatrix13
            
            <** @description: Magnetometer sensitivity matrix S21 **>
            Double SensMatrix21
            
            <** @description: Magnetometer sensitivity matrix S23 **>
            Double SensMatrix23
            
            <** @description: Magnetometer sensitivity matrix S31 **>
            Double SensMatrix31
            
            <** @description: Magnetometer sensitivity matrix S32 **>
            Double SensMatrix32
            
            
        }
    }
    
    <**
        @description: ADCS controller configuration
        @details: id = 33
    **>
    method getConfigAdcsController
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Default control mode **>
            CubeComputerControlProgram8_ConModeSelect ConModeDefault
            
            <** @description: Detumbling damping gain (Kd) **>
            Float Kd
            
            <** @description: Sun-spin control gain (KDsun) **>
            Float Kdsun
            
            <** @description: Sun-spin control gain (KDecl) **>
            Float Kdecl
            
            <** @description: Detumbling spin gain (Ks) **>
            Float Ks
            
            <** @description: Fast B-dot detumbling gain (Kdf) **>
            Float Kdf
            
            <** @description: Y-momentum nutation damping gain (Kn) **>
            Float Kn
            
            <** @description: Y-momentum nutation damping quaternion gain (Kq) **>
            Float Kq
            
            <** @description: X-axis GG nutation damping quaternion gain (Kqx) **>
            Float Kqx
            
            <** @description: Y-axis GG nutation damping quaternion gain (Kqy) **>
            Float Kqy
            
            <** @description: Z-axis GG nutation damping quaternion gain (Kqz) **>
            Float Kqz
            
            <** @description: Wheel momentum dumping magnetic control gain (Kh) **>
            Float Kh
            
            <** @description: Y-momentum proportional gain (Kp1) **>
            Float Kp1
            
            <** @description: Y-momentum derivative gain (Kd1) **>
            Float Kd1
            
            <** @description: RWheel proportional gain (Kp2) **>
            Float Kp2
            
            <** @description: RWheel derivative gain (Kd2) **>
            Float Kd2
            
            <** @description: Tracking proportional gain (Kp3) **>
            Float Kp3
            
            <** @description: Tracking derivative gain (Kd3) **>
            Float Kd3
            
            <** @description: Tracking integral gain (Ki3) **>
            Float Ki3
            
            <** @description: Reference spin rate (wy-ref). Must always be smaller than 0 **>
            Float wy_ref
            
            <** @description: Reference wheel momentum (H-ref). Must always be smaller than 0 **>
            Float H_ref
            
            <** @description: Y-wheel bias momentum during XYZ-control (Hy-bias) **>
            Float Hy_bias
            
            <** @description: Perform yaw compensation for earth rotation in 3-axis RPY control **>
            Boolean YawCompensate
            
            
        }
    }
    
    <**
        @description: ADCS estimator configuration
        @details: id = 34
    **>
    method getConfigAdcsEstimator
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Default main estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeMainDefault
            
            <** @description: Default backup estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeBackupDefault
            
            <** @description: Magnetometer measurement noise **>
            Float MagR
            
            <** @description: Coarse sun sensor measurement noise **>
            Float CssR
            
            <** @description: Fine sun sensor measurement noise **>
            Float FssR
            
            <** @description: Horizon sensor measurement noise **>
            Float HssR
            
            <** @description: Star tracker measurement noise **>
            Float StrR
            
            <** @description: Magnetometer RKF system noise **>
            Float RkfQ
            
            <** @description: EKF system noise **>
            Float EkfQ
            
            <** @description: Polar nutation Epsilon correction **>
            Float NutDeps
            
            <** @description: Polar nutation Psi correction **>
            Float NutDpsi
            
            <** @description: Use fine sun sensor measurements in EKF **>
            Boolean EkfUseFss
            
            <** @description: Use coarse sun sensor measurements in EKF **>
            Boolean EkfUseCss
            
            <** @description: Use horizon sensor measurements in EKF **>
            Boolean EkfUseHss
            
            <** @description: Use star tracker measurements in EKF **>
            Boolean EkfUseStr
            
            <** @description: Vector 1 selection for Triad **>
            CubeComputerControlProgram8_VecSelect TVec1
            
            <** @description: Vector 2 selection for Triad **>
            CubeComputerControlProgram8_VecSelect TVec2
            
            
        }
    }
    
    <**
        @description: ADCS satellite configuration
        @details: id = 35
    **>
    method getConfigAdcsSatellite
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Moment of inertia Ixx **>
            Float Ixx
            
            <** @description: Moment of inertia Iyy **>
            Float Iyy
            
            <** @description: Moment of inertia Izz **>
            Float Izz
            
            <** @description: Product of inertia Ixy **>
            Float Ixy
            
            <** @description: Product of inertia Ixz **>
            Float Ixz
            
            <** @description: Product of inertia Iyz **>
            Float Iyz
            
            <** @description: Sun-pointing body vector X component **>
            Double SunPointBodyVecX
            
            <** @description: Sun-pointing body vector Y component **>
            Double SunPointBodyVecY
            
            <** @description: Sun-pointing body vector Z component **>
            Double SunPointBodyVecZ
            
            <** @description: Target-tracking body vector X component **>
            Double TgtTrackBodyVecX
            
            <** @description: Target-tracking body vector Y component **>
            Double TgtTrackBodyVecY
            
            <** @description: Target-tracking body vector Z component **>
            Double TgtTrackBodyVecZ
            
            <** @description: Satellite-tracking body vector X component **>
            Double SatTrackBodyVecX
            
            <** @description: Satellite-tracking body vector Y component **>
            Double SatTrackBodyVecY
            
            <** @description: Satellite-tracking body vector Z component **>
            Double SatTrackBodyVecZ
            
            
        }
    }
    
    <**
        @description: Satellite orbit parameter configuration
        @details: id = 36
    **>
    method getConfigOrbitSatParams
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Orbit epoch **>
            Double OrbitEpoch
            
            <** @description: Orbit inclination **>
            Double OrbitIncl
            
            <** @description: Orbit RAAN **>
            Double OrbitRaan
            
            <** @description: Orbit eccentricity **>
            Double OrbitEccen
            
            <** @description: Orbit argument of perigee **>
            Double OrbitAP
            
            <** @description: Orbit mean anomaly **>
            Double OrbitMA
            
            <** @description: Orbit mean motion **>
            Double OrbitMM
            
            <** @description: Orbit B-star drag term **>
            Double OrbitBstar
            
            
        }
    }
    
    <**
        @description: Satellite orbit parameter configuration
        @details: id = 37
    **>
    method getConfigOrbitTargetParams
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Orbit epoch **>
            Double OrbitEpoch
            
            <** @description: Orbit inclination **>
            Double OrbitIncl
            
            <** @description: Orbit RAAN **>
            Double OrbitRaan
            
            <** @description: Orbit eccentricity **>
            Double OrbitEccen
            
            <** @description: Orbit argument of perigee **>
            Double OrbitAP
            
            <** @description: Orbit mean anomaly **>
            Double OrbitMA
            
            <** @description: Orbit mean motion **>
            Double OrbitMM
            
            <** @description: Orbit B-star drag term **>
            Double OrbitBstar
            
            
        }
    }
    
    <**
        @description: Node selection configuration
        @details: id = 38
    **>
    method getConfigNodeSelection
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RWL selection flags **>
            UInt8 SelectRwl
            
            <** @description: MAG selection flags **>
            UInt8 SelectMag
            
            <** @description: FSS selection flags **>
            UInt8 SelectFss
            
            <** @description: HSS selection flags **>
            UInt8 SelectHss
            
            <** @description: GYR selection flags **>
            UInt8 SelectGyro
            
            <** @description: STR selection flags **>
            UInt8 SelectStr
            
            <** @description: GNSS selection flags **>
            UInt8 SelectGnss
            
            <** @description: External sensor selection flags **>
            UInt8 SelectExt
            
            
        }
    }
    
    <**
        @description: Wheel configuration
        @details: id = 39
    **>
    method getConfigActuatorRwl
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RWL0 inertia **>
            Float Rwl0Iw
            
            <** @description: RWL0 maximum momentum **>
            Float Rwl0Hmax
            
            <** @description: RWL0 maximum torque **>
            Float Rwl0Nmax
            
            <** @description: RWL1 inertia **>
            Float Rwl1Iw
            
            <** @description: RWL1 maximum momentum **>
            Float Rwl1Hmax
            
            <** @description: RWL1 maximum torque **>
            Float Rwl1Nmax
            
            <** @description: RWL2 inertia **>
            Float Rwl2Iw
            
            <** @description: RWL2 maximum momentum **>
            Float Rwl2Hmax
            
            <** @description: RWL2 maximum torque **>
            Float Rwl2Nmax
            
            <** @description: RWL3 inertia **>
            Float Rwl3Iw
            
            <** @description: RWL3 maximum momentum **>
            Float Rwl3Hmax
            
            <** @description: RWL3 maximum torque **>
            Float Rwl3Nmax
            
            <** @description: Wheel ramp torque **>
            Float NDel
            
            <** @description: Wheel scheme **>
            CubeComputerControlProgram8_RwlScheme RwlScheme
            
            <** @description: Failed wheel ID **>
            CubeComputerControlProgram8_RwlFailId RwlFailId
            
            <** @description: Pyramid nominal momentum **>
            Float PyrHnom
            
            <** @description: Pyramid tilt angle **>
            Float PyrTiltAngle
            
            
        }
    }
    
    <**
        @description: Magnetorquer configuration
        @details: id = 40
    **>
    method getConfigActuatorMtq
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: MTQ0 maximum dipole moment **>
            Float Mtq0Mmax
            
            <** @description: MTQ1 maximum dipole moment **>
            Float Mtq1Mmax
            
            <** @description: MTQ2 maximum dipole moment **>
            Float Mtq2Mmax
            
            <** @description: Maximum magnetorquer on-time **>
            UInt16 OnTimeMax
            
            <** @description: Minimum magnetorquer on-time **>
            UInt16 OnTimeMin
            
            <** @description: LPF factor for magnetorquer commands. Set to zero for no filtering **>
            Float MtqFfac
            
            
        }
    }
    
    <**
        @description: Mag sensing element (primary/redundant) configuration
        @details: id = 41
    **>
    method getConfigMagSensingElement
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: MAG0 sensing element (primary/redundant) **>
            CubeComputerControlProgram8_MagSensingElementSelect Mag0SensingElement
            
            <** @description: MAG1 sensing element (primary/redundant) **>
            CubeComputerControlProgram8_MagSensingElementSelect Mag1SensingElement
            
            
        }
    }
    
    <**
        @description: Augmented SGP4 configuration
        @details: id = 42
    **>
    method getConfigAsgp4
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Number of GNSS measurements before computing updates TLEs **>
            UInt16 BatchSize
            
            <** @description: Maximum time between GNSS measurements before resetting filters **>
            UInt32 MaxTimeBetween
            
            <** @description: Maximum position error for asgp4 to continue working **>
            UInt16 MaxPosErr
            
            <** @description: Time offset compensation gain **>
            Float TimeGain
            
            <** @description: Update SGP4 RAAN and Inclination angles from GNSS **>
            Boolean UpdateRaanIncl
            
            <** @description: Update SGP4 Eccentricity from GNSS **>
            Boolean UpdateEccen
            
            <** @description: Update SGP4 Arg. Perigee and Mean Anomaly from GNSS **>
            Boolean UpdateApMa
            
            <** @description: Update SGP4 Epoch from GNSS **>
            Boolean UpdateTime
            
            
        }
    }
    
    <**
        @description: Control mode
        @details: id = 43
    **>
    method getConMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Control mode **>
            CubeComputerControlProgram8_ConModeSelect ControlMode
            
            <** @description: Magnetic control timeout **>
            UInt16 MagConTimeout
            
            
        }
    }
    
    <**
        @description: Estimation mode
        @details: id = 44
    **>
    method getEstMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Main estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeMain
            
            <** @description: Backup estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeBackup
            
            
        }
    }
    
    <**
        @description: Orbit mode
        @details: id = 45
    **>
    method getOrbMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Orbit calculation mode **>
            CubeComputerControlProgram8_OrbModeSelect OrbitMode
            
            
        }
    }
    
    <**
        @description: ADCS run mode
        @details: id = 46
    **>
    method getAdcsRunMode
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: ADCS run mode **>
            CubeComputerControlProgram8_AdcsRunModeSelect RunMode
            
            
        }
    }
    
    <**
        @description: ADCS operational state
        @details: id = 47
    **>
    method getAdcsOpState
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: ADCS operational state **>
            CubeComputerControlProgram8_AdcsOpStateSelect OpState
            
            
        }
    }
    
    <**
        @description: Simulation raw sensor telemetry
        @details: id = 48
    **>
    method getSimSensorRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: FSS0 raw centroid X **>
            Double Fss0RawCenX
            
            <** @description: FSS0 raw centroid Y **>
            Double Fss0RawCenY
            
            <** @description: FSS1 raw centroid X **>
            Double Fss1RawCenX
            
            <** @description: FSS1 raw centroid Y **>
            Double Fss1RawCenY
            
            <** @description: FSS2 raw centroid X **>
            Double Fss2RawCenX
            
            <** @description: FSS2 raw centroid Y **>
            Double Fss2RawCenY
            
            <** @description: FSS3 raw centroid X **>
            Double Fss3RawCenX
            
            <** @description: FSS3 raw centroid Y **>
            Double Fss3RawCenY
            
            <** @description: CSS0 raw measurement **>
            UInt16 Css0Raw
            
            <** @description: CSS1 raw measurement **>
            UInt16 Css1Raw
            
            <** @description: CSS2 raw measurement **>
            UInt16 Css2Raw
            
            <** @description: CSS3 raw measurement **>
            UInt16 Css3Raw
            
            <** @description: CSS4 raw measurement **>
            UInt16 Css4Raw
            
            <** @description: CSS5 raw measurement **>
            UInt16 Css5Raw
            
            <** @description: CSS6 raw measurement **>
            UInt16 Css6Raw
            
            <** @description: CSS7 raw measurement **>
            UInt16 Css7Raw
            
            <** @description: CSS8 raw measurement **>
            UInt16 Css8Raw
            
            <** @description: CSS9 raw measurement **>
            UInt16 Css9Raw
            
            <** @description: MAG0 raw vector X component **>
            Double Mag0RawVecX
            
            <** @description: MAG0 raw vector Y component **>
            Double Mag0RawVecY
            
            <** @description: MAG0 raw vector Z component **>
            Double Mag0RawVecZ
            
            <** @description: MAG1 raw vector X component **>
            Double Mag1RawVecX
            
            <** @description: MAG1 raw vector Y component **>
            Double Mag1RawVecY
            
            <** @description: MAG1 raw vector Z component **>
            Double Mag1RawVecZ
            
            <** @description: GYR0 raw rate X component **>
            Float Gyro0RawRateX
            
            <** @description: GYR0 raw rate Y component **>
            Float Gyro0RawRateY
            
            <** @description: GYR0 raw rate Z component **>
            Float Gyro0RawRateZ
            
            <** @description: GYR1 raw rate X component **>
            Float Gyro1RawRateX
            
            <** @description: GYR1 raw rate Y component **>
            Float Gyro1RawRateY
            
            <** @description: GYR1 raw rate Z component **>
            Float Gyro1RawRateZ
            
            <** @description: HSS0 raw elevation angle **>
            Double Hss0RawElev
            
            <** @description: HSS0 raw rotation angle **>
            Double Hss0RawRot
            
            <** @description: HSS1 raw elevation angle **>
            Double Hss1RawElev
            
            <** @description: HSS1 raw rotation angle **>
            Double Hss1RawRot
            
            <** @description: STR0 measured vector 0 X component (sensor frame) **>
            Double Str0MeasVec0X
            
            <** @description: STR0 measured vector 0 Y component (sensor frame) **>
            Double Str0MeasVec0Y
            
            <** @description: STR0 measured vector 0 Z component (sensor frame) **>
            Double Str0MeasVec0Z
            
            <** @description: STR0 measured vector 1 X component (sensor frame) **>
            Double Str0MeasVec1X
            
            <** @description: STR0 measured vector 1 Y component (sensor frame) **>
            Double Str0MeasVec1Y
            
            <** @description: STR0 measured vector 1 Z component (sensor frame) **>
            Double Str0MeasVec1Z
            
            <** @description: STR0 measured vector 2 X component (sensor frame) **>
            Double Str0MeasVec2X
            
            <** @description: STR0 measured vector 2 Y component (sensor frame) **>
            Double Str0MeasVec2Y
            
            <** @description: STR0 measured vector 2 Z component (sensor frame) **>
            Double Str0MeasVec2Z
            
            <** @description: STR0 modelled vector 0 X component (IRC frame) **>
            Double Str0ModelVec0X
            
            <** @description: STR0 modelled vector 0 Y component (IRC frame) **>
            Double Str0ModelVec0Y
            
            <** @description: STR0 modelled vector 0 Z component (IRC frame) **>
            Double Str0ModelVec0Z
            
            <** @description: STR0 modelled vector 1 X component (IRC frame) **>
            Double Str0ModelVec1X
            
            <** @description: STR0 modelled vector 1 Y component (IRC frame) **>
            Double Str0ModelVec1Y
            
            <** @description: STR0 modelled vector 1 Z component (IRC frame) **>
            Double Str0ModelVec1Z
            
            <** @description: STR0 modelled vector 2 X component (IRC frame) **>
            Double Str0ModelVec2X
            
            <** @description: STR0 modelled vector 2 Y component (IRC frame) **>
            Double Str0ModelVec2Y
            
            <** @description: STR0 modelled vector 2 Z component (IRC frame) **>
            Double Str0ModelVec2Z
            
            <** @description: STR0 measured quaternion Q0 (sensor to IRC frame) **>
            Double Str0MeasQ0
            
            <** @description: STR0 measured quaternion Q1 (sensor to IRC frame) **>
            Double Str0MeasQ1
            
            <** @description: STR0 measured quaternion Q2 (sensor to IRC frame) **>
            Double Str0MeasQ2
            
            <** @description: STR0 measured quaternion Q3 (sensor to IRC frame) **>
            Double Str0MeasQ3
            
            <** @description: STR0 number of identified stars **>
            UInt8 Str0StarIdCount
            
            <** @description: STR1 measured vector 0 X component (sensor frame) **>
            Double Str1MeasVec0X
            
            <** @description: STR1 measured vector 0 Y component (sensor frame) **>
            Double Str1MeasVec0Y
            
            <** @description: STR1 measured vector 0 Z component (sensor frame) **>
            Double Str1MeasVec0Z
            
            <** @description: STR1 measured vector 1 X component (sensor frame) **>
            Double Str1MeasVec1X
            
            <** @description: STR1 measured vector 1 Y component (sensor frame) **>
            Double Str1MeasVec1Y
            
            <** @description: STR1 measured vector 1 Z component (sensor frame) **>
            Double Str1MeasVec1Z
            
            <** @description: STR1 measured vector 2 X component (sensor frame) **>
            Double Str1MeasVec2X
            
            <** @description: STR1 measured vector 2 Y component (sensor frame) **>
            Double Str1MeasVec2Y
            
            <** @description: STR1 measured vector 2 Z component (sensor frame) **>
            Double Str1MeasVec2Z
            
            <** @description: STR1 modelled vector 0 X component (IRC frame) **>
            Double Str1ModelVec0X
            
            <** @description: STR1 modelled vector 0 Y component (IRC frame) **>
            Double Str1ModelVec0Y
            
            <** @description: STR1 modelled vector 0 Z component (IRC frame) **>
            Double Str1ModelVec0Z
            
            <** @description: STR1 modelled vector 1 X component (IRC frame) **>
            Double Str1ModelVec1X
            
            <** @description: STR1 modelled vector 1 Y component (IRC frame) **>
            Double Str1ModelVec1Y
            
            <** @description: STR1 modelled vector 1 Z component (IRC frame) **>
            Double Str1ModelVec1Z
            
            <** @description: STR1 modelled vector 2 X component (IRC frame) **>
            Double Str1ModelVec2X
            
            <** @description: STR1 modelled vector 2 Y component (IRC frame) **>
            Double Str1ModelVec2Y
            
            <** @description: STR1 modelled vector 2 Z component (IRC frame) **>
            Double Str1ModelVec2Z
            
            <** @description: STR1 measured quaternion Q0 (sensor to IRC frame) **>
            Double Str1MeasQ0
            
            <** @description: STR1 measured quaternion Q1 (sensor to IRC frame) **>
            Double Str1MeasQ1
            
            <** @description: STR1 measured quaternion Q2 (sensor to IRC frame) **>
            Double Str1MeasQ2
            
            <** @description: STR1 measured quaternion Q3 (sensor to IRC frame) **>
            Double Str1MeasQ3
            
            <** @description: STR1 number of identified stars **>
            UInt8 Str1StarIdCount
            
            <** @description: GNSS Unix time integer seconds **>
            UInt32 GnssTimeSeconds
            
            <** @description: GNSS Unix time fraction nanoseconds **>
            UInt32 GnssTimeNs
            
            <** @description: Satellite position vector X component (GNSS frame) **>
            Int32 GnssSatPosX
            
            <** @description: Satellite position vector Y component (GNSS frame) **>
            Int32 GnssSatPosY
            
            <** @description: Satellite position vector Z component (GNSS frame) **>
            Int32 GnssSatPosZ
            
            <** @description: Satellite velocity vector X component (GNSS frame) **>
            Int32 GnssSatVelX
            
            <** @description: Satellite velocity vector Y component (GNSS frame) **>
            Int32 GnssSatVelY
            
            <** @description: Satellite velocity vector Z component (GNSS frame) **>
            Int32 GnssSatVelZ
            
            <** @description: ExtSensor0 raw measurement float 0 **>
            Float ExtSensor0Float0
            
            <** @description: ExtSensor0 raw measurement float 1 **>
            Float ExtSensor0Float1
            
            <** @description: ExtSensor0 raw measurement float 2 **>
            Float ExtSensor0Float2
            
            <** @description: ExtSensor0 raw measurement float 3 **>
            Float ExtSensor0Float3
            
            <** @description: ExtSensor0 raw measurement float 4 **>
            Float ExtSensor0Float4
            
            <** @description: ExtSensor0 raw measurement float 5 **>
            Float ExtSensor0Float5
            
            <** @description: ExtSensor1 raw measurement float 0 **>
            Float ExtSensor1Float0
            
            <** @description: ExtSensor1 raw measurement float 1 **>
            Float ExtSensor1Float1
            
            <** @description: ExtSensor1 raw measurement float 2 **>
            Float ExtSensor1Float2
            
            <** @description: ExtSensor1 raw measurement float 3 **>
            Float ExtSensor1Float3
            
            <** @description: ExtSensor1 raw measurement float 4 **>
            Float ExtSensor1Float4
            
            <** @description: ExtSensor1 raw measurement float 5 **>
            Float ExtSensor1Float5
            
            <** @description: RWL0 raw speed measurement **>
            Float Rwl0SpeedMeas
            
            <** @description: RWL1 raw speed measurement **>
            Float Rwl1SpeedMeas
            
            <** @description: RWL2 raw speed measurement **>
            Float Rwl2SpeedMeas
            
            <** @description: RWL3 raw speed measurement **>
            Float Rwl3SpeedMeas
            
            <** @description: FSS0 valid flag **>
            Boolean Fss0IsValid
            
            <** @description: FSS1 valid flag **>
            Boolean Fss1IsValid
            
            <** @description: FSS2 valid flag **>
            Boolean Fss2IsValid
            
            <** @description: FSS3 valid flag **>
            Boolean Fss3IsValid
            
            <** @description: CSS valid flag **>
            Boolean CssIsValid
            
            <** @description: MAG0 valid flag **>
            Boolean Mag0IsValid
            
            <** @description: MAG1 valid flag **>
            Boolean Mag1IsValid
            
            <** @description: GYR0 valid flag **>
            Boolean Gyro0IsValid
            
            <** @description: GYR1 valid flag **>
            Boolean Gyro1IsValid
            
            <** @description: HSS0 valid flag **>
            Boolean Hss0IsValid
            
            <** @description: HSS1 valid flag **>
            Boolean Hss1IsValid
            
            <** @description: STR0 valid flag **>
            Boolean Str0IsValid
            
            <** @description: STR1 valid flag **>
            Boolean Str1IsValid
            
            <** @description: GNSS valid flag **>
            Boolean GnssIsValid
            
            <** @description: GNSS new flag **>
            Boolean GnssIsNew
            
            <** @description: ExtSensor0 valid flag **>
            Boolean ExtSensor0IsValid
            
            <** @description: ExtSensor1 valid flag **>
            Boolean ExtSensor1IsValid
            
            <** @description: RWL0 valid flag **>
            Boolean Rwl0IsValid
            
            <** @description: RWL1 valid flag **>
            Boolean Rwl1IsValid
            
            <** @description: RWL2 valid flag **>
            Boolean Rwl2IsValid
            
            <** @description: RWL3 valid flag **>
            Boolean Rwl3IsValid
            
            
        }
    }
    
    <**
        @description: OpenLoopCommandMtq
        @details: id = 49
    **>
    method getOpenLoopCommandMtq
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: MTQ0 open-loop on-time command **>
            Int16 Mtq0OnTimeCmd
            
            <** @description: MTQ1 open-loop on-time command **>
            Int16 Mtq1OnTimeCmd
            
            <** @description: MTQ2 open-loop on-time command **>
            Int16 Mtq2OnTimeCmd
            
            
        }
    }
    
    <**
        @description: OpenLoopCommandRwl
        @details: id = 50
    **>
    method getOpenLoopCommandRwl
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RWL0 open-loop speed command **>
            Float Rwl0SpeedCmd
            
            <** @description: RWL1 open-loop speed command **>
            Float Rwl1SpeedCmd
            
            <** @description: RWL2 open-loop speed command **>
            Float Rwl2SpeedCmd
            
            <** @description: RWL3 open-loop speed command **>
            Float Rwl3SpeedCmd
            
            
        }
    }
    
    <**
        @description: OpenLoopCommandHxyzRW
        @details: id = 51
    **>
    method getOpenLoopCommandHxyzRW
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: X-momentum open-loop speed command **>
            Float Hx
            
            <** @description: Y-momentum open-loop speed command **>
            Float Hy
            
            <** @description: Z-momentum open-loop speed command **>
            Float Hz
            
            
        }
    }
    
    <**
        @description: Reference commands for controllers
        @details: id = 52
    **>
    method getReferenceCommands
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RPY Roll command **>
            Float CmdRpyRoll
            
            <** @description: RPY Pitch command **>
            Float CmdRpyPitch
            
            <** @description: RPY Yaw command **>
            Float CmdRpyYaw
            
            <** @description: Target latitude command **>
            Float CmdTargetLatitude
            
            <** @description: Target longitude command **>
            Float CmdTargetLongitude
            
            <** @description: Target altitude command **>
            Float CmdTargetAltitude
            
            <** @description: Commanded ECI pointing vector X component **>
            Float CmdEciVecX
            
            <** @description: Commanded ECI pointing vector Y component **>
            Float CmdEciVecY
            
            <** @description: Commanded ECI pointing vector Z component **>
            Float CmdEciVecZ
            
            
        }
    }
    
    <**
        @description: HIL telemetry
        @details: id = 53
    **>
    method getTlmHil
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Active control mode **>
            CubeComputerControlProgram8_ConModeSelect ConModeActive
            
            <** @description: Active estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeActive
            
            <** @description: Active orbit mode **>
            CubeComputerControlProgram8_OrbModeSelect OrbModeActive
            
            <** @description: GNSS and ASGP4 position error differs too much **>
            Boolean Asgp4Error
            
            <** @description: HIL is currently synchronised **>
            Boolean HilSyncOk
            
            <** @description: RWL0 speed command **>
            Float Rwl0CmdSpeed
            
            <** @description: RWL1 speed command **>
            Float Rwl1CmdSpeed
            
            <** @description: RWL2 speed command **>
            Float Rwl2CmdSpeed
            
            <** @description: RWL3 speed command **>
            Float Rwl3CmdSpeed
            
            <** @description: MTQ0 on-time command **>
            Int16 Mtq0CmdOnTime
            
            <** @description: MTQ1 on-time command **>
            Int16 Mtq1CmdOnTime
            
            <** @description: MTQ2 on-time command **>
            Int16 Mtq2CmdOnTime
            
            <** @description: Magnetic control timeout **>
            UInt16 MagConTimeout
            
            <** @description: RWL0 error flag **>
            Boolean Rwl0ErrorFlag
            
            <** @description: RWL1 error flag **>
            Boolean Rwl1ErrorFlag
            
            <** @description: RWL2 error flag **>
            Boolean Rwl2ErrorFlag
            
            <** @description: RWL3 error flag **>
            Boolean Rwl3ErrorFlag
            
            <** @description: RWL0 active flag **>
            Boolean Rwl0ActiveFlag
            
            <** @description: RWL1 active flag **>
            Boolean Rwl1ActiveFlag
            
            <** @description: RWL2 active flag **>
            Boolean Rwl2ActiveFlag
            
            <** @description: RWL3 active flag **>
            Boolean Rwl3ActiveFlag
            
            <** @description: Estimated ORC quaternion Q0 **>
            Float EstQuatQ0
            
            <** @description: Estimated ORC quaternion Q1 **>
            Float EstQuatQ1
            
            <** @description: Estimated ORC quaternion Q2 **>
            Float EstQuatQ2
            
            <** @description: Estimated ORC quaternion Q3 **>
            Float EstQuatQ3
            
            <** @description: Estimated body rate (ORC) X component **>
            Float EstRateOrcX
            
            <** @description: Estimated body rate (ORC) Y component **>
            Float EstRateOrcY
            
            <** @description: Estimated body rate (ORC) Z component **>
            Float EstRateOrcZ
            
            <** @description: Satellite ECI position vector X component **>
            Int32 SatPosEciX
            
            <** @description: Satellite ECI position vector Y component **>
            Int32 SatPosEciY
            
            <** @description: Satellite ECI position vector Z component **>
            Int32 SatPosEciZ
            
            <** @description: Satellite ECI velocity vector X component **>
            Int16 SatVelEciX
            
            <** @description: Satellite ECI velocity vector Y component **>
            Int16 SatVelEciY
            
            <** @description: Satellite ECI velocity vector Z component **>
            Int16 SatVelEciZ
            
            <** @description: Commanded roll angle **>
            Float RpyCmdRoll
            
            <** @description: Commanded pitch angle **>
            Float RpyCmdPitch
            
            <** @description: Commanded yaw angle **>
            Float RpyCmdYaw
            
            <** @description: ASGP4 batch counter **>
            UInt16 Asgp4BatchCtr
            
            <** @description: Average position error between GNSS and ASGP4 **>
            UInt16 Asgp4PosDelta
            
            <** @description: RWL0 speed measurement **>
            Float Rwl0MeasSpeed
            
            <** @description: RWL1 speed measurement **>
            Float Rwl1MeasSpeed
            
            <** @description: RWL2 speed measurement **>
            Float Rwl2MeasSpeed
            
            <** @description: RWL3 speed measurement **>
            Float Rwl3MeasSpeed
            
            <** @description: RWL0 measurement valid flag **>
            Boolean Rwl0MeasValid
            
            <** @description: RWL1 measurement valid flag **>
            Boolean Rwl1MeasValid
            
            <** @description: RWL2 measurement valid flag **>
            Boolean Rwl2MeasValid
            
            <** @description: RWL3 measurement valid flag **>
            Boolean Rwl3MeasValid
            
            
        }
    }
    
    <**
        @description: Current execution point
        @details: id = 54
    **>
    method getTlmExecutionPoint
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Indicates which part of the loop is currently executing **>
            CubeComputerControlProgram8_AcpExecutionPoint CurrentExecutionPoint
            
            
        }
    }
    
    <**
        @description: Current initialization state of each node
        @details: id = 55
    **>
    method getTlmNodeInitState
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RWL0 init state **>
            CubeComputerControlProgram8_InitState Rwl0State
            
            <** @description: RWL1 init state **>
            CubeComputerControlProgram8_InitState Rwl1State
            
            <** @description: RWL2 init state **>
            CubeComputerControlProgram8_InitState Rwl2State
            
            <** @description: RWL3 init state **>
            CubeComputerControlProgram8_InitState Rwl3State
            
            <** @description: MAG0 init state **>
            CubeComputerControlProgram8_InitState Mag0State
            
            <** @description: MAG1 init state **>
            CubeComputerControlProgram8_InitState Mag1State
            
            <** @description: GYR0 init state **>
            CubeComputerControlProgram8_InitState Gyro0State
            
            <** @description: GYR1 init state **>
            CubeComputerControlProgram8_InitState Gyro1State
            
            <** @description: FSS0 init state **>
            CubeComputerControlProgram8_InitState Fss0State
            
            <** @description: FSS1 init state **>
            CubeComputerControlProgram8_InitState Fss1State
            
            <** @description: FSS2 init state **>
            CubeComputerControlProgram8_InitState Fss2State
            
            <** @description: FSS3 init state **>
            CubeComputerControlProgram8_InitState Fss3State
            
            <** @description: HSS0 init state **>
            CubeComputerControlProgram8_InitState Hss0State
            
            <** @description: HSS1 init state **>
            CubeComputerControlProgram8_InitState Hss1State
            
            <** @description: STR0 init state **>
            CubeComputerControlProgram8_InitState Str0State
            
            <** @description: STR1 init state **>
            CubeComputerControlProgram8_InitState Str1State
            
            <** @description: ExtSensor0 init state **>
            CubeComputerControlProgram8_InitState ExtSensor0State
            
            <** @description: ExtSensor1 init state **>
            CubeComputerControlProgram8_InitState ExtSensor1State
            
            
        }
    }
    
    <**
        @description: Setup a file transfer
        @details: id = 56
    **>
    method getFileTransferSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Operation to perform **>
            CubeComputerControlProgram8_FtpOpCode OpCode
            
            <** @description: File to target **>
            CubeComputerControlProgram8_FtpFiles File
            
            <** @description: OpCode = Upgrade: Node to upgrade in conjunction with SerialInt **>
            CommonFrameworkEnums_NodeType Node
            
            <** @description: OpCode = Upgrade: Serial Number Integer of node to upgrade in conjunction with Node **>
            UInt32 SerialInt
            
            <** @description: OpCode = Upgrade: The Program Type to upgrade with **>
            CommonFrameworkEnums_ProgramType Program
            
            <** @description: Size of target file: Only used to confirm setup. **>
            UInt32 FileSize
            
            <** @description: OpCode = Upgrade: Force that the node on this port is upgraded In the event that the node is not discoverable. **>
            CubeComputerControlProgram8_NodePort ForcePort
            
            <** @description: CubeSpace File Meta Data. May be less than allocated size (padding required)  
            @details: size = 128 **>
            UInt8[] MetaData
            
            
        }
    }
    
    <**
        @description: File Transfer Status
        @details: id = 57
    **>
    method getFileTransferStatus
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: FTP Global State **>
            CubeComputerControlProgram8_FtpState State
            
            <** @description: FTP Internal Upgrade State **>
            CubeComputerControlProgram8_FtpUpgradeState UpgradeState
            
            <** @description: Amount of remaining data to transfer **>
            UInt32 DataRemain
            
            <** @description: Operation Error Code. Non-Zero = ERROR **>
            UInt32 ErrorCode
            
            <** @description: Bootloader is busy **>
            Boolean BusyError
            
            <** @description: File Metadata received is invalid **>
            Boolean FileMetaError
            
            <** @description: File version is incompatible **>
            Boolean VersionError
            
            <** @description: Target node does not exist **>
            Boolean NodeExistError
            
            <** @description: Target node is not expected **>
            Boolean NodeExpectError
            
            <** @description: File CRC Error Flag **>
            Boolean FileCrcError
            
            <** @description: File is too large **>
            Boolean FileSizeError
            
            <** @description: File Error Flag (open/close) **>
            Boolean FileError
            
            <** @description: File Invalid Error Flag **>
            Boolean FileInvalidError
            
            <** @description: File Full Error Flag **>
            Boolean FileFullError
            
            <** @description: File Empty Error Flag **>
            Boolean FileEmptyError
            
            <** @description: Read Error Flag **>
            Boolean ReadError
            
            <** @description: Write Error Flag **>
            Boolean WriteError
            
            <** @description: Erase Error Flag **>
            Boolean EraseError
            
            <** @description: Frame Size Error Flag **>
            Boolean FrameSizeError
            
            <** @description: Timeout Error Flag **>
            Boolean TimeoutError
            
            <** @description: Node comms fails during upgrade **>
            Boolean NodeCommsError
            
            <** @description: Node is required for control **>
            Boolean NodeUsedError
            
            
        }
    }
    
    <**
        @description: Cached file information after calling FileTransferSetup
        @details: id = 58
    **>
    method getFileInfo
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: File this info represents **>
            CubeComputerControlProgram8_FtpFiles File
            
            <** @description: Which storage medmium is the file in **>
            CubeComputerControlProgram8_FtpBackend Backend
            
            <** @description: File Type **>
            CubeComputerControlProgram8_FtpFileType Type
            
            <** @description: File Size (actual data written) **>
            UInt32 Size
            
            <** @description: Size of memory allocated to file **>
            UInt32 AllocSize
            
            <** @description: Vector Table Offset: Onling applicable to application binary files **>
            UInt32 VectTblOffset
            
            <** @description: Modification Unix time s **>
            UInt32 UnixTimeSeconds
            
            <** @description: Modification Unix time ns **>
            UInt32 UnixTimeNanoSeconds
            
            <** @description: File CRC **>
            UInt32 Crc
            
            <** @description: ASCII string of chars denoting the CubeSpace Component this file is for/from  
            @details: size = 32 **>
            UInt8[] Component
            
            <** @description: ASCII string of chars denoting the Component Application this file is for/from  
            @details: size = 32 **>
            UInt8[] Program
            
            <** @description: Firmware version (Major) that this file is for/from **>
            UInt8 FirmwareMajorVersion
            
            <** @description: Firmware version (Minor) that this file is for/from **>
            UInt8 FirmwareMinorVersion
            
            <** @description: Firmware version (Patch) that this file is for/from **>
            UInt16 FirmwarePatchVersion
            
            <** @description: System version (Major) that this file is for/from **>
            UInt8 SystemMajorVersion
            
            <** @description: System version (Minor) that this file is for/from **>
            UInt8 SystemMinorVersion
            
            <** @description: System version (Patch) that this file is for/from **>
            UInt16 SystemPatchVersion
            
            <** @description: The Node Type that owns the file **>
            CommonFrameworkEnums_NodeType OwnerNodeType
            
            <** @description: The Serial Number integer of the node that owns the file **>
            UInt32 OwnerSerialInt
            
            <** @description: The Program Type that owns the file **>
            CommonFrameworkEnums_ProgramType OwnerProgram
            
            
        }
    }
    
    <**
        @description: Raw CSS sensor telemetry
        @details: id = 59
    **>
    method getTlmSensorRawCss
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: CSS0 raw measurement **>
            UInt8 Css0Raw
            
            <** @description: CSS1 raw measurement **>
            UInt8 Css1Raw
            
            <** @description: CSS2 raw measurement **>
            UInt8 Css2Raw
            
            <** @description: CSS3 raw measurement **>
            UInt8 Css3Raw
            
            <** @description: CSS4 raw measurement **>
            UInt8 Css4Raw
            
            <** @description: CSS5 raw measurement **>
            UInt8 Css5Raw
            
            <** @description: CSS6 raw measurement **>
            UInt8 Css6Raw
            
            <** @description: CSS7 raw measurement **>
            UInt8 Css7Raw
            
            <** @description: CSS8 raw measurement **>
            UInt8 Css8Raw
            
            <** @description: CSS9 raw measurement **>
            UInt8 Css9Raw
            
            <** @description: CSS valid flag **>
            Boolean CssIsValid
            
            
        }
    }
    
    <**
        @description: Raw MAG sensor telemetry
        @details: id = 60
    **>
    method getTlmSensorRawMag
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: MAG0 raw vector X component **>
            Double Mag0RawVecX
            
            <** @description: MAG0 raw vector Y component **>
            Double Mag0RawVecY
            
            <** @description: MAG0 raw vector Z component **>
            Double Mag0RawVecZ
            
            <** @description: MAG1 raw vector X component **>
            Double Mag1RawVecX
            
            <** @description: MAG1 raw vector Y component **>
            Double Mag1RawVecY
            
            <** @description: MAG1 raw vector Z component **>
            Double Mag1RawVecZ
            
            <** @description: MAG0 valid flag **>
            Boolean Mag0IsValid
            
            <** @description: MAG1 valid flag **>
            Boolean Mag1IsValid
            
            
        }
    }
    
    <**
        @description: Raw GYRO sensor telemetry
        @details: id = 61
    **>
    method getTlmSensorRawGyro
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: GYR0 raw rate X component **>
            Float Gyro0RawRateX
            
            <** @description: GYR0 raw rate Y component **>
            Float Gyro0RawRateY
            
            <** @description: GYR0 raw rate Z component **>
            Float Gyro0RawRateZ
            
            <** @description: GYR1 raw rate X component **>
            Float Gyro1RawRateX
            
            <** @description: GYR1 raw rate Y component **>
            Float Gyro1RawRateY
            
            <** @description: GYR1 raw rate Z component **>
            Float Gyro1RawRateZ
            
            <** @description: GYR0 valid flag **>
            Boolean Gyro0IsValid
            
            <** @description: GYR1 valid flag **>
            Boolean Gyro1IsValid
            
            
        }
    }
    
    <**
        @description: Raw RWL sensor telemetry
        @details: id = 62
    **>
    method getTlmSensorRawRwl
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: RWL0 measured speed **>
            Float Rwl0MeasSpeed
            
            <** @description: RWL1 measured speed **>
            Float Rwl1MeasSpeed
            
            <** @description: RWL2 measured speed **>
            Float Rwl2MeasSpeed
            
            <** @description: RWL3 measured speed **>
            Float Rwl3MeasSpeed
            
            <** @description: RWL0 valid flag **>
            Boolean Rwl0IsValid
            
            <** @description: RWL1 valid flag **>
            Boolean Rwl1IsValid
            
            <** @description: RWL2 valid flag **>
            Boolean Rwl2IsValid
            
            <** @description: RWL3 valid flag **>
            Boolean Rwl3IsValid
            
            
        }
    }
    
    <**
        @description: Calibrated FSS sensor telemetry
        @details: id = 63
    **>
    method getTlmSensorCalFss
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: FSS0 calibrated unit vector X component **>
            Double Fss0CalVecX
            
            <** @description: FSS0 calibrated unit vector Y component **>
            Double Fss0CalVecY
            
            <** @description: FSS0 calibrated unit vector Z component **>
            Double Fss0CalVecZ
            
            <** @description: FSS1 calibrated unit vector X component **>
            Double Fss1CalVecX
            
            <** @description: FSS1 calibrated unit vector Y component **>
            Double Fss1CalVecY
            
            <** @description: FSS1 calibrated unit vector Z component **>
            Double Fss1CalVecZ
            
            <** @description: FSS2 calibrated unit vector X component **>
            Double Fss2CalVecX
            
            <** @description: FSS2 calibrated unit vector Y component **>
            Double Fss2CalVecY
            
            <** @description: FSS2 calibrated unit vector Z component **>
            Double Fss2CalVecZ
            
            <** @description: FSS3 calibrated unit vector X component **>
            Double Fss3CalVecX
            
            <** @description: FSS3 calibrated unit vector Y component **>
            Double Fss3CalVecY
            
            <** @description: FSS3 calibrated unit vector Z component **>
            Double Fss3CalVecZ
            
            <** @description: FSS0 valid flag **>
            Boolean Fss0IsValid
            
            <** @description: FSS1 valid flag **>
            Boolean Fss1IsValid
            
            <** @description: FSS2 valid flag **>
            Boolean Fss2IsValid
            
            <** @description: FSS3 valid flag **>
            Boolean Fss3IsValid
            
            <** @description: FSS0 best for estimators flag **>
            Boolean Fss0IsBest
            
            <** @description: FSS1 best for estimators flag **>
            Boolean Fss1IsBest
            
            <** @description: FSS2 best for estimators flag **>
            Boolean Fss2IsBest
            
            <** @description: FSS3 best for estimators flag **>
            Boolean Fss3IsBest
            
            
        }
    }
    
    <**
        @description: Calibrated CSS sensor telemetry
        @details: id = 64
    **>
    method getTlmSensorCalCss
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: CSS calibrated unit vector X component **>
            Double CssCalVecX
            
            <** @description: CSS calibrated unit vector Y component **>
            Double CssCalVecY
            
            <** @description: CSS calibrated unit vector Z component **>
            Double CssCalVecZ
            
            <** @description: CSS valid flag **>
            Boolean CssIsValid
            
            
        }
    }
    
    <**
        @description: Calibrated MAG sensor telemetry
        @details: id = 65
    **>
    method getTlmSensorCalMag
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: MAG0 calibrated vector X component **>
            Double Mag0CalVecX
            
            <** @description: MAG0 calibrated vector Y component **>
            Double Mag0CalVecY
            
            <** @description: MAG0 calibrated vector Z component **>
            Double Mag0CalVecZ
            
            <** @description: MAG1 calibrated vector X component **>
            Double Mag1CalVecX
            
            <** @description: MAG1 calibrated vector Y component **>
            Double Mag1CalVecY
            
            <** @description: MAG1 calibrated vector Z component **>
            Double Mag1CalVecZ
            
            <** @description: MAG0 valid flag **>
            Boolean Mag0IsValid
            
            <** @description: MAG1 valid flag **>
            Boolean Mag1IsValid
            
            <** @description: MAG0 best for estimators flag **>
            Boolean Mag0IsBest
            
            <** @description: MAG1 best for estimators flag **>
            Boolean Mag1IsBest
            
            
        }
    }
    
    <**
        @description: Calibrated GYRO sensor telemetry
        @details: id = 66
    **>
    method getTlmSensorCalGyro
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: GYR0 calibrated rate X component **>
            Float Gyro0CalRateX
            
            <** @description: GYR0 calibrated rate Y component **>
            Float Gyro0CalRateY
            
            <** @description: GYR0 calibrated rate Z component **>
            Float Gyro0CalRateZ
            
            <** @description: GYR1 calibrated rate X component **>
            Float Gyro1CalRateX
            
            <** @description: GYR1 calibrated rate Y component **>
            Float Gyro1CalRateY
            
            <** @description: GYR1 calibrated rate Z component **>
            Float Gyro1CalRateZ
            
            <** @description: GYR0 valid flag **>
            Boolean Gyro0IsValid
            
            <** @description: GYR1 valid flag **>
            Boolean Gyro1IsValid
            
            
        }
    }
    
    <**
        @description: Calibrated HSS sensor telemetry
        @details: id = 67
    **>
    method getTlmSensorCalHss
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: HSS0 calibrated unit vector X component **>
            Double Hss0CalVecX
            
            <** @description: HSS0 calibrated unit vector Y component **>
            Double Hss0CalVecY
            
            <** @description: HSS0 calibrated unit vector Z component **>
            Double Hss0CalVecZ
            
            <** @description: HSS1 calibrated unit vector X component **>
            Double Hss1CalVecX
            
            <** @description: HSS1 calibrated unit vector Y component **>
            Double Hss1CalVecY
            
            <** @description: HSS1 calibrated unit vector Z component **>
            Double Hss1CalVecZ
            
            <** @description: HSS0 valid flag **>
            Boolean Hss0IsValid
            
            <** @description: HSS1 valid flag **>
            Boolean Hss1IsValid
            
            
        }
    }
    
    <**
        @description: Calibrated STR sensor telemetry
        @details: id = 68
    **>
    method getTlmSensorCalStr
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: STR0 measured body vector 0 X component **>
            Double Str0MeasBodyVec0X
            
            <** @description: STR0 measured body vector 0 Y component **>
            Double Str0MeasBodyVec0Y
            
            <** @description: STR0 measured body vector 0 Z component **>
            Double Str0MeasBodyVec0Z
            
            <** @description: STR0 measured body vector 1 X component **>
            Double Str0MeasBodyVec1X
            
            <** @description: STR0 measured body vector 1 Y component **>
            Double Str0MeasBodyVec1Y
            
            <** @description: STR0 measured body vector 1 Z component **>
            Double Str0MeasBodyVec1Z
            
            <** @description: STR0 measured body vector 2 X component **>
            Double Str0MeasBodyVec2X
            
            <** @description: STR0 measured body vector 2 Y component **>
            Double Str0MeasBodyVec2Y
            
            <** @description: STR0 measured body vector 2 Z component **>
            Double Str0MeasBodyVec2Z
            
            <** @description: STR0 modelled ORC vector 0 X component **>
            Double Str0ModelOrbitVec0X
            
            <** @description: STR0 modelled ORC vector 0 Y component **>
            Double Str0ModelOrbitVec0Y
            
            <** @description: STR0 modelled ORC vector 0 Z component **>
            Double Str0ModelOrbitVec0Z
            
            <** @description: STR0 modelled ORC vector 1 X component **>
            Double Str0ModelOrbitVec1X
            
            <** @description: STR0 modelled ORC vector 1 Y component **>
            Double Str0ModelOrbitVec1Y
            
            <** @description: STR0 modelled ORC vector 1 Z component **>
            Double Str0ModelOrbitVec1Z
            
            <** @description: STR0 modelled ORC vector 2 X component **>
            Double Str0ModelOrbitVec2X
            
            <** @description: STR0 modelled ORC vector 2 Y component **>
            Double Str0ModelOrbitVec2Y
            
            <** @description: STR0 modelled ORC vector 2 Z component **>
            Double Str0ModelOrbitVec2Z
            
            <** @description: STR1 measured body vector 0 X component **>
            Double Str1MeasBodyVec0X
            
            <** @description: STR1 measured body vector 0 Y component **>
            Double Str1MeasBodyVec0Y
            
            <** @description: STR1 measured body vector 0 Z component **>
            Double Str1MeasBodyVec0Z
            
            <** @description: STR1 measured body vector 1 X component **>
            Double Str1MeasBodyVec1X
            
            <** @description: STR1 measured body vector 1 Y component **>
            Double Str1MeasBodyVec1Y
            
            <** @description: STR1 measured body vector 1 Z component **>
            Double Str1MeasBodyVec1Z
            
            <** @description: STR1 measured body vector 2 X component **>
            Double Str1MeasBodyVec2X
            
            <** @description: STR1 measured body vector 2 Y component **>
            Double Str1MeasBodyVec2Y
            
            <** @description: STR1 measured body vector 2 Z component **>
            Double Str1MeasBodyVec2Z
            
            <** @description: STR1 modelled ORC vector 0 X component **>
            Double Str1ModelOrbitVec0X
            
            <** @description: STR1 modelled ORC vector 0 Y component **>
            Double Str1ModelOrbitVec0Y
            
            <** @description: STR1 modelled ORC vector 0 Z component **>
            Double Str1ModelOrbitVec0Z
            
            <** @description: STR1 modelled ORC vector 1 X component **>
            Double Str1ModelOrbitVec1X
            
            <** @description: STR1 modelled ORC vector 1 Y component **>
            Double Str1ModelOrbitVec1Y
            
            <** @description: STR1 modelled ORC vector 1 Z component **>
            Double Str1ModelOrbitVec1Z
            
            <** @description: STR1 modelled ORC vector 2 X component **>
            Double Str1ModelOrbitVec2X
            
            <** @description: STR1 modelled ORC vector 2 Y component **>
            Double Str1ModelOrbitVec2Y
            
            <** @description: STR1 modelled ORC vector 2 Z component **>
            Double Str1ModelOrbitVec2Z
            
            <** @description: STR0 valid flag **>
            Boolean Str0IsValid
            
            <** @description: STR1 valid flag **>
            Boolean Str1IsValid
            
            
        }
    }
    
    <**
        @description: Calibrated GNSS sensor telemetry
        @details: id = 69
    **>
    method getTlmSensorCalGnss
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Satellite ECEF position vector X component **>
            Float GnssSatPosEcefX
            
            <** @description: Satellite ECEF position vector Y component **>
            Float GnssSatPosEcefY
            
            <** @description: Satellite ECEF position vector Z component **>
            Float GnssSatPosEcefZ
            
            <** @description: Satellite ECEF velocity vector X component **>
            Float GnssSatVelEcefX
            
            <** @description: Satellite ECEF velocity vector Y component **>
            Float GnssSatVelEcefY
            
            <** @description: Satellite ECEF velocity vector Z component **>
            Float GnssSatVelEcefZ
            
            <** @description: GNSS-supplied unix time integer seconds **>
            UInt32 GnssTimeSeconds
            
            <** @description: GNSS-supplied unix time nanoseconds **>
            UInt32 GnssTimeNs
            
            <** @description: GNSS valid flag **>
            Boolean GnssIsValid
            
            
        }
    }
    
    <**
        @description: Calibrated RWL sensor telemetry
        @details: id = 70
    **>
    method getTlmSensorCalRwl
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Wheel SBC torque vector X component **>
            Float RwlTorqueVecX
            
            <** @description: Wheel SBC torque vector Y component **>
            Float RwlTorqueVecY
            
            <** @description: Wheel SBC torque vector Z component **>
            Float RwlTorqueVecZ
            
            <** @description: Wheel SBC momentum vector X component **>
            Float RwlMomVecX
            
            <** @description: Wheel SBC momentum vector Y component **>
            Float RwlMomVecY
            
            <** @description: Wheel SBC momentum vector Z component **>
            Float RwlMomVecZ
            
            <** @description: RWL valid flag **>
            Boolean RwlIsValid
            
            
        }
    }
    
    <**
        @description: Models telemetry
        @details: id = 71
    **>
    method getTlmModels
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Satellite ECI position vector X component **>
            Int32 SatPosEciX
            
            <** @description: Satellite ECI position vector Y component **>
            Int32 SatPosEciY
            
            <** @description: Satellite ECI position vector Z component **>
            Int32 SatPosEciZ
            
            <** @description: Satellite ECI velocity vector X component **>
            Int16 SatVelEciX
            
            <** @description: Satellite ECI velocity vector Y component **>
            Int16 SatVelEciY
            
            <** @description: Satellite ECI velocity vector Z component **>
            Int16 SatVelEciZ
            
            <** @description: Satellite geodetic latitude **>
            Double SatLatGeod
            
            <** @description: Satellite geocentric latitude **>
            Double SatLatGeoc
            
            <** @description: Satellite longitude **>
            Double SatLon
            
            <** @description: Satellite altitude **>
            Double SatAlt
            
            <** @description: Target satellite ECI position vector X component **>
            Int32 TgtPosEciX
            
            <** @description: Target satellite ECI position vector Y component **>
            Int32 TgtPosEciY
            
            <** @description: Target satellite ECI position vector Z component **>
            Int32 TgtPosEciZ
            
            <** @description: IGRF ORC model X component **>
            Double ModelMagOrcX
            
            <** @description: IGRF ORC model Y component **>
            Double ModelMagOrcY
            
            <** @description: IGRF ORC model Z component **>
            Double ModelMagOrcZ
            
            <** @description: Sun ORC model X component **>
            Double ModelSunOrcX
            
            <** @description: Sun ORC model Y component **>
            Double ModelSunOrcY
            
            <** @description: Sun ORC model Z component **>
            Double ModelSunOrcZ
            
            <** @description: Sun beta angle with orbit plane **>
            Double ModelSunBetaAngle
            
            <** @description: Horizon angle in XoYo plane **>
            Double ModelHorRhoAngle
            
            <** @description: Horizon East angle from Xo direction **>
            Double ModelHorXoEastAngle
            
            <** @description: Horizon East angle from Yi direction **>
            Double ModelHorYiEastAngle
            
            <** @description: Satellite to ground ORC target vector X component **>
            Int32 Sat2TgtGndOrcX
            
            <** @description: Satellite to ground ORC target vector Y component **>
            Int32 Sat2TgtGndOrcY
            
            <** @description: Satellite to ground ORC target vector Z component **>
            Int32 Sat2TgtGndOrcZ
            
            <** @description: ASGP4 batch counter **>
            UInt16 Asgp4BatchCtr
            
            <** @description: Average position error between GNSS and ASGP4 **>
            UInt16 Asgp4PosDelta
            
            <** @description: Active orbit mode **>
            CubeComputerControlProgram8_OrbModeSelect OrbModeActive
            
            <** @description: GNSS and ASGP4 position error differs too much **>
            Boolean Asgp4Error
            
            <** @description: Eclipse flag **>
            Boolean Eclipse
            
            
        }
    }
    
    <**
        @description: Main estimator telemetry
        @details: id = 72
    **>
    method getTlmEstimatorMain
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Estimated roll angle **>
            Double EstRpyRoll
            
            <** @description: Estimated pitch angle **>
            Double EstRpyPitch
            
            <** @description: Estimated yaw angle **>
            Double EstRpyYaw
            
            <** @description: Estimated ORC quaternion Q0 **>
            Double EstQuatQ0
            
            <** @description: Estimated ORC quaternion Q1 **>
            Double EstQuatQ1
            
            <** @description: Estimated ORC quaternion Q2 **>
            Double EstQuatQ2
            
            <** @description: Estimated ORC quaternion Q3 **>
            Double EstQuatQ3
            
            <** @description: Estimated gyro bias X component **>
            Double EstGyroBiasX
            
            <** @description: Estimated gyro bias Y component **>
            Double EstGyroBiasY
            
            <** @description: Estimated gyro bias Z component **>
            Double EstGyroBiasZ
            
            <** @description: Estimated body rate (ORC) X component **>
            Double EstRateOrcX
            
            <** @description: Estimated body rate (ORC) Y component **>
            Double EstRateOrcY
            
            <** @description: Estimated body rate (ORC) Z component **>
            Double EstRateOrcZ
            
            <** @description: Estimated body rate (IRC) X component **>
            Double EstRateIrcX
            
            <** @description: Estimated body rate (IRC) Y component **>
            Double EstRateIrcY
            
            <** @description: Estimated body rate (IRC) Z component **>
            Double EstRateIrcZ
            
            <** @description: Estimated gyroscopic torque X component **>
            Float EstGyrTorqueX
            
            <** @description: Estimated gyroscopic torque Y component **>
            Float EstGyrTorqueY
            
            <** @description: Estimated gyroscopic torque Z component **>
            Float EstGyrTorqueZ
            
            <** @description: Innovation vector X component **>
            Double EstInnovX
            
            <** @description: Innovation vector Y component **>
            Double EstInnovY
            
            <** @description: Innovation vector Z component **>
            Double EstInnovZ
            
            <** @description: StdDev of estimated rate X component **>
            Double EstStdDevRateX
            
            <** @description: StdDev of estimated rate Y component **>
            Double EstStdDevRateY
            
            <** @description: StdDev of estimated rate Z component **>
            Double EstStdDevRateZ
            
            <** @description: StdDev of estimated quaternion Q0 component **>
            Double EstStdDevQ0
            
            <** @description: StdDev of estimated quaternion Q1 component **>
            Double EstStdDevQ1
            
            <** @description: StdDev of estimated quaternion Q2 component **>
            Double EstStdDevQ2
            
            <** @description: Active estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeActive
            
            
        }
    }
    
    <**
        @description: Backup estimator telemetry
        @details: id = 73
    **>
    method getTlmEstimatorBackup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Estimated roll angle **>
            Double EstRpyRoll
            
            <** @description: Estimated pitch angle **>
            Double EstRpyPitch
            
            <** @description: Estimated yaw angle **>
            Double EstRpyYaw
            
            <** @description: Estimated ORC quaternion Q0 **>
            Double EstQuatQ0
            
            <** @description: Estimated ORC quaternion Q1 **>
            Double EstQuatQ1
            
            <** @description: Estimated ORC quaternion Q2 **>
            Double EstQuatQ2
            
            <** @description: Estimated ORC quaternion Q3 **>
            Double EstQuatQ3
            
            <** @description: Estimated gyro bias X component **>
            Double EstGyroBiasX
            
            <** @description: Estimated gyro bias Y component **>
            Double EstGyroBiasY
            
            <** @description: Estimated gyro bias Z component **>
            Double EstGyroBiasZ
            
            <** @description: Estimated body rate (ORC) X component **>
            Double EstRateOrcX
            
            <** @description: Estimated body rate (ORC) Y component **>
            Double EstRateOrcY
            
            <** @description: Estimated body rate (ORC) Z component **>
            Double EstRateOrcZ
            
            <** @description: Estimated body rate (IRC) X component **>
            Double EstRateIrcX
            
            <** @description: Estimated body rate (IRC) Y component **>
            Double EstRateIrcY
            
            <** @description: Estimated body rate (IRC) Z component **>
            Double EstRateIrcZ
            
            <** @description: Estimated gyroscopic torque X component **>
            Float EstGyrTorqueX
            
            <** @description: Estimated gyroscopic torque Y component **>
            Float EstGyrTorqueY
            
            <** @description: Estimated gyroscopic torque Z component **>
            Float EstGyrTorqueZ
            
            <** @description: Innovation vector X component **>
            Double EstInnovX
            
            <** @description: Innovation vector Y component **>
            Double EstInnovY
            
            <** @description: Innovation vector Z component **>
            Double EstInnovZ
            
            <** @description: StdDev of estimated rate X component **>
            Double EstStdDevRateX
            
            <** @description: StdDev of estimated rate Y component **>
            Double EstStdDevRateY
            
            <** @description: StdDev of estimated rate Z component **>
            Double EstStdDevRateZ
            
            <** @description: StdDev of estimated quaternion Q0 component **>
            Double EstStdDevQ0
            
            <** @description: StdDev of estimated quaternion Q1 component **>
            Double EstStdDevQ1
            
            <** @description: StdDev of estimated quaternion Q2 component **>
            Double EstStdDevQ2
            
            <** @description: Active estimator mode **>
            CubeComputerControlProgram8_EstModeSelect EstModeActive
            
            
        }
    }
    
    <**
        @description: Main estimator high-resolution telemetry
        @details: id = 74
    **>
    method getTlmEstimatorMainHighRes
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Estimated ORC quaternion Q0 **>
            Float EstQuatQ0
            
            <** @description: Estimated ORC quaternion Q1 **>
            Float EstQuatQ1
            
            <** @description: Estimated ORC quaternion Q2 **>
            Float EstQuatQ2
            
            <** @description: Estimated ORC quaternion Q3 **>
            Float EstQuatQ3
            
            <** @description: Estimated body rate (ORC) X component **>
            Float EstRateOrcX
            
            <** @description: Estimated body rate (ORC) Y component **>
            Float EstRateOrcY
            
            <** @description: Estimated body rate (ORC) Z component **>
            Float EstRateOrcZ
            
            
        }
    }
    
    <**
        @description: Controller telemetry
        @details: id = 75
    **>
    method getTlmController
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Commanded roll angle **>
            Double RpyCmdRoll
            
            <** @description: Commanded pitch angle **>
            Double RpyCmdPitch
            
            <** @description: Commanded yaw angle **>
            Double RpyCmdYaw
            
            <** @description: Error roll angle (steering) **>
            Double RpyErrRoll
            
            <** @description: Error pitch angle (steering) **>
            Double RpyErrPitch
            
            <** @description: Error yaw angle (steering) **>
            Double RpyErrYaw
            
            <** @description: Reference ground/GEO target latitude **>
            Float TgtRefLat
            
            <** @description: Reference ground/GEO target longitude **>
            Float TgtRefLon
            
            <** @description: Reference ground/GEO target altitude **>
            Int32 TgtRefAlt
            
            <** @description: Control error quaternion vector Q0 **>
            Double QuatErrQ0
            
            <** @description: Control error quaternion vector Q1 **>
            Double QuatErrQ1
            
            <** @description: Control error quaternion vector Q2 **>
            Double QuatErrQ2
            
            <** @description: RWL0 speed command **>
            Float Rwl0CmdSpeed
            
            <** @description: RWL1 speed command **>
            Float Rwl1CmdSpeed
            
            <** @description: RWL2 speed command **>
            Float Rwl2CmdSpeed
            
            <** @description: RWL3 speed command **>
            Float Rwl3CmdSpeed
            
            <** @description: RWL0 momentum command **>
            Float Rwl0CmdMom
            
            <** @description: RWL1 momentum command **>
            Float Rwl1CmdMom
            
            <** @description: RWL2 momentum command **>
            Float Rwl2CmdMom
            
            <** @description: RWL3 momentum command **>
            Float Rwl3CmdMom
            
            <** @description: RWL0 torque command **>
            Float Rwl0CmdTorque
            
            <** @description: RWL1 torque command **>
            Float Rwl1CmdTorque
            
            <** @description: RWL2 torque command **>
            Float Rwl2CmdTorque
            
            <** @description: RWL3 torque command **>
            Float Rwl3CmdTorque
            
            <** @description: MTQ0 dipole moment command **>
            Double Mtq0CmdDip
            
            <** @description: MTQ1 dipole moment command **>
            Double Mtq1CmdDip
            
            <** @description: MTQ2 dipole moment command **>
            Double Mtq2CmdDip
            
            <** @description: MTQ0 torque command **>
            Float Mtq0CmdTorque
            
            <** @description: MTQ1 torque command **>
            Float Mtq1CmdTorque
            
            <** @description: MTQ2 torque command **>
            Float Mtq2CmdTorque
            
            <** @description: MTQ0 on-time command **>
            Int16 Mtq0CmdOnTime
            
            <** @description: MTQ1 on-time command **>
            Int16 Mtq1CmdOnTime
            
            <** @description: MTQ2 on-time command **>
            Int16 Mtq2CmdOnTime
            
            <** @description: Magnetic control timeout **>
            UInt16 MagConTimeout
            
            <** @description: Active control mode **>
            CubeComputerControlProgram8_ConModeSelect ConModeActive
            
            <** @description: RWL0 error flag **>
            Boolean Rwl0ErrorFlag
            
            <** @description: RWL1 error flag **>
            Boolean Rwl1ErrorFlag
            
            <** @description: RWL2 error flag **>
            Boolean Rwl2ErrorFlag
            
            <** @description: RWL3 error flag **>
            Boolean Rwl3ErrorFlag
            
            <** @description: RWL0 active flag **>
            Boolean Rwl0ActiveFlag
            
            <** @description: RWL1 active flag **>
            Boolean Rwl1ActiveFlag
            
            <** @description: RWL2 active flag **>
            Boolean Rwl2ActiveFlag
            
            <** @description: RWL3 active flag **>
            Boolean Rwl3ActiveFlag
            
            
        }
    }
    
    <**
        @description: Raw GNSS sensor telemetry
        @details: id = 76
    **>
    method getTlmGnssRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 RtcTimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 RtcTimeNs
            
            <** @description: Drift per second **>
            Int32 RtcDriftNs
            
            <** @description: Satellite ECEF position vector X component **>
            Float GnssSatPosEcefX
            
            <** @description: Satellite ECEF position vector Y component **>
            Float GnssSatPosEcefY
            
            <** @description: Satellite ECEF position vector Z component **>
            Float GnssSatPosEcefZ
            
            <** @description: Satellite ECEF velocity vector X component **>
            Float GnssSatVelEcefX
            
            <** @description: Satellite ECEF velocity vector Y component **>
            Float GnssSatVelEcefY
            
            <** @description: Satellite ECEF velocity vector Z component **>
            Float GnssSatVelEcefZ
            
            <** @description: GNSS-supplied unix time integer seconds **>
            UInt32 GnssTimeSeconds
            
            <** @description: GNSS-supplied unix time nanoseconds **>
            UInt32 GnssTimeNs
            
            <** @description: GPS week number **>
            UInt16 GpsWeek
            
            <** @description: GNSS Time of Week **>
            UInt32 Tow
            
            <** @description: Offset between GNSS time and UTC **>
            Int8 UtcOffset
            
            <** @description: GNSS data is valid, but may be outdated **>
            Boolean GnssValidData
            
            <** @description: GNSS has lock, data most recent **>
            Boolean GnssLock
            
            <** @description: GNSS PPS Detected by ADCS HW **>
            Boolean GnssPPSDetected
            
            
        }
    }
    
    <**
        @description: Raw external sensor telemetry
        @details: id = 77
    **>
    method getTlmExtSensorRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: ExtSensor0 raw float 0 **>
            Float ExtSensor0Float0
            
            <** @description: ExtSensor0 raw float 1 **>
            Float ExtSensor0Float1
            
            <** @description: ExtSensor0 raw float 2 **>
            Float ExtSensor0Float2
            
            <** @description: ExtSensor0 raw float 3 **>
            Float ExtSensor0Float3
            
            <** @description: ExtSensor0 raw float 4 **>
            Float ExtSensor0Float4
            
            <** @description: ExtSensor0 raw float 5 **>
            Float ExtSensor0Float5
            
            <** @description: ExtSensor1 raw float 0 **>
            Float ExtSensor1Float0
            
            <** @description: ExtSensor1 raw float 1 **>
            Float ExtSensor1Float1
            
            <** @description: ExtSensor1 raw float 2 **>
            Float ExtSensor1Float2
            
            <** @description: ExtSensor1 raw float 3 **>
            Float ExtSensor1Float3
            
            <** @description: ExtSensor1 raw float 4 **>
            Float ExtSensor1Float4
            
            <** @description: ExtSensor1 raw float 5 **>
            Float ExtSensor1Float5
            
            <** @description: ExtSensor0 valid flag **>
            Boolean ExtSensor0IsValid
            
            <** @description: ExtSensor1 valid flag **>
            Boolean ExtSensor1IsValid
            
            
        }
    }
    
    <**
        @description: Raw PST3S star tracker telemetry
        @details: id = 78
    **>
    method getTlmStrPst3sRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: Star tracker TCTLM instance **>
            CubeComputerControlProgram8_StrInstanceSelect StrInstance
            
            <** @description: PST3S Version **>
            CubeComputerControlProgram8_Pst3sVersion Pst3sVersion
            
            <** @description: PST3S Quaternion 1 **>
            Float Quat1
            
            <** @description: PST3S Quaternion 2 **>
            Float Quat2
            
            <** @description: PST3S Quaternion 3 **>
            Float Quat3
            
            <** @description: PST3S Quaternion 4 **>
            Float Quat4
            
            <** @description: PST3S Angular Valocity X **>
            Float AngVelX
            
            <** @description: PST3S Angular Valocity Y **>
            Float AngVelY
            
            <** @description: PST3S Angular Valocity Z **>
            Float AngVelZ
            
            <** @description: PST3S Rate Quality **>
            CubeComputerControlProgram8_Pst3sRateQuality RateQuality
            
            <** @description: PST3S Unix Seconds **>
            UInt32 UnixSeconds
            
            <** @description: PST3S Unix Seconds Decimal **>
            Float UnixSecondsDecimal
            
            <** @description: PST3S Temperature **>
            Int8 Temperature
            
            <** @description: PST3S Image Exposure **>
            UInt8 ImageExposure
            
            <** @description: PST3S Image Threshold **>
            UInt8 ImageThreshold
            
            <** @description: PST3S BackGround Values **>
            UInt8 BackGroundValues
            
            <** @description: PST3S Internal Process Code **>
            UInt8 InternalProcessCode
            
            <** @description: PST3S CMOS Chip ID Self-test Result **>
            CubeComputerControlProgram8_Pst3sSelfTestResult CmosChipIdResult
            
            <** @description: PST3S FPGA MRAM Self-test Result **>
            CubeComputerControlProgram8_Pst3sSelfTestResult FpgaMRamResult
            
            <** @description: PST3S Number of Extracted Stars **>
            UInt8 NumberOfExtractedStars
            
            <** @description: PST3S Operating Mode **>
            CubeComputerControlProgram8_Pst3sOperatingModes OperatingMode
            
            <** @description: PST3S Imaging Gain **>
            UInt8 ImagingGain
            
            <** @description: PST3S Minimum Navigation Stars When Quaternion is Valid **>
            UInt8 MinNavigationStars
            
            <** @description: PST3S Data Valid **>
            CubeComputerControlProgram8_Pst3sDataValid DataValid
            
            <** @description: PST3S External Image State **>
            CubeComputerControlProgram8_Pst3sExtImageState ExtImageState
            
            <** @description: PST3S Number of Identified Stars **>
            UInt8 IdentifiedStars
            
            <** @description: PST3S Device Number **>
            UInt8 DeviceNumber
            
            <** @description: PST3S Software Version **>
            UInt8 SoftwareVersion
            
            <** @description: PST3S EDAC Error Count **>
            UInt8 EdacErrorCount
            
            <** @description: PST3S Image Frame Number **>
            UInt32 ImageFrameNumber
            
            <** @description: PST3S Dynamic Mode **>
            CubeComputerControlProgram8_Pst3sDynamicMode DynamicMode
            
            <** @description: PST3S SAA Mode **>
            CubeComputerControlProgram8_Pst3sSaaWorkingMode SaaMode
            
            <** @description: PST3S SAA Threshold **>
            UInt8 SaaThreshold
            
            <** @description: PST3S Quaternion Filtering State **>
            CubeComputerControlProgram8_Pst3sQuaternionFilteringGetState QuaternionFilteringState
            
            <** @description: PST3S Four Star Capture Threshold **>
            UInt8 FourStarCaptureThreshold
            
            <** @description: PST3S Tracking Threshold **>
            UInt8 TrackingThreshold
            
            <** @description: PST3S EDAC Enabled/Disabled **>
            Boolean EdacSwitch
            
            
        }
    }
    
    <**
        @description: Raw CubeSense Sun telemetry
        @details: id = 79
    **>
    method getTlmFssCubeSenseSunRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: FSS0 alpha Angle **>
            Double Fss0Alpha
            
            <** @description: FSS0 beta Angle **>
            Double Fss0Beta
            
            <** @description: FSS0 capture result **>
            CubeComputerControlProgram8_SunCaptureResult Fss0CaptureResult
            
            <** @description: FSS0 detection result **>
            CubeComputerControlProgram8_SunDetectResult Fss0DetectionResult
            
            <** @description: FSS1 alpha Angle **>
            Double Fss1Alpha
            
            <** @description: FSS1 beta Angle **>
            Double Fss1Beta
            
            <** @description: FSS1 capture result **>
            CubeComputerControlProgram8_SunCaptureResult Fss1CaptureResult
            
            <** @description: FSS1 detection result **>
            CubeComputerControlProgram8_SunDetectResult Fss1DetectionResult
            
            <** @description: FSS2 alpha Angle **>
            Double Fss2Alpha
            
            <** @description: FSS2 beta Angle **>
            Double Fss2Beta
            
            <** @description: FSS2 capture result **>
            CubeComputerControlProgram8_SunCaptureResult Fss2CaptureResult
            
            <** @description: FSS2 detection result **>
            CubeComputerControlProgram8_SunDetectResult Fss2DetectionResult
            
            <** @description: FSS3 alpha Angle **>
            Double Fss3Alpha
            
            <** @description: FSS3 beta Angle **>
            Double Fss3Beta
            
            <** @description: FSS3 capture result **>
            CubeComputerControlProgram8_SunCaptureResult Fss3CaptureResult
            
            <** @description: FSS3 detection result **>
            CubeComputerControlProgram8_SunDetectResult Fss3DetectionResult
            
            
        }
    }
    
    <**
        @description: Raw CubeSense Earth telemetry
        @details: id = 80
    **>
    method getTlmHssCubeSenseEarthRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: HSS0 raw elevation angle **>
            Double Hss0RawElev
            
            <** @description: HSS0 raw rotation angle **>
            Double Hss0RawRot
            
            <** @description: HSS0 capture result **>
            CubeComputerControlProgram8_EarthCaptureResult Hss0CaptureResult
            
            <** @description: HSS0 detection result **>
            CubeComputerControlProgram8_EarthDetectResult Hss0DetectionResult
            
            <** @description: HSS1 raw elevation angle **>
            Double Hss1RawElev
            
            <** @description: HSS1 raw rotation angle **>
            Double Hss1RawRot
            
            <** @description: HSS1 capture result **>
            CubeComputerControlProgram8_EarthCaptureResult Hss1CaptureResult
            
            <** @description: HSS1 detection result **>
            CubeComputerControlProgram8_EarthDetectResult Hss1DetectionResult
            
            
        }
    }
    
    <**
        @description: Raw NSSRWL sensor telemetry
        @details: id = 81
    **>
    method getTlmRwlNssRwlRaw
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Unix time integer seconds **>
            UInt32 TimeSeconds
            
            <** @description: Unix time fraction nanoseconds **>
            UInt32 TimeNs
            
            <** @description: RWL0 target value **>
            Int16 Rwl0TargetValue
            
            <** @description: RWL0 measured speed **>
            Float Rwl0MeasSpeed
            
            <** @description: RWL0 measured current **>
            Int16 Rwl0MeasCurrent
            
            <** @description: RWL0 NSSRWL temperature (not CubeNode) **>
            Int16 Rwl0Temp
            
            <** @description: RWL1 target value **>
            Int16 Rwl1TargetValue
            
            <** @description: RWL1 measured speed **>
            Float Rwl1MeasSpeed
            
            <** @description: RWL1 measured current **>
            Int16 Rwl1MeasCurrent
            
            <** @description: RWL1 NSSRWL temperature (not CubeNode) **>
            Int16 Rwl1Temp
            
            <** @description: RWL2 target value **>
            Int16 Rwl2TargetValue
            
            <** @description: RWL2 measured speed **>
            Float Rwl2MeasSpeed
            
            <** @description: RWL2 measured current **>
            Int16 Rwl2MeasCurrent
            
            <** @description: RWL2 NSSRWL temperature (not CubeNode) **>
            Int16 Rwl2Temp
            
            <** @description: RWL3 target value **>
            Int16 Rwl3TargetValue
            
            <** @description: RWL3 measured speed **>
            Float Rwl3MeasSpeed
            
            <** @description: RWL3 measured current **>
            Int16 Rwl3MeasCurrent
            
            <** @description: RWL3 NSSRWL temperature (not CubeNode) **>
            Int16 Rwl3Temp
            
            <** @description: RWL0 valid flag **>
            Boolean Rwl0IsValid
            
            <** @description: RWL0 Set if in reaction wheel mode **>
            Boolean Rwl0WheelMode
            
            <** @description: RWL0 Set if in current-control mode **>
            Boolean Rwl0CurentCtrlMode
            
            <** @description: RWL0 Set if in speed-control mode **>
            Boolean Rwl0SpeedCtrlMode
            
            <** @description: RWL0 Set if in torque-control mode **>
            Boolean Rwl0TorqueCtrlMode
            
            <** @description: RWL0 Set if CRC error on protected area **>
            Boolean Rwl0CrcError
            
            <** @description: RWL0 wrong low-level command **>
            Boolean Rwl0WrongLlCmd
            
            <** @description: RWL0 wrong high-level command **>
            Boolean Rwl0WrongHlCmd
            
            <** @description: RWL0 Timeout on SCI1 main interface **>
            Boolean Rwl0ToutSci1Main
            
            <** @description: RWL1 valid flag **>
            Boolean Rwl1IsValid
            
            <** @description: RWL1 Set if in reaction wheel mode **>
            Boolean Rwl1WheelMode
            
            <** @description: RWL1 Set if in current-control mode **>
            Boolean Rwl1CurentCtrlMode
            
            <** @description: RWL1 Set if in speed-control mode **>
            Boolean Rwl1SpeedCtrlMode
            
            <** @description: RWL1 Set if in torque-control mode **>
            Boolean Rwl1TorqueCtrlMode
            
            <** @description: RWL1 Set if CRC error on protected area **>
            Boolean Rwl1CrcError
            
            <** @description: RWL1 wrong low-level command **>
            Boolean Rwl1WrongLlCmd
            
            <** @description: RWL1 wrong high-level command **>
            Boolean Rwl1WrongHlCmd
            
            <** @description: RWL1 Timeout on SCI1 main interface **>
            Boolean Rwl1ToutSci1Main
            
            <** @description: RWL2 valid flag **>
            Boolean Rwl2IsValid
            
            <** @description: RWL2 Set if in reaction wheel mode **>
            Boolean Rwl2WheelMode
            
            <** @description: RWL2 Set if in current-control mode **>
            Boolean Rwl2CurentCtrlMode
            
            <** @description: RWL2 Set if in speed-control mode **>
            Boolean Rwl2SpeedCtrlMode
            
            <** @description: RWL2 Set if in torque-control mode **>
            Boolean Rwl2TorqueCtrlMode
            
            <** @description: RWL2 Set if CRC error on protected area **>
            Boolean Rwl2CrcError
            
            <** @description: RWL2 wrong low-level command **>
            Boolean Rwl2WrongLlCmd
            
            <** @description: RWL2 wrong high-level command **>
            Boolean Rwl2WrongHlCmd
            
            <** @description: RWL2 Timeout on SCI1 main interface **>
            Boolean Rwl2ToutSci1Main
            
            <** @description: RWL3 valid flag **>
            Boolean Rwl3IsValid
            
            <** @description: RWL3 Set if in reaction wheel mode **>
            Boolean Rwl3WheelMode
            
            <** @description: RWL3 Set if in current-control mode **>
            Boolean Rwl3CurentCtrlMode
            
            <** @description: RWL3 Set if in speed-control mode **>
            Boolean Rwl3SpeedCtrlMode
            
            <** @description: RWL3 Set if in torque-control mode **>
            Boolean Rwl3TorqueCtrlMode
            
            <** @description: RWL3 Set if CRC error on protected area **>
            Boolean Rwl3CrcError
            
            <** @description: RWL3 wrong low-level command **>
            Boolean Rwl3WrongLlCmd
            
            <** @description: RWL3 wrong high-level command **>
            Boolean Rwl3WrongHlCmd
            
            <** @description: RWL3 Timeout on SCI1 main interface **>
            Boolean Rwl3ToutSci1Main
            
            
        }
    }
    
    <**
        @description: ACP execution telemetry
        @details: id = 82
    **>
    method getTlmAcpExecution
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Time since the start of the current loop iteration **>
            UInt16 TimeSinceLoopStart
            
            <** @description: Indicates which part of the loop is currently executing **>
            CubeComputerControlProgram8_AcpExecutionPoint CurrentExecutionPoint
            
            <** @description: Execution time of node sync **>
            UInt16 ExecTimeNodeSync
            
            <** @description: Execution time of sensor comms **>
            UInt16 ExecTimeSensorComms
            
            <** @description: Execution time of sensor calibration **>
            UInt16 ExecTimeSensorCal
            
            <** @description: Execution time of ADCS estimators **>
            UInt16 ExecTimeEstimators
            
            <** @description: Execution time of ADCS controllers **>
            UInt16 ExecTimeControllers
            
            <** @description: Execution time of wheel comms **>
            UInt16 ExecTimeWheelComms
            
            <** @description: Execution time of ADCS models **>
            UInt16 ExecTimeModels
            
            <** @description: Execution time of ADCS loop sync **>
            UInt16 ExecTimeLoopSync
            
            <** @description: Execution time of health service **>
            UInt16 ExecTimeHealth
            
            <** @description: Execution time of telemetry logging **>
            UInt16 ExecTimeTlmLog
            
            <** @description: Time offset between the ADCS loop and RTC control pulse **>
            Int16 LoopRtcOffset
            
            <** @description: ADCS loop has started flag **>
            Boolean LoopHasStarted
            
            <** @description: HIL is currently synchronised **>
            Boolean HilSyncOk
            
            
        }
    }
    
    <**
        @description: Current measurements
        @details: id = 83
    **>
    method getTlmTorquerCurrents
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Total magnetorquer 1 positive current peak (mA) **>
            Float Mtq1TotalCurrentPeakPos
            
            <** @description: Total magnetorquer 1 positive current average (mA) **>
            Float Mtq1TotalCurrentAveragePos
            
            <** @description: Total magnetorquer 1 negative current peak (mA) **>
            Float Mtq1TotalCurrentPeakNeg
            
            <** @description: Total magnetorquer 1 negative current average (mA) **>
            Float Mtq1TotalCurrentAverageNeg
            
            <** @description: Total magnetorquer 2 positive current peak (mA) **>
            Float Mtq2TotalCurrentPeakPos
            
            <** @description: Total magnetorquer 2 positive current average (mA) **>
            Float Mtq2TotalCurrentAveragePos
            
            <** @description: Total magnetorquer 2 negative current peak (mA) **>
            Float Mtq2TotalCurrentPeakNeg
            
            <** @description: Total magnetorquer 2 negative current average (mA) **>
            Float Mtq2TotalCurrentAverageNeg
            
            <** @description: Total magnetorquer 3 positive current peak (mA) **>
            Float Mtq3TotalCurrentPeakPos
            
            <** @description: Total magnetorquer 3 positive current average (mA) **>
            Float Mtq3TotalCurrentAveragePos
            
            <** @description: Total magnetorquer 3 negative current peak (mA) **>
            Float Mtq3TotalCurrentPeakNeg
            
            <** @description: Total magnetorquer 3 negative current average (mA) **>
            Float Mtq3TotalCurrentAverageNeg
            
            <** @description: The polarity of magnetorquer 1 on the last iteration **>
            CubeComputerControlProgram8_MtqPolarity Mtq1Polarity
            
            <** @description: The polarity of magnetorquer 2 on the last iteration **>
            CubeComputerControlProgram8_MtqPolarity Mtq2Polarity
            
            <** @description: The polarity of magnetorquer 3 on the last iteration **>
            CubeComputerControlProgram8_MtqPolarity Mtq3Polarity
            
            
        }
    }
    
    <**
        @description: Health telemetry for ADCS CubeComputer
        @details: id = 84
    **>
    method getTlmCubeComputerHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: MCU Temperature **>
            Double McuTemp
            
            <** @description: MCU current **>
            Double McuCurrent
            
            <** @description: MCU internal reference voltage **>
            UInt16 McuVoltage
            
            <** @description: MCU supply voltage **>
            UInt16 SupplyVoltage
            
            <** @description: 5V supply voltage **>
            UInt16 v5Sense
            
            <** @description: SRAM1 current **>
            Double Sram1Current
            
            <** @description: SRAM2 current **>
            Double Sram2Current
            
            <** @description: ADC current **>
            Double AdcCurrent
            
            <** @description: Flash memory current **>
            Double FlashCurrent
            
            <** @description: RS485 driver current **>
            Double Rs485Current
            
            <** @description: CAN driver current **>
            Double CanCurrent
            
            <** @description: Gyro current **>
            Double GyroCurrent
            
            <** @description: Redundant gyro current **>
            Double RedGyroCurrent
            
            <** @description: Set if the primary gyro supply voltage has exceeded the maximum limit **>
            Boolean GyroOverVoltage
            
            <** @description: Set if the primary gyro supply voltage has exceeded the minimum limit **>
            Boolean GyroUnderVoltage
            
            <** @description: Set if the redundant gyro supply voltage has exceeded the maximum limit **>
            Boolean RedGyroOverVoltage
            
            <** @description: Set if the redundant gyro supply voltage has exceeded the minimum limit **>
            Boolean RedGyroUnderVoltage
            
            <** @description: Bitmask representing virtual watchdog region warning counters.  
            @details: size = 5 **>
            UInt8[] WatchdogCount
            
            
        }
    }
    
    <**
        @description: Health telemetry for CubeSense Sun
        @details: id = 85
    **>
    method getTlmFssCubeSenseSunHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: FSS0 MCU Temperature **>
            Double Fss0McuTemp
            
            <** @description: FSS0 MCU current **>
            Double Fss0McuCurrent
            
            <** @description: FSS0 MCU supply voltage **>
            UInt16 Fss0McuVoltage
            
            <** @description: FSS0 Camera current **>
            Double Fss0CurrentCam
            
            <** @description: FSS0 SRAM current **>
            Double Fss0CurrentSram
            
            <** @description: FSS0 CAM overcurrent detected **>
            Boolean Fss0OvercurrentCam
            
            <** @description: FSS0 SRAM overcurrent detected **>
            Boolean Fss0OvercurrentSram
            
            <** @description: FSS1 MCU Temperature **>
            Double Fss1McuTemp
            
            <** @description: FSS1 MCU current **>
            Double Fss1McuCurrent
            
            <** @description: FSS1 MCU supply voltage **>
            UInt16 Fss1McuVoltage
            
            <** @description: FSS1 Camera current **>
            Double Fss1CurrentCam
            
            <** @description: FSS1 SRAM current **>
            Double Fss1CurrentSram
            
            <** @description: FSS1 CAM overcurrent detected **>
            Boolean Fss1OvercurrentCam
            
            <** @description: FSS1 SRAM overcurrent detected **>
            Boolean Fss1OvercurrentSram
            
            <** @description: FSS2 MCU Temperature **>
            Double Fss2McuTemp
            
            <** @description: FSS2 MCU current **>
            Double Fss2McuCurrent
            
            <** @description: FSS2 MCU supply voltage **>
            UInt16 Fss2McuVoltage
            
            <** @description: FSS2 Camera current **>
            Double Fss2CurrentCam
            
            <** @description: FSS2 SRAM current **>
            Double Fss2CurrentSram
            
            <** @description: FSS2 CAM overcurrent detected **>
            Boolean Fss2OvercurrentCam
            
            <** @description: FSS2 SRAM overcurrent detected **>
            Boolean Fss2OvercurrentSram
            
            <** @description: FSS3 MCU Temperature **>
            Double Fss3McuTemp
            
            <** @description: FSS3 MCU current **>
            Double Fss3McuCurrent
            
            <** @description: FSS3 MCU supply voltage **>
            UInt16 Fss3McuVoltage
            
            <** @description: FSS3 Camera current **>
            Double Fss3CurrentCam
            
            <** @description: FSS3 SRAM current **>
            Double Fss3CurrentSram
            
            <** @description: FSS3 CAM overcurrent detected **>
            Boolean Fss3OvercurrentCam
            
            <** @description: FSS3 SRAM overcurrent detected **>
            Boolean Fss3OvercurrentSram
            
            
        }
    }
    
    <**
        @description: Health telemetry for CubeSense Earth
        @details: id = 86
    **>
    method getTlmHssCubeSenseEarthHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: HSS0 MCU Temperature **>
            Double Hss0McuTemp
            
            <** @description: HSS0 MCU current **>
            Double Hss0McuCurrent
            
            <** @description: HSS0 MCU supply voltage **>
            UInt16 Hss0McuVoltage
            
            <** @description: HSS0 Detector Temperature **>
            Double Hss0DetectorTemp
            
            <** @description: HSS0 Detector Current **>
            Double Hss0DetectorCurrent
            
            <** @description: HSS1 MCU Temperature **>
            Double Hss1McuTemp
            
            <** @description: HSS1 MCU current **>
            Double Hss1McuCurrent
            
            <** @description: HSS1 MCU supply voltage **>
            UInt16 Hss1McuVoltage
            
            <** @description: HSS1 Detector Temperature **>
            Double Hss1DetectorTemp
            
            <** @description: HSS1 Detector Current **>
            Double Hss1DetectorCurrent
            
            
        }
    }
    
    <**
        @description: Health telemetry for CubeMag magnetometer
        @details: id = 87
    **>
    method getTlmCubeMagHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: MAG0 MCU Temperature **>
            Double Mag0McuTemp
            
            <** @description: MAG0 MCU current **>
            Double Mag0McuCurrent
            
            <** @description: MAG0 MCU supply voltage **>
            UInt16 Mag0McuVoltage
            
            <** @description: MAG0 Detector Temperature **>
            Double Mag0PrimaryTemp
            
            <** @description: MAG0 Detector Current **>
            Double Mag0RedTemp
            
            <** @description: MAG0 Deploy Burn Current **>
            UInt32 Mag0BurnCurrent
            
            <** @description: MAG0 Deploy Pin State **>
            Boolean Mag0DeployPinState
            
            <** @description: MAG0 Burn Pin State **>
            Boolean Mag0BurnPinState
            
            <** @description: MAG0 Burn Under Current Flag **>
            Boolean Mag0BurnUnderCurrent
            
            <** @description: MAG0 Burn Over Current Flag **>
            Boolean Mag0BurnOverCurrent
            
            <** @description: MAG0 Deployment timeout Flag **>
            Boolean Mag0DeployTimeout
            
            <** @description: MAG1 MCU Temperature **>
            Double Mag1McuTemp
            
            <** @description: MAG1 MCU current **>
            Double Mag1McuCurrent
            
            <** @description: MAG1 MCU supply voltage **>
            UInt16 Mag1McuVoltage
            
            <** @description: MAG1 Detector Temperature **>
            Double Mag1PrimaryTemp
            
            <** @description: MAG1 Detector Current **>
            Double Mag1RedTemp
            
            <** @description: MAG1 Deploy Burn Current **>
            UInt32 Mag1BurnCurrent
            
            <** @description: MAG1 Deploy Pin State **>
            Boolean Mag1DeployPinState
            
            <** @description: MAG1 Burn Pin State **>
            Boolean Mag1BurnPinState
            
            <** @description: MAG1 Burn Under Current Flag **>
            Boolean Mag1BurnUnderCurrent
            
            <** @description: MAG1 Burn Over Current Flag **>
            Boolean Mag1BurnOverCurrent
            
            <** @description: MAG1 Deployment timeout Flag **>
            Boolean Mag1DeployTimeout
            
            
        }
    }
    
    <**
        @description: Health telemetry for reaction wheels
        @details: id = 88
    **>
    method getTlmRwlHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RWL0 MCU Temperature **>
            Double Rwl0McuTemp
            
            <** @description: RWL0 MCU current **>
            Double Rwl0McuCurrent
            
            <** @description: RWL0 Battery supply voltage **>
            UInt16 Rwl0BatVoltage
            
            <** @description: RWL0 Battery current **>
            Double Rwl0BatCurrent
            
            <** @description: RWL1 MCU Temperature **>
            Double Rwl1McuTemp
            
            <** @description: RWL1 MCU current **>
            Double Rwl1McuCurrent
            
            <** @description: RWL1 Battery supply voltage **>
            UInt16 Rwl1BatVoltage
            
            <** @description: RWL1 Battery current **>
            Double Rwl1BatCurrent
            
            <** @description: RWL2 MCU Temperature **>
            Double Rwl2McuTemp
            
            <** @description: RWL2 MCU current **>
            Double Rwl2McuCurrent
            
            <** @description: RWL2 Battery supply voltage **>
            UInt16 Rwl2BatVoltage
            
            <** @description: RWL2 Battery current **>
            Double Rwl2BatCurrent
            
            <** @description: RWL3 MCU Temperature **>
            Double Rwl3McuTemp
            
            <** @description: RWL3 MCU current **>
            Double Rwl3McuCurrent
            
            <** @description: RWL3 Battery supply voltage **>
            UInt16 Rwl3BatVoltage
            
            <** @description: RWL3 Battery current **>
            Double Rwl3BatCurrent
            
            
        }
    }
    
    <**
        @description: Health telemetry for CubeNode PST3S
        @details: id = 89
    **>
    method getTlmStrPst3sHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: STR0 MCU Temperature **>
            Double Str0McuTemp
            
            <** @description: STR0 MCU current **>
            Double Str0McuCurrent
            
            <** @description: STR0 MCU supply voltage **>
            UInt16 Str0McuVoltage
            
            <** @description: STR0 PST3S current **>
            Double Str0Pst3sCurrent
            
            <** @description: STR0 PST3S CAM overcurrent **>
            Boolean Str0Pst3sOvercurrent
            
            <** @description: STR1 MCU Temperature **>
            Double Str1McuTemp
            
            <** @description: STR1 MCU current **>
            Double Str1McuCurrent
            
            <** @description: STR1 MCU supply voltage **>
            UInt16 Str1McuVoltage
            
            <** @description: STR1 PST3S current **>
            Double Str1Pst3sCurrent
            
            <** @description: STR1 PST3S CAM overcurrent **>
            Boolean Str1Pst3sOvercurrent
            
            
        }
    }
    
    <**
        @description: Health telemetry for CubeNode NSSRWL
        @details: id = 90
    **>
    method getTlmNssRwlHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RWL0 MCU Temperature **>
            Double Rwl0McuTemp
            
            <** @description: RWL0 MCU current **>
            Double Rwl0McuCurrent
            
            <** @description: RWL0 MCU supply voltage **>
            UInt16 Rwl0McuVoltage
            
            <** @description: RWL0 5V current **>
            Double Rwl0Current5v
            
            <** @description: Rwl0 5V overcurrent **>
            Boolean Rwl0Overcurrent5v
            
            <** @description: RWL1 MCU Temperature **>
            Double Rwl1McuTemp
            
            <** @description: RWL1 MCU current **>
            Double Rwl1McuCurrent
            
            <** @description: RWL1 MCU supply voltage **>
            UInt16 Rwl1McuVoltage
            
            <** @description: RWL1 5V current **>
            Double Rwl1Current5v
            
            <** @description: Rwl1 5V overcurrent **>
            Boolean Rwl1Overcurrent5v
            
            <** @description: RWL2 MCU Temperature **>
            Double Rwl2McuTemp
            
            <** @description: RWL2 MCU current **>
            Double Rwl2McuCurrent
            
            <** @description: RWL2 MCU supply voltage **>
            UInt16 Rwl2McuVoltage
            
            <** @description: RWL2 5V current **>
            Double Rwl2Current5v
            
            <** @description: Rwl2 5V overcurrent **>
            Boolean Rwl2Overcurrent5v
            
            <** @description: RWL3 MCU Temperature **>
            Double Rwl3McuTemp
            
            <** @description: RWL3 MCU current **>
            Double Rwl3McuCurrent
            
            <** @description: RWL3 MCU supply voltage **>
            UInt16 Rwl3McuVoltage
            
            <** @description: RWL3 5V current **>
            Double Rwl3Current5v
            
            <** @description: Rwl3 5V overcurrent **>
            Boolean Rwl3Overcurrent5v
            
            
        }
    }
    
    <**
        @description: Health telemetry for CubeStar star camera
        @details: id = 91
    **>
    method getTlmStrHealth
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: STR0 MCU Temperature **>
            Double Str0McuTemp
            
            <** @description: STR0 MCU current **>
            Double Str0McuCurrent
            
            <** @description: STR0 MCU supply voltage **>
            UInt16 Str0McuVoltage
            
            <** @description: STR0 current **>
            Double Str0Current
            
            <** @description: STR0 CAM overcurrent **>
            Boolean Str0Overcurrent
            
            <** @description: STR0 Error Code **>
            UInt32 Str0ErrorCode
            
            <** @description: STR1 MCU Temperature **>
            Double Str1McuTemp
            
            <** @description: STR1 MCU current **>
            Double Str1McuCurrent
            
            <** @description: STR1 MCU supply voltage **>
            UInt16 Str1McuVoltage
            
            <** @description: STR1 current **>
            Double Str1Current
            
            <** @description: STR1 CAM overcurrent **>
            Boolean Str1Overcurrent
            
            <** @description: STR1 Error Code **>
            UInt32 Str1ErrorCode
            
            
        }
    }
    
}