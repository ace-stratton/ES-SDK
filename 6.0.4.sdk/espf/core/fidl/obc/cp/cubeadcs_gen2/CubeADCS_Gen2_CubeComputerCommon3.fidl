// WARNING!!! THIS IS A GENERATED FILE! DO NOT MODIFY CONTENTS MANUALLY!!!

package endurosat.macif


<** @description: Interface for Cube ADCS Gen2 - CubeComputerCommon3
    @details: id = 304
**>

interface CubeADCS_Gen2_CubeComputerCommon3
{
    version {major 1 minor 0}
    
    <** @description: This enumeration holds the IDs of CubeADCS Gen2 nodes for which this interface is applicable **>
    enumeration CmdTargetNode
    {
        NodeInvalid = 0
        NodeComputer = 1
        
    }
    
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_PowerSelect
    {
        
        <** @description: Off **>
        PowerOff = 0
        
        <** @description: On **>
        PowerOn = 1
        
        <** @description: NoChange **>
        PowerNoChange = 2
        
        <** @description: Auto **>
        PowerAuto = 3
        
        <** @description: On - Passthrough Only (No ADCS operations) **>
        PowerOnPass = 4
        
        <** @description: Power off for upgrade (internal use only) **>
        PowerOffUpgrade = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_ImageTransferOpCode
    {
        
        <** @description: Capture an image from the target node and store it on CubeComputer **>
        CaptureStore = 0
        
        <** @description: Capture an image from the target node and immediately download it without storing it on CubeComputer **>
        CaptureDownload = 1
        
        <** @description: Download an image stored on CubeComputer **>
        Download = 2
        
        <** @description: Reset the file info request to start from the first image file **>
        InfoReset = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_ImageTransferState
    {
        
        <** @description: Idle **>
        StateIdle = 0
        
        <** @description: Node image is being sttored internally on CubeComputer **>
        StateBusyStore = 1
        
        <** @description: Node image is being downloaded from CubeComputer. This state applies to both direct downloads and downloads from storage **>
        StateBusyDownload = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_EventReadQueueState
    {
        
        <** @description: Idle **>
        EvtReadQIdle = 0
        
        <** @description: Event log download in progress **>
        EvtReadQDownload = 1
        
        <** @description: Event log erase is progress **>
        EvtReadQErase = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_TlmLogReadQueueState
    {
        
        <** @description: Idle **>
        TlmReadQIdle = 0
        
        <** @description: Telemetry log download in progress **>
        TlmReadQDownload = 1
        
        <** @description: Telemetry log erase is progress **>
        TlmReadQErase = 2
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_TlmLogReturnIntervalValues
    {
        
        <** @description: Apply 200ms return interval **>
        interval200ms = 0
        
        <** @description: Apply 1s return interval **>
        interval1s = 1
        
        <** @description: Apply 2s return interval **>
        interval2s = 2
        
        <** @description: Apply 3s return interval **>
        interval3s = 3
        
        <** @description: Apply 4s return interval **>
        interval4s = 4
        
        <** @description: Apply 5s return interval **>
        interval5s = 5
        
        <** @description: Apply 10s return interval **>
        interval10s = 6
        
        <** @description: Apply 20s return interval **>
        interval20s = 7
        
        <** @description: Apply 50s return interval **>
        interval50s = 8
        
        <** @description: Apply 100s return interval **>
        interval100s = 9
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_EraseMagicNumbers
    {
        
        <** @description: Erase the Telemetry log **>
        EraseTlmLog = 57
        
        <** @description: Erase the Event log **>
        EraseEventLog = 117
        
        <** @description: Erase the Image log **>
        EraseImageLog = 195
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_EventClass
    {
        
        <** @description: Event class info **>
        EventClassInfo = 0
        
        <** @description: Event class warning minor **>
        EventClassWarningMinor = 1
        
        <** @description: Event class warning major **>
        EventClassWarningMajor = 2
        
        <** @description: Event class critical **>
        EventClassCritical = 3
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CubeComputerCommon3_LogReadFilterType
    {
        
        <** @description: Include all entries **>
        FilterNone = 0
        
        <** @description: Filter/read entries logged between two timestamps **>
        FilterTimeSpan = 1
        
        <** @description: Filter/read the next x entries logged following the sepecifed start timestamp **>
        FilterTimeNextX = 2
        
        <** @description: Filter/read the first x entries logged **>
        FilterFirstX = 3
        
        <** @description: Filter/read the last x entries logged **>
        FilterLastX = 4
        
        <** @description: Filter/read the next x entries logged following the specified write counter **>
        FilterCounterNextX = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_TcTlmError
    {
        
        <** @description: No Error **>
        Ok = 0
        
        <** @description: Invalid TcTlm ID **>
        InvalidId = 1
        
        <** @description: Invalid Length **>
        InvalidLength = 2
        
        <** @description: Invalid Parameter **>
        InvalidParam = 3
        
        <** @description: CRC Check Failed **>
        Crc = 4
        
        <** @description: TCTLM not implemented **>
        NotImplemented = 5
        
        <** @description: Busy **>
        TcTlmBusy = 6
        
        <** @description: Error in sequence of commands **>
        Sequence = 7
        
        <** @description: Internal error **>
        Internal = 8
        
        <** @description: Passthrough node timeout error **>
        PassTimeout = 9
        
        <** @description: Passthrough target is invalid (passthrough is disabled) **>
        PassTarget = 10
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_NodeType
    {
        
        <** @description: Invalid Node Type **>
        NodeTypeInvalid = 0
        
        <** @description: CubeComputer Type - version independant **>
        NodeTypeCubeComputer = 1
        
        <** @description: CubeSense Type - version independant **>
        NodeTypeCubeSense = 2
        
        <** @description: CubeWheel Type - version independant **>
        NodeTypeCubeWheel = 3
        
        <** @description: CubeIR Type - version independant **>
        NodeTypeCubeIr = 4
        
        <** @description: CubeMag Deploy Type - version independant **>
        NodeTypeCubeMagDeploy = 5
        
        <** @description: CubeMag Compact Type - version independant **>
        NodeTypeCubeMagCompact = 6
        
        <** @description: CubeStar Type - version independant **>
        NodeTypeCubeStar = 7
        
        <** @description: CubeAuriga Type - version independant **>
        NodeTypeAuriga = 8
        
        <** @description: CubeNode General Type - version independant **>
        NodeTypeCubeNode = 9
        
        <** @description: CubeNode SLT Type - version independant **>
        NodeTypeCubeNodeSlt = 10
        
        <** @description: CubeNode PST3S Type - version independant **>
        NodeTypeCubeNodePst3s = 11
        
        <** @description: CubeNode NSSRWL Type - version independant **>
        NodeTypeCubeNodeNssrwl = 12
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_ProgramType
    {
        
        <** @description: Invalid Program Type **>
        ProgramTypeInvalid = 0
        
        <** @description: control-program primary product application **>
        ProgramTypeControl = 1
        
        <** @description: cube-computer flash-bootloader Bootloader application **>
        ProgramTypeBootloader = 4
        
        <** @description: health-check Health Check application **>
        ProgramTypeHealthCheck = 5
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_AbstractNode
    {
        
        <** @description: Invalid Abstract Node **>
        NodeInvalid = 0
        
        <** @description: CubeComputer **>
        NodeComputer = 1
        
        <** @description: Star tracker 0 **>
        NodeStr0 = 2
        
        <** @description: Star tracker 1 **>
        NodeStr1 = 3
        
        <** @description: Fine sun sensor 0 **>
        NodeFss0 = 4
        
        <** @description: Fine sun sensor 1 **>
        NodeFss1 = 5
        
        <** @description: Fine sun sensor 2 **>
        NodeFss2 = 6
        
        <** @description: Fine sun sensor 3 **>
        NodeFss3 = 7
        
        <** @description: Horizon sun sensor 0 **>
        NodeHss0 = 8
        
        <** @description: Horizon sun sensor 1 **>
        NodeHss1 = 9
        
        <** @description: Magnetometer sensor 0 **>
        NodeMag0 = 10
        
        <** @description: Magnetometer sensor 1 **>
        NodeMag1 = 11
        
        <** @description: External sensor 0 **>
        NodeExt0 = 12
        
        <** @description: External sensor 1 **>
        NodeExt1 = 13
        
        <** @description: Reaction wheel 0 **>
        NodeRwl0 = 14
        
        <** @description: Reaction wheel 1 **>
        NodeRwl1 = 15
        
        <** @description: Reaction wheel 2 **>
        NodeRwl2 = 16
        
        <** @description: Reaction wheel 3 **>
        NodeRwl3 = 17
        
        <** @description: Reaction wheel 4 **>
        NodeRwl4 = 18
        
    }
    
    <** @description: No enumeration description provided by CubeSpace
    **>
    enumeration CommonFrameworkEnums_SerialSource
    {
        
        <** @description: Serial number sourced from OTP **>
        SourceOtp = 0
        
        <** @description: Serial number sourced from Config **>
        SourceConfig = 1
        
    }
    
    
    
    
    <**
        @description: TCTLM Passthrough settings
        @details: id = 0
    **>
    method setPassThrough
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Target Node **>
            CommonFrameworkEnums_AbstractNode TargetNode
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Power state
        @details: id = 1
    **>
    method setPowerState
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: RWL0 power state **>
            CubeComputerCommon3_PowerSelect Rwl0Power
            
            <** @description: RWL1 power state **>
            CubeComputerCommon3_PowerSelect Rwl1Power
            
            <** @description: RWL2 power state **>
            CubeComputerCommon3_PowerSelect Rwl2Power
            
            <** @description: RWL3 power state **>
            CubeComputerCommon3_PowerSelect Rwl3Power
            
            <** @description: MAG0 power state **>
            CubeComputerCommon3_PowerSelect Mag0Power
            
            <** @description: MAG1 power state **>
            CubeComputerCommon3_PowerSelect Mag1Power
            
            <** @description: GYR0 power state **>
            CubeComputerCommon3_PowerSelect Gyro0Power
            
            <** @description: GYR1 power state **>
            CubeComputerCommon3_PowerSelect Gyro1Power
            
            <** @description: FSS0 power state **>
            CubeComputerCommon3_PowerSelect Fss0Power
            
            <** @description: FSS1 power state **>
            CubeComputerCommon3_PowerSelect Fss1Power
            
            <** @description: FSS2 power state **>
            CubeComputerCommon3_PowerSelect Fss2Power
            
            <** @description: FSS3 power state **>
            CubeComputerCommon3_PowerSelect Fss3Power
            
            <** @description: HSS0 power state **>
            CubeComputerCommon3_PowerSelect Hss0Power
            
            <** @description: HSS1 power state **>
            CubeComputerCommon3_PowerSelect Hss1Power
            
            <** @description: STR0 power state **>
            CubeComputerCommon3_PowerSelect Str0Power
            
            <** @description: STR1 power state **>
            CubeComputerCommon3_PowerSelect Str1Power
            
            <** @description: ExtSensor0 power state **>
            CubeComputerCommon3_PowerSelect ExtSensor0Power
            
            <** @description: ExtSensor1 power state **>
            CubeComputerCommon3_PowerSelect ExtSensor1Power
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set request image log transfer setup
        @details: id = 2
    **>
    method setImageTransferSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Operation code. **>
            CubeComputerCommon3_ImageTransferOpCode OpCode
            
            <** @description: Target node type for image storage and download direct operation codes. **>
            CommonFrameworkEnums_AbstractNode NodeType
            
            <** @description: Target file for download and info operation codes. **>
            UInt32 FileHandle
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Resets image file info index
        @details: id = 3
    **>
    method setImageFileInfoReset
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: This telemetry describes the nodes that have been discovered i.e. connected to CubeConnect
        @details: id = 4
    **>
    method setPortMap
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Sensor 1 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor1NodeType
            
            <** @description: Sensor 1 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor1AbstractType
            
            <** @description: Sensor 1 port - Serial Number Integer Respresentation **>
            UInt32 Sensor1SerialInt
            
            <** @description: Sensor 1 port - CAN Address **>
            UInt32 Sensor1Address
            
            <** @description: Sensor 2 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor2NodeType
            
            <** @description: Sensor 2 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor2AbstractType
            
            <** @description: Sensor 2 port - Serial Number Integer Respresentation **>
            UInt32 Sensor2SerialInt
            
            <** @description: Sensor 2 port - CAN Address **>
            UInt32 Sensor2Address
            
            <** @description: Sensor 3 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor3NodeType
            
            <** @description: Sensor 3 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor3AbstractType
            
            <** @description: Sensor 3 port - Serial Number Integer Respresentation **>
            UInt32 Sensor3SerialInt
            
            <** @description: Sensor 3 port - CAN Address **>
            UInt32 Sensor3Address
            
            <** @description: Sensor 4 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor4NodeType
            
            <** @description: Sensor 4 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor4AbstractType
            
            <** @description: Sensor 4 port - Serial Number Integer Respresentation **>
            UInt32 Sensor4SerialInt
            
            <** @description: Sensor 4 port - CAN Address **>
            UInt32 Sensor4Address
            
            <** @description: Sensor 5 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor5NodeType
            
            <** @description: Sensor 5 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor5AbstractType
            
            <** @description: Sensor 5 port - Serial Number Integer Respresentation **>
            UInt32 Sensor5SerialInt
            
            <** @description: Sensor 5 port - CAN Address **>
            UInt32 Sensor5Address
            
            <** @description: Sensor 6 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor6NodeType
            
            <** @description: Sensor 6 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor6AbstractType
            
            <** @description: Sensor 6 port - Serial Number Integer Respresentation **>
            UInt32 Sensor6SerialInt
            
            <** @description: Sensor 6 port - CAN Address **>
            UInt32 Sensor6Address
            
            <** @description: Sensor 7 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor7NodeType
            
            <** @description: Sensor 7 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor7AbstractType
            
            <** @description: Sensor 7 port - Serial Number Integer Respresentation **>
            UInt32 Sensor7SerialInt
            
            <** @description: Sensor 7 port - CAN Address **>
            UInt32 Sensor7Address
            
            <** @description: Sensor 8 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor8NodeType
            
            <** @description: Sensor 8 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor8AbstractType
            
            <** @description: Sensor 8 port - Serial Number Integer Respresentation **>
            UInt32 Sensor8SerialInt
            
            <** @description: Sensor 8 port - CAN Address **>
            UInt32 Sensor8Address
            
            <** @description: Wheel 1 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel1NodeType
            
            <** @description: Wheel 1 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel1AbstractType
            
            <** @description: Wheel 1 port - Serial Number Integer Respresentation **>
            UInt32 Wheel1SerialInt
            
            <** @description: Wheel 1 port - CAN Address **>
            UInt32 Wheel1Address
            
            <** @description: Wheel 2 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel2NodeType
            
            <** @description: Wheel 2 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel2AbstractType
            
            <** @description: Wheel 2 port - Serial Number Integer Respresentation **>
            UInt32 Wheel2SerialInt
            
            <** @description: Wheel 2 port - CAN Address **>
            UInt32 Wheel2Address
            
            <** @description: Wheel 3 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel3NodeType
            
            <** @description: Wheel 3 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel3AbstractType
            
            <** @description: Wheel 3 port - Serial Number Integer Respresentation **>
            UInt32 Wheel3SerialInt
            
            <** @description: Wheel 3 port - CAN Address **>
            UInt32 Wheel3Address
            
            <** @description: Wheel 4 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel4NodeType
            
            <** @description: Wheel 4 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel4AbstractType
            
            <** @description: Wheel 4 port - Serial Number Integer Respresentation **>
            UInt32 Wheel4SerialInt
            
            <** @description: Wheel 4 port - CAN Address **>
            UInt32 Wheel4Address
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Format all logs
        @details: id = 5
    **>
    method setEraseLogData
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Magic number to avoid erroneous formats **>
            CubeComputerCommon3_EraseMagicNumbers magicNumber
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Initiate event log transfer by specifying time range and data filter
        @details: id = 6
    **>
    method setEventLogFilterTransferSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Filter type to use when reading event logs **>
            CubeComputerCommon3_LogReadFilterType filterType
            
            <** @description: If using time span/next x filter - indicate the unix start time in seconds. All entries with a timestamp after this time will be included in the transfer. **>
            UInt32 startTimeUnix
            
            <** @description: If using time span filter - indicate the unix end time in seconds. All entries with a timestamp before this time will be included in the transfer. **>
            UInt32 endTimeUnix
            
            <** @description: If using time next-x or first/last-x or counter next-x filter - indicate the number of entries to transfer. **>
            UInt32 numEntries
            
            <** @description: If using counter next-x filter - indicate the reference write counter value. **>
            UInt32 writeCounter
            
            <** @description: Include critical events in transfer Event Log **>
            Boolean includeClassCritical
            
            <** @description: Include major warning events in transfer Event Log **>
            Boolean includeClassMajorWarning
            
            <** @description: Include minor warning events in transfer Event Log **>
            Boolean includeClassMinorWarning
            
            <** @description: Include info events in transfer Event Log **>
            Boolean includeClassInfo
            
            <** @description: Include the CubeComputer as a source for events **>
            Boolean includeSourceCubeComputer
            
            <** @description: Include the RWL 0 as a source for events **>
            Boolean includeSourceRwl0
            
            <** @description: Include the RWL 1 as a source for events **>
            Boolean includeSourceRwl1
            
            <** @description: Include the RWL 2 as a source for events **>
            Boolean includeSourceRwl2
            
            <** @description: Include the RWL 3 as a source for events **>
            Boolean includeSourceRwl3
            
            <** @description: Include the Fss 0 as a source for events **>
            Boolean includeSourceFss0
            
            <** @description: Include the Fss 1 as a source for events **>
            Boolean includeSourceFss1
            
            <** @description: Include the Fss 2 as a source for events **>
            Boolean includeSourceFss2
            
            <** @description: Include the Fss 3 as a source for events **>
            Boolean includeSourceFss3
            
            <** @description: Include the Hss 0 as a source for events **>
            Boolean includeSourceHss0
            
            <** @description: Include the Hss 1 as a source for events **>
            Boolean includeSourceHss1
            
            <** @description: Include the Str 0 as a source for events **>
            Boolean includeSourceStr0
            
            <** @description: Include the Str 1 as a source for events **>
            Boolean includeSourceStr1
            
            <** @description: Include the Mag 0 as a source for events **>
            Boolean includeSourceMag0
            
            <** @description: Include the Mag 1 as a source for events **>
            Boolean includeSourceMag1
            
            <** @description: Include the External 0 as a source for events **>
            Boolean includeSourceExt0
            
            <** @description: Include the External 1 as a source for events **>
            Boolean includeSourceExt1
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set request telemetry log transfer setup
        @details: id = 7
    **>
    method setTelemetryLogTransferSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Filter type to use when reading tlm logs **>
            CubeComputerCommon3_LogReadFilterType filterType
            
            <** @description: Indicate the unix start time in seconds. All entries with a timestamp after this time will be included in the transfer. **>
            UInt32 startTimeUnix
            
            <** @description: Indicate the unix start end in seconds. All entries with a timestamp before this time will be included in the transfer. **>
            UInt32 endTimeUnix
            
            <** @description: If using time next-x or first/last-x or counter next-x filter - indicate the number of entries to transfer. **>
            UInt32 numEntries
            
            <** @description: If using counter next-x filter - indicate the reference write counter value. **>
            UInt32 writeCounter
            
            <** @description: Indicate how many samples to exclude between transferred samples **>
            CubeComputerCommon3_TlmLogReturnIntervalValues tlmLogReturnInterval
            
            <** @description: Indicate which log IDs must be included in the transfered Telemetry Log  
            @details: size = 5 **>
            UInt8[] logIdBitmask
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Set a dummy event to be stored in the event log
        @details: id = 8
    **>
    method setDummyEvent
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: This field contains the class of the event **>
            CubeComputerCommon3_EventClass eventClass
            
            <** @description: This field contains the source of the event **>
            CommonFrameworkEnums_AbstractNode eventSource
            
            <** @description: This field contains the type of the event **>
            UInt16 eventType
            
            <** @description: This field contains the data of the event  
            @details: size = 8 **>
            UInt8[] eventData
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Setup unsolicited event messages
        @details: id = 9
    **>
    method setUnsolicitedEventSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Output Info class events to UART **>
            Boolean uartInfo
            
            <** @description: Output minor warning class events to UART **>
            Boolean uartWarnMinor
            
            <** @description: Output major warning class events to UART **>
            Boolean uartWarnMajor
            
            <** @description: Output critical class events to UART2 **>
            Boolean uartCritical
            
            <** @description: Output Info class events to UART2 **>
            Boolean uart2Info
            
            <** @description: Output minor warning class events to UART2 **>
            Boolean uart2WarnMinor
            
            <** @description: Output major warning class events to UART2 **>
            Boolean uart2WarnMajor
            
            <** @description: Output critical class events to UART2 **>
            Boolean uart2Critical
            
            <** @description: Output Info class events to CAN **>
            Boolean canInfo
            
            <** @description: Output minor warning class events to CAN **>
            Boolean canWarnMinor
            
            <** @description: Output major warning class events to CAN **>
            Boolean canWarnMajor
            
            <** @description: Output critical class events to CAN **>
            Boolean canCritical
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: Inclusion bitmask for unsolicited telemetry
        @details: id = 10
    **>
    method setUnsolicitedTlmSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
            <** @description: Indicate how frequently unsolicited telemetry is transmitted on the UART interface **>
            CubeComputerCommon3_TlmLogReturnIntervalValues uartTlmInterval
            
            <** @description: Indicate how frequently unsolicited telemetry is transmitted on the UART2 interface **>
            CubeComputerCommon3_TlmLogReturnIntervalValues uart2TlmInterval
            
            <** @description: Indicate how frequently unsolicited telemetry is transmitted on the CAN interface **>
            CubeComputerCommon3_TlmLogReturnIntervalValues canTlmInterval
            
            <** @description: Indicate which TLM IDs must be included in the transfered Telemetry on the UART interface  
            @details: size = 5 **>
            UInt8[] uartTlmIdBitmask
            
            <** @description: Indicate which TLM IDs must be included in the transfered Telemetry on the UART2 interface  
            @details: size = 5 **>
            UInt8[] uart2TlmIdBitmask
            
            <** @description: Indicate which TLM IDs must be included in the transfered Telemetry on the CAN interface  
            @details: size = 5 **>
            UInt8[] canTlmIdBitmask
            
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
        }
    }
    
    <**
        @description: TCTLM Passthrough settings
        @details: id = 11
    **>
    method getPassThrough
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Target Node **>
            CommonFrameworkEnums_AbstractNode TargetNode
            
            
        }
    }
    
    <**
        @description: Power state
        @details: id = 12
    **>
    method getPowerState
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: RWL0 power state **>
            CubeComputerCommon3_PowerSelect Rwl0Power
            
            <** @description: RWL1 power state **>
            CubeComputerCommon3_PowerSelect Rwl1Power
            
            <** @description: RWL2 power state **>
            CubeComputerCommon3_PowerSelect Rwl2Power
            
            <** @description: RWL3 power state **>
            CubeComputerCommon3_PowerSelect Rwl3Power
            
            <** @description: MAG0 power state **>
            CubeComputerCommon3_PowerSelect Mag0Power
            
            <** @description: MAG1 power state **>
            CubeComputerCommon3_PowerSelect Mag1Power
            
            <** @description: GYR0 power state **>
            CubeComputerCommon3_PowerSelect Gyro0Power
            
            <** @description: GYR1 power state **>
            CubeComputerCommon3_PowerSelect Gyro1Power
            
            <** @description: FSS0 power state **>
            CubeComputerCommon3_PowerSelect Fss0Power
            
            <** @description: FSS1 power state **>
            CubeComputerCommon3_PowerSelect Fss1Power
            
            <** @description: FSS2 power state **>
            CubeComputerCommon3_PowerSelect Fss2Power
            
            <** @description: FSS3 power state **>
            CubeComputerCommon3_PowerSelect Fss3Power
            
            <** @description: HSS0 power state **>
            CubeComputerCommon3_PowerSelect Hss0Power
            
            <** @description: HSS1 power state **>
            CubeComputerCommon3_PowerSelect Hss1Power
            
            <** @description: STR0 power state **>
            CubeComputerCommon3_PowerSelect Str0Power
            
            <** @description: STR1 power state **>
            CubeComputerCommon3_PowerSelect Str1Power
            
            <** @description: ExtSensor0 power state **>
            CubeComputerCommon3_PowerSelect ExtSensor0Power
            
            <** @description: ExtSensor1 power state **>
            CubeComputerCommon3_PowerSelect ExtSensor1Power
            
            
        }
    }
    
    <**
        @description: Diagnostics relating to the inernal CubeConnect interface port
        @details: id = 13
    **>
    method getPortDiagnostics
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Global Error Code for Port Interface Operations. Signaling an error with at least one of the ports. **>
            UInt32 GlobalErrorCode
            
            <** @description: Set if the expected nodes configuration is empty. **>
            Boolean NoneExpected
            
            <** @description: Set if no nodes have been discovered. Please ensure nodes are connected **>
            Boolean NoneDiscoveredError
            
            <** @description: Set if the nodes that have been discovered do not match the expected nodes. Please read all port parameters to diagnose. **>
            Boolean ExpectedMatchError
            
            <** @description: Set if a CAN address could not be assigned to a node. Please read all port parameters to diagnose. **>
            Boolean AddrAssignError
            
            <** @description: Set if an abstract node type could not be resolved. Typically due to an unsupported number of a specific type of node being discovered. Please read all port parameters to diagnose. **>
            Boolean AbstractTypeError
            
            <** @description: Set if the discovered nodes could not be written to flash. **>
            Boolean ConfigPersistError
            
            <** @description: Sensor 1 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor1ErrorCode
            
            <** @description: Sensor 1 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor1UnexpectedError
            
            <** @description: Sensor 1 port - Set if a communications error ocurred. **>
            Boolean Sensor1CommsError
            
            <** @description: Sensor 1 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor1NodeTypeMatchError
            
            <** @description: Sensor 1 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor1SerialMatchError
            
            <** @description: Sensor 1 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor1AddrAssignError
            
            <** @description: Sensor 1 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor1AbstractTypeError
            
            <** @description: Sensor 1 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor1SerialResolveError
            
            <** @description: Sensor 2 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor2ErrorCode
            
            <** @description: Sensor 2 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor2UnexpectedError
            
            <** @description: Sensor 2 port - Set if a communications error ocurred. **>
            Boolean Sensor2CommsError
            
            <** @description: Sensor 2 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor2NodeTypeMatchError
            
            <** @description: Sensor 2 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor2SerialMatchError
            
            <** @description: Sensor 2 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor2AddrAssignError
            
            <** @description: Sensor 2 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor2AbstractTypeError
            
            <** @description: Sensor 2 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor2SerialResolveError
            
            <** @description: Sensor 3 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor3ErrorCode
            
            <** @description: Sensor 3 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor3UnexpectedError
            
            <** @description: Sensor 3 port - Set if a communications error ocurred. **>
            Boolean Sensor3CommsError
            
            <** @description: Sensor 3 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor3NodeTypeMatchError
            
            <** @description: Sensor 3 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor3SerialMatchError
            
            <** @description: Sensor 3 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor3AddrAssignError
            
            <** @description: Sensor 3 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor3AbstractTypeError
            
            <** @description: Sensor 3 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor3SerialResolveError
            
            <** @description: Sensor 4 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor4ErrorCode
            
            <** @description: Sensor 4 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor4UnexpectedError
            
            <** @description: Sensor 4 port - Set if a communications error ocurred. **>
            Boolean Sensor4CommsError
            
            <** @description: Sensor 4 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor4NodeTypeMatchError
            
            <** @description: Sensor 4 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor4SerialMatchError
            
            <** @description: Sensor 4 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor4AddrAssignError
            
            <** @description: Sensor 4 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor4AbstractTypeError
            
            <** @description: Sensor 4 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor4SerialResolveError
            
            <** @description: Sensor 5 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor5ErrorCode
            
            <** @description: Sensor 5 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor5UnexpectedError
            
            <** @description: Sensor 5 port - Set if a communications error ocurred. **>
            Boolean Sensor5CommsError
            
            <** @description: Sensor 5 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor5NodeTypeMatchError
            
            <** @description: Sensor 5 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor5SerialMatchError
            
            <** @description: Sensor 5 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor5AddrAssignError
            
            <** @description: Sensor 5 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor5AbstractTypeError
            
            <** @description: Sensor 5 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor5SerialResolveError
            
            <** @description: Sensor 6 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor6ErrorCode
            
            <** @description: Sensor 6 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor6UnexpectedError
            
            <** @description: Sensor 6 port - Set if a communications error ocurred. **>
            Boolean Sensor6CommsError
            
            <** @description: Sensor 6 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor6NodeTypeMatchError
            
            <** @description: Sensor 6 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor6SerialMatchError
            
            <** @description: Sensor 6 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor6AddrAssignError
            
            <** @description: Sensor 6 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor6AbstractTypeError
            
            <** @description: Sensor 6 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor6SerialResolveError
            
            <** @description: Sensor 7 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor7ErrorCode
            
            <** @description: Sensor 7 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor7UnexpectedError
            
            <** @description: Sensor 7 port - Set if a communications error ocurred. **>
            Boolean Sensor7CommsError
            
            <** @description: Sensor 7 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor7NodeTypeMatchError
            
            <** @description: Sensor 7 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor7SerialMatchError
            
            <** @description: Sensor 7 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor7AddrAssignError
            
            <** @description: Sensor 7 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor7AbstractTypeError
            
            <** @description: Sensor 7 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor7SerialResolveError
            
            <** @description: Sensor 8 port - Error Code for Port Interface Operations. **>
            UInt32 Sensor8ErrorCode
            
            <** @description: Sensor 8 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Sensor8UnexpectedError
            
            <** @description: Sensor 8 port - Set if a communications error ocurred. **>
            Boolean Sensor8CommsError
            
            <** @description: Sensor 8 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Sensor8NodeTypeMatchError
            
            <** @description: Sensor 8 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Sensor8SerialMatchError
            
            <** @description: Sensor 8 port - Set if this port could not be assigned a CAN address. **>
            Boolean Sensor8AddrAssignError
            
            <** @description: Sensor 8 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Sensor8AbstractTypeError
            
            <** @description: Sensor 8 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Sensor8SerialResolveError
            
            <** @description: Wheel 1 port - Error Code for Port Interface Operations. **>
            UInt32 Wheel1ErrorCode
            
            <** @description: Wheel 1 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Wheel1UnexpectedError
            
            <** @description: Wheel 1 port - Set if a communications error ocurred. **>
            Boolean Wheel1CommsError
            
            <** @description: Wheel 1 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Wheel1NodeTypeMatchError
            
            <** @description: Wheel 1 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Wheel1SerialMatchError
            
            <** @description: Wheel 1 port - Set if this port could not be assigned a CAN address. **>
            Boolean Wheel1AddrAssignError
            
            <** @description: Wheel 1 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Wheel1AbstractTypeError
            
            <** @description: Wheel 1 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Wheel1SerialResolveError
            
            <** @description: Wheel 2 port - Error Code for Port Interface Operations. **>
            UInt32 Wheel2ErrorCode
            
            <** @description: Wheel 2 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Wheel2UnexpectedError
            
            <** @description: Wheel 2 port - Set if a communications error ocurred. **>
            Boolean Wheel2CommsError
            
            <** @description: Wheel 2 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Wheel2NodeTypeMatchError
            
            <** @description: Wheel 2 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Wheel2SerialMatchError
            
            <** @description: Wheel 2 port - Set if this port could not be assigned a CAN address. **>
            Boolean Wheel2AddrAssignError
            
            <** @description: Wheel 2 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Wheel2AbstractTypeError
            
            <** @description: Wheel 2 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Wheel2SerialResolveError
            
            <** @description: Wheel 3 port - Error Code for Port Interface Operations. **>
            UInt32 Wheel3ErrorCode
            
            <** @description: Wheel 3 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Wheel3UnexpectedError
            
            <** @description: Wheel 3 port - Set if a communications error ocurred. **>
            Boolean Wheel3CommsError
            
            <** @description: Wheel 3 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Wheel3NodeTypeMatchError
            
            <** @description: Wheel 3 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Wheel3SerialMatchError
            
            <** @description: Wheel 3 port - Set if this port could not be assigned a CAN address. **>
            Boolean Wheel3AddrAssignError
            
            <** @description: Wheel 3 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Wheel3AbstractTypeError
            
            <** @description: Wheel 3 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Wheel3SerialResolveError
            
            <** @description: Wheel 4 port - Error Code for Port Interface Operations. **>
            UInt32 Wheel4ErrorCode
            
            <** @description: Wheel 4 port - Set if the node discovered on this port is not listed as an expected node. **>
            Boolean Wheel4UnexpectedError
            
            <** @description: Wheel 4 port - Set if a communications error ocurred. **>
            Boolean Wheel4CommsError
            
            <** @description: Wheel 4 port - Set if the previously discovered node type no longer matches the node connected to the port. **>
            Boolean Wheel4NodeTypeMatchError
            
            <** @description: Wheel 4 port - Set if the previously discovered node serial number no longer matches the node connected to the port. **>
            Boolean Wheel4SerialMatchError
            
            <** @description: Wheel 4 port - Set if this port could not be assigned a CAN address. **>
            Boolean Wheel4AddrAssignError
            
            <** @description: Wheel 4 port - Set if the abstract type for the node on this port could not be resolve or if there are an unsupported number of a spacific node type connected. **>
            Boolean Wheel4AbstractTypeError
            
            <** @description: Wheel 4 port - Set if the serial number returned by the node could not be resolved to a node type. **>
            Boolean Wheel4SerialResolveError
            
            
        }
    }
    
    <**
        @description: This telemetry describes the nodes that have been discovered i.e. connected to CubeConnect
        @details: id = 14
    **>
    method getPortMap
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Sensor 1 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor1NodeType
            
            <** @description: Sensor 1 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor1AbstractType
            
            <** @description: Sensor 1 port - Serial Number Integer Respresentation **>
            UInt32 Sensor1SerialInt
            
            <** @description: Sensor 1 port - CAN Address **>
            UInt32 Sensor1Address
            
            <** @description: Sensor 2 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor2NodeType
            
            <** @description: Sensor 2 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor2AbstractType
            
            <** @description: Sensor 2 port - Serial Number Integer Respresentation **>
            UInt32 Sensor2SerialInt
            
            <** @description: Sensor 2 port - CAN Address **>
            UInt32 Sensor2Address
            
            <** @description: Sensor 3 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor3NodeType
            
            <** @description: Sensor 3 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor3AbstractType
            
            <** @description: Sensor 3 port - Serial Number Integer Respresentation **>
            UInt32 Sensor3SerialInt
            
            <** @description: Sensor 3 port - CAN Address **>
            UInt32 Sensor3Address
            
            <** @description: Sensor 4 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor4NodeType
            
            <** @description: Sensor 4 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor4AbstractType
            
            <** @description: Sensor 4 port - Serial Number Integer Respresentation **>
            UInt32 Sensor4SerialInt
            
            <** @description: Sensor 4 port - CAN Address **>
            UInt32 Sensor4Address
            
            <** @description: Sensor 5 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor5NodeType
            
            <** @description: Sensor 5 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor5AbstractType
            
            <** @description: Sensor 5 port - Serial Number Integer Respresentation **>
            UInt32 Sensor5SerialInt
            
            <** @description: Sensor 5 port - CAN Address **>
            UInt32 Sensor5Address
            
            <** @description: Sensor 6 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor6NodeType
            
            <** @description: Sensor 6 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor6AbstractType
            
            <** @description: Sensor 6 port - Serial Number Integer Respresentation **>
            UInt32 Sensor6SerialInt
            
            <** @description: Sensor 6 port - CAN Address **>
            UInt32 Sensor6Address
            
            <** @description: Sensor 7 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor7NodeType
            
            <** @description: Sensor 7 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor7AbstractType
            
            <** @description: Sensor 7 port - Serial Number Integer Respresentation **>
            UInt32 Sensor7SerialInt
            
            <** @description: Sensor 7 port - CAN Address **>
            UInt32 Sensor7Address
            
            <** @description: Sensor 8 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Sensor8NodeType
            
            <** @description: Sensor 8 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Sensor8AbstractType
            
            <** @description: Sensor 8 port - Serial Number Integer Respresentation **>
            UInt32 Sensor8SerialInt
            
            <** @description: Sensor 8 port - CAN Address **>
            UInt32 Sensor8Address
            
            <** @description: Wheel 1 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel1NodeType
            
            <** @description: Wheel 1 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel1AbstractType
            
            <** @description: Wheel 1 port - Serial Number Integer Respresentation **>
            UInt32 Wheel1SerialInt
            
            <** @description: Wheel 1 port - CAN Address **>
            UInt32 Wheel1Address
            
            <** @description: Wheel 2 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel2NodeType
            
            <** @description: Wheel 2 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel2AbstractType
            
            <** @description: Wheel 2 port - Serial Number Integer Respresentation **>
            UInt32 Wheel2SerialInt
            
            <** @description: Wheel 2 port - CAN Address **>
            UInt32 Wheel2Address
            
            <** @description: Wheel 3 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel3NodeType
            
            <** @description: Wheel 3 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel3AbstractType
            
            <** @description: Wheel 3 port - Serial Number Integer Respresentation **>
            UInt32 Wheel3SerialInt
            
            <** @description: Wheel 3 port - CAN Address **>
            UInt32 Wheel3Address
            
            <** @description: Wheel 4 port - Node type identifier **>
            CommonFrameworkEnums_NodeType Wheel4NodeType
            
            <** @description: Wheel 4 port - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Wheel4AbstractType
            
            <** @description: Wheel 4 port - Serial Number Integer Respresentation **>
            UInt32 Wheel4SerialInt
            
            <** @description: Wheel 4 port - CAN Address **>
            UInt32 Wheel4Address
            
            
        }
    }
    
    <**
        @description: Lists the expected nodes config item
        @details: id = 15
    **>
    method getExpectedNodes
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Slot 0 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected0NodeType
            
            <** @description: Slot 0 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected0AbstractType
            
            <** @description: Slot 0 - Serial Number Integer Respresentation **>
            UInt32 Expected0SerialInt
            
            <** @description: Slot 1 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected1NodeType
            
            <** @description: Slot 1 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected1AbstractType
            
            <** @description: Slot 1 - Serial Number Integer Respresentation **>
            UInt32 Expected1SerialInt
            
            <** @description: Slot 2 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected2NodeType
            
            <** @description: Slot 2 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected2AbstractType
            
            <** @description: Slot 2 - Serial Number Integer Respresentation **>
            UInt32 Expected2SerialInt
            
            <** @description: Slot 3 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected3NodeType
            
            <** @description: Slot 3 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected3AbstractType
            
            <** @description: Slot 3 - Serial Number Integer Respresentation **>
            UInt32 Expected3SerialInt
            
            <** @description: Slot 4 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected4NodeType
            
            <** @description: Slot 4 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected4AbstractType
            
            <** @description: Slot 4 - Serial Number Integer Respresentation **>
            UInt32 Expected4SerialInt
            
            <** @description: Slot 5 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected5NodeType
            
            <** @description: Slot 5 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected5AbstractType
            
            <** @description: Slot 5 - Serial Number Integer Respresentation **>
            UInt32 Expected5SerialInt
            
            <** @description: Slot 6 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected6NodeType
            
            <** @description: Slot 6 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected6AbstractType
            
            <** @description: Slot 6 - Serial Number Integer Respresentation **>
            UInt32 Expected6SerialInt
            
            <** @description: Slot 7 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected7NodeType
            
            <** @description: Slot 7 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected7AbstractType
            
            <** @description: Slot 7 - Serial Number Integer Respresentation **>
            UInt32 Expected7SerialInt
            
            <** @description: Slot 8 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected8NodeType
            
            <** @description: Slot 8 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected8AbstractType
            
            <** @description: Slot 8 - Serial Number Integer Respresentation **>
            UInt32 Expected8SerialInt
            
            <** @description: Slot 9 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected9NodeType
            
            <** @description: Slot 9 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected9AbstractType
            
            <** @description: Slot 9 - Serial Number Integer Respresentation **>
            UInt32 Expected9SerialInt
            
            <** @description: Slot 10 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected10NodeType
            
            <** @description: Slot 10 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected10AbstractType
            
            <** @description: Slot 10 - Serial Number Integer Respresentation **>
            UInt32 Expected10SerialInt
            
            <** @description: Slot 11 - Node type identifier **>
            CommonFrameworkEnums_NodeType Expected11NodeType
            
            <** @description: Slot 11 - Abstract Node type identifier **>
            CommonFrameworkEnums_AbstractNode Expected11AbstractType
            
            <** @description: Slot 11 - Serial Number Integer Respresentation **>
            UInt32 Expected11SerialInt
            
            
        }
    }
    
    <**
        @description: Image Transfer Status
        @details: id = 16
    **>
    method getImageTransferStatus
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: State **>
            CubeComputerCommon3_ImageTransferState State
            
            <** @description: Operation Error Code. Non-Zero = ERROR **>
            UInt32 ErrorCode
            
            <** @description: Size of the transfer **>
            UInt32 TransferSize
            
            <** @description: Amount of data still to be transfered **>
            UInt32 DataRemain
            
            <** @description: Set if the target node is invalid **>
            Boolean InvalidNodeError
            
            <** @description: Set if transfer timeout reached **>
            Boolean TimeoutError
            
            <** @description: Set if the target node failed to capture image invalid **>
            Boolean CaptureError
            
            <** @description: Set if the target node failed to set up image transfer **>
            Boolean SetupError
            
            <** @description: Set if error occured when opening storage file for reading **>
            Boolean FileOpenReadError
            
            <** @description: Set if error occured when opening storage file for writing **>
            Boolean FileOpenWriteError
            
            <** @description: Set if error occured while reading from storage file **>
            Boolean FileReadError
            
            <** @description: Set if error occured while writing to storage file **>
            Boolean FileWriteError
            
            <** @description: Set if there is already an ongoing transfer when attempting to store an image. **>
            Boolean BusyError
            
            
        }
    }
    
    <**
        @description: Stored image file information
        @details: id = 17
    **>
    method getImageFileInfo
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: File handle of this file. **>
            UInt32 FileHandle
            
            <** @description: The node that this file was sourced from. **>
            CommonFrameworkEnums_AbstractNode NodeType
            
            <** @description: Timestamp of when this file was stored. **>
            UInt32 Timestamp
            
            <** @description: Size of the file in bytes. **>
            UInt32 Size
            
            <** @description: Set if this file is the first stored image. **>
            Boolean First
            
            <** @description: Set if this file is the last stored image. If set, subsequent requests will wrap to the first file. **>
            Boolean Last
            
            <** @description: Set if this file's Meta data was CRC-validated. **>
            Boolean IsValid
            
            
        }
    }
    
    <**
        @description: Error codes common to CubeComputer bootloader and control-program
        @details: id = 18
    **>
    method getComponentErrorCodes
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Tctlm comms master service error code (node comms) **>
            UInt32 MasterSvc
            
            <** @description: FRAM file system error code. **>
            UInt32 FramFsSvc
            
            <** @description: Event log service error code. **>
            UInt32 EventLogSvc
            
            <** @description: Image log service error code. **>
            UInt32 ImgLogSvc
            
            <** @description: Telemetry log service error code. **>
            UInt32 TlmLogSvc
            
            <** @description: IMU/Gyro service error code. **>
            UInt32 ImuSvc
            
            
        }
    }
    
    <**
        @description: Get the Event log status response
        @details: id = 19
    **>
    method getEventLogStatus
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: The number of entries in the queue **>
            UInt16 numberOfEntriesQueued
            
            <** @description: The number of buffered (unwritten) entries **>
            UInt16 numberOfEntriesBuffered
            
            <** @description: The total number of entries contained in the event log (buffered + written) **>
            UInt32 numberOfEntries
            
            <** @description: The total number of empty entries contained in the event log (storage space with no data) **>
            UInt32 numberOfEmptyEntries
            
            <** @description: Timestamp of the oldest entry unix time in seconds **>
            UInt32 oldestEntryUnix
            
            <** @description: Timestamp of the latest entry unix time in seconds **>
            UInt32 latestEntryUnix
            
            <** @description: The total number of critical events contained in the event log **>
            UInt32 numberOfCriticalEvents
            
            <** @description: The total number of major warning events contained in the event log **>
            UInt32 numberOfMajorWarningEvents
            
            <** @description: The total number of minor warning events contained in the event log **>
            UInt32 numberOfMinorWarningEvents
            
            <** @description: The total number of info events contained in the event log **>
            UInt32 numberOfInfoEvents
            
            <** @description: The current event write counter **>
            UInt32 writeCounter
            
            <** @description: The state of the read queue **>
            CubeComputerCommon3_EventReadQueueState readQueueState
            
            
        }
    }
    
    <**
        @description: Get the Telemtry log status response
        @details: id = 20
    **>
    method getTelemtryLogStatus
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: The number of entries in the queue **>
            UInt8 numberOfEntriesQueued
            
            <** @description: The number of telemetry request iterations performed for the current log entry (0-4) **>
            UInt8 numberOfTlmIterations
            
            <** @description: The total number of entries contained in the telemetry log **>
            UInt32 numberOfEntries
            
            <** @description: Timestamp of the oldest entry unix time in seconds **>
            UInt32 oldestEntryUnix
            
            <** @description: Timestamp of the latest entry unix time in seconds **>
            UInt32 latestEntryUnix
            
            <** @description: The current event write counter **>
            UInt32 writeCounter
            
            <** @description: The state of the read queue **>
            CubeComputerCommon3_TlmLogReadQueueState readQueueState
            
            
        }
    }
    
    <**
        @description: Setup unsolicited event messages
        @details: id = 21
    **>
    method getUnsolicitedEventSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Output Info class events to UART **>
            Boolean uartInfo
            
            <** @description: Output minor warning class events to UART **>
            Boolean uartWarnMinor
            
            <** @description: Output major warning class events to UART **>
            Boolean uartWarnMajor
            
            <** @description: Output critical class events to UART2 **>
            Boolean uartCritical
            
            <** @description: Output Info class events to UART2 **>
            Boolean uart2Info
            
            <** @description: Output minor warning class events to UART2 **>
            Boolean uart2WarnMinor
            
            <** @description: Output major warning class events to UART2 **>
            Boolean uart2WarnMajor
            
            <** @description: Output critical class events to UART2 **>
            Boolean uart2Critical
            
            <** @description: Output Info class events to CAN **>
            Boolean canInfo
            
            <** @description: Output minor warning class events to CAN **>
            Boolean canWarnMinor
            
            <** @description: Output major warning class events to CAN **>
            Boolean canWarnMajor
            
            <** @description: Output critical class events to CAN **>
            Boolean canCritical
            
            
        }
    }
    
    <**
        @description: Inclusion bitmask for unsolicited telemetry
        @details: id = 22
    **>
    method getUnsolicitedTlmSetup
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Indicate how frequently unsolicited telemetry is transmitted on the UART interface **>
            CubeComputerCommon3_TlmLogReturnIntervalValues uartTlmInterval
            
            <** @description: Indicate how frequently unsolicited telemetry is transmitted on the UART2 interface **>
            CubeComputerCommon3_TlmLogReturnIntervalValues uart2TlmInterval
            
            <** @description: Indicate how frequently unsolicited telemetry is transmitted on the CAN interface **>
            CubeComputerCommon3_TlmLogReturnIntervalValues canTlmInterval
            
            <** @description: Indicate which TLM IDs must be included in the transfered Telemetry on the UART interface  
            @details: size = 5 **>
            UInt8[] uartTlmIdBitmask
            
            <** @description: Indicate which TLM IDs must be included in the transfered Telemetry on the UART2 interface  
            @details: size = 5 **>
            UInt8[] uart2TlmIdBitmask
            
            <** @description: Indicate which TLM IDs must be included in the transfered Telemetry on the CAN interface  
            @details: size = 5 **>
            UInt8[] canTlmIdBitmask
            
            
        }
    }
    
    <**
        @description: Get the Telemtry log inclusion masks
        @details: id = 23
    **>
    method getTelemtryLogInclusionMasks
    {
        in
        {
			<** @description: CubeADCS Gen2 node to receive the request.
			@details: size = 1 **>
			CmdTargetNode cmdTargetNode
			
        }
        
        

        out
        {
            <** @description: Return status of the CubeADCS Gen2 API operation. **>
            UInt32 adcsErrorCode
            
            <** @description: Log ID inclusion bitmask for telemetry logged every 200ms  
            @details: size = 5 **>
            UInt8[] fastBitMask
            
            <** @description: Log ID inclusion bitmask for telemetry logged every 1s  
            @details: size = 5 **>
            UInt8[] slowBitMask
            
            
        }
    }
    
}