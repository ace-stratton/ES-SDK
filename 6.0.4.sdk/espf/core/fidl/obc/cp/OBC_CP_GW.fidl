package endurosat.macif.cp

<** @description: Onboard Computer Command Protocol (from Ground Station) Communication Gateway Commands 
    @details: id = 102 
**>
interface OBC_CP_GW
{
    version { major 0 minor 1 }

    <** @details: size = 1 **>
    enumeration SXBandReqType
    {
        READ = 82,      // ASCII code of 'R'
        WRITE = 87      // ASCII code of 'W'
    }

    <** @details: size = 1 **>
    enumeration SXBandCmd
    {
        SYMBOL_RATE = 1,
        TX_POWER = 2,
        FREQUENCY = 3,
        MODCOD = 4,
        ROLL_OFF = 5,
        PILOT_SIGNAL = 6,
        FEC_FRAME_SIZE = 7,
        PRE_TRANS_STUFFING = 8,
        ALL_PARAMS = 9,
        SIMPLE_REPORT = 10,
        FULL_REPORT = 11,
        CHANGE_BAUDRATE = 12,
        TX_MODE = 48,
        IDLE_MODE = 49,
        PREP_SHUTDOWN = 50,
        FW_UPDATE = 53,
        DIR = 64,
        DELETE_FILE = 80,
        DELETE_ALL = 85,
        UPLOAD_FILE = 96,
        DOWNLOAD_FILE = 97,
        SEND_FILE = 112
    }

    struct SXBandGwCmdReq
    {
        UInt16 Identifier
        SXBandCmd Cmd
        SXBandReqType Type
        UInt8 DataLen
        <** @details: size = DataLen **>
        UInt8[] Data
    }
    
    struct MacFpCmdReq
    {
        <** @description: Size in bytes of the FP frame (including FP header) **>
        UInt8 Size
        <** @description: The maximum allowed size of the data field in FP frames is 255 - (FP Header size)
            @details: size = 245 **>
        UInt8[] Data
    }
    
    struct SXBandSchedCmdReq
    {
        <** @description: requests the SXBand module to be power-reset before starting the command file **>
        Boolean reset_pwr_before_sched_start
        <** @description: tells the scheduler to search for an existing file instead of writing the CP buffer content onto the storage **>
        Boolean run_from_existing_file
        <** @description: ASCIIZ name of the schedule file to copy the received content to
            @details: size = 0 
        **>
        String file_name
        <** @description: binary schedule file to execute (only if run_from_existing_file parameter is True); the size specified here is the maximum possible
                          (any size smaller than this would also be accepted; for bigger sizes, you must upload the file in advance before running the command)
            @details: size = 950 
        **>
        UInt8[] sched_file_content       
    }
    
    enumeration FileOpStatus
    {
        FR_OK = 0
        FR_DISK_ERR = 1
        FR_INT_ERR = 2
        FR_NOT_READY = 3
        FR_NO_FILE = 4
        FR_NO_PATH = 5
        FR_INVALID_NAME = 6
        FR_DENIED = 7
        FR_EXIST = 8
        FR_INVALID_OBJECT = 9
        FR_WRITE_PROTECTED = 10
        FR_INVALID_DRIVE = 11
        FR_NOT_ENABLED = 12
        FR_NO_FILESYSTEM = 13
        FR_MKFS_ABORTED = 14
        FR_TIMEOUT = 15
        FR_LOCKED = 16
        FR_NOT_ENOUGH_CORE = 17
        FR_TOO_MANY_OPEN_FILES = 18
        FR_INVALID_PARAMETER = 19        
    }
    
    enumeration SchedStatus
    {
        SXBAND_SCHED_STATUS_OK = 0
        SXBAND_SCHED_STATUS_FAILED = 1
        SXBAND_SCHED_STATUS_INTERRUPTED = 2
        SXBAND_SCHED_STATUS_IN_PROGRESS = 3        
    }
    
    struct SXBandSchedCmdResp
    {
        <** @description: result from the last file operation (maps to FatFS FRESULT type **> 
        FileOpStatus file_op_res
        <** @description: number of bytes from the buffer which were written to the file **>
        UInt32 bytes_written        
        <** @description: status of the sxband schedule request **>        
        SchedStatus sched_status        
    }
    
    <** @description: The method is used to trigger an UART command to the S-/X-Band Transmitter as supported
                      over legacy ESTTC protocol
        @details: id = 1200 
    **>
    method SXBand_GwSendCmd
    {
        in
        {
            <** @description: Input is formatted in the same way as ESTTC legacy protocol expects it **>
            SXBandGwCmdReq cmdData
        }
        out
        {
            <** @details: size = 0 **>
            String responseData 
        }
    }
    
    <** @description: The method is used to send a direct command to CubeADCS via UART and tunnel back the response
        @details: id = 1202
    **>
    method CubeADCS_GwSendCmd
    {
        in
        {
            <** @description: Command ID **>
            UInt8 cmdId
            <** @details: 255 **>
            UInt8[] cmdBytes
        }
        out
        {
            <** @details: size = 255 **>
            UInt8[] responseData 
        }
    }
    
    <** @description: The method is used to send a MAC FP frame to a device over CP protocol
        @details: id = 1212
    **>
    method MacFp_GwSendCmd
    {
        in
        {
            MacFpCmdReq cmdData
        }
        out
        {
            <** @details: size = 255 **>
            UInt8[] responseData 
        }
    }

    <** @description: Executes an SXBand binary schedule either from an existing file, or from a memory payload
                      provided as part of the request.
        @details: id = 1451 
    **>
    method SXBandSched_Run
    {
        in
        {
            <** @description: SXBand scheduler request parameters **>
            SXBandSchedCmdReq req
        }
        out
        {
            <** @description: SXBand scheduler response data **>
            SXBandSchedCmdResp resp 
        }
    }
    
    <** @description: Returns the last SXBand scheduler command status
        @details: id = 1452 
    **>
    method SXBandSched_Poll_Status
    {
        out
        {
            <** @description: status of the sxband schedule request **>        
            SchedStatus sched_status
            <** @description: The name of the produced final report but if for some reason the command sequence breaks, 
                              intermediate results of the execution can be found in a temporary file called SXB_REP.INP 
                @details: size = 0
            **>
            String summary_f_name        
        }
    }
}
