package endurosat.pf

<** @description: Beacon service control and persistent configuration interface
    @details: id = 257
**>

interface Beacons
{
    version { major 0 minor 1 }

    <** @description: Standard result enumeration which can be used in most situations as a return code **>
    enumeration StandardResult
    {
        <** @description: The operation finished successfully **>
        SUCCESS,
        <** @description: The operation failed **>
        ERROR,
        <** @description: One or more input arguments of the method are invalid **>
        INVALID_ARGS,
        <** @description: The operation is not supported by the firmware implementation **>
        NOT_SUPPORTED
    }

    <** @description: Increased-Hamming-distance-version of the regular boolean type. Used to represent regular boolean values.
    **>
    enumeration safe_bool
    {
        SAFE_FALSE = 0x00
        SAFE_TRUE = 0xFF
    }

    <** @description: This type describes the radio beacon feature persistent configuration settings **>
    struct bcn_general_cfg
    {
        <** @description: Controls whether the beacon feature is active or not **>
        safe_bool beacons_en
        <** @description: Controls whether data can be sent over radio beacons in split-form, e.g. in multiple chunks **>
        safe_bool chunk_based_transfer_en
        <** @description: Represents the beacon burst transmission period in units of [1 ms]. Beacon bursts are series of beacon frames. **>
        UInt32 bcn_tx_period
        <** @description: Represents the time period between beacon frames transmission in units of [1 ms].**>
        UInt32 bcn_inter_frame_period
    }
    
    <** @description: Obtains the general beacon configuration settings which are persisted between resets
        @details: id = 0 
    **>
    method getBeaconGeneralConfig
    {
        out
        {
            <** @description: Persistent beacon configuration settings as stored in the device **>
            bcn_general_cfg cfg
        }
    }
    
    <** @description: Used to update the general beacon configuration settings in the persistent storage
        @details: id = 1 
    **>
    method setBeaconGeneralConfig
    {
        in
        {
            <** @description: Modified configuration to update in the persistent storage **>
            bcn_general_cfg cfg
        }
        out
        {
            <** @description: Status of the set operation **>
            StandardResult res
        }
        
    }

    <** @description: Obtains the beacon service slot assignment configuration
        @details: id = 2 
    **> 
    method getBeaconPresetConfig
    {
        out
        {
            <** @description: Hard-coded number of beacon slot presets in the system **>
            UInt8 slot_preset_cnt
            <** @description: Hard-coded number of maximum beacon messages in a single burst sequence **>
            UInt8 max_bcn_msg_cnt
            <** @description: Specifies the different slot preset assignments of telemetry identifiers.
                              Presets can be changed at run-time depending on different conditions.
                @details: size = 80
            **>
            UInt16[] beacon_preset_cfg
        }
    }

    <** @description: Used to update the beacon service slot assignment configuration
        @details: id = 3 
    **> 
    method setBeaconPresetConfig
    {
        in
        {
            <** @description: Specifies the different slot preset assignments of telemetry identifiers.
                              Presets can be changed at run-time depending on different conditions.
                              The size below is specified by calculating the number of slot presets slot_preset_cnt times
                              the maximum number of beacon messages max_bcn_msg_cnt in a single beacon sequence. This number
                              must match the number configured in the device firmware where this interface is
                              implemented. In this case, this is 4 presets consisting of 20 messages each.
                              The array is encoded as a 1D representation of a matrix where each row specifies all max_bcn_msg_cnt
                              message IDs for a single preset.
                @details: size = 80
            **>
            UInt16[] beacon_preset_cfg
        }
        out
        {
            <** @description: Status of the set operation **> 
            StandardResult res
            <** @description: Specifies the slot index for each preset which did not pass length verification check (size must match the number of active presets!)
                @details: size = 4
            **>
            UInt8[] preset_error_slot_index       
        }
    }
    
    <** @description: Request a change in the beacons active preset
        @details: id = 4 
    **> 
    method setActivePreset
    { 
        in
        {
            <** @description: Preset ID to use for beacon transmission. It will be active until next reboot or until a call
                              to restoreActivePreset method is performed.
            **>
            UInt8 req_active_preset
        }
        out
        {
            <** @description: Status of the set operation **>
            StandardResult res
            <** @description: Number of presets available in the system **>
            UInt8 avail_presets_cnt
        }
    }
    
    <** @description: Provides the currently active preset ID used for beacon transmission
        @details: id = 5 
    **> 
    method getActivePreset
    {
        out
        {
            UInt8 active_preset_id
        }
    }
    
    <** @description: Restores the active preset autonomous mode, e.g. as calculated by ConOps.
        @details: id = 6 
    **> 
    method restoreActivePreset
    {
        out
        {
            <** @description: Status of the operation **>
            StandardResult res
        }
    }
}
