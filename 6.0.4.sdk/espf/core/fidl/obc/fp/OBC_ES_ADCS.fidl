package endurosat.macif

<** @description: EnduroSat ADCS Protocol as part of the Onboard Computer
    @details: id = 18 
**>
interface OBC_ES_ADCS
{
    version { major 3 minor 0 }

    enumeration RESULT
    {
        OK,
        INIT_FAIL,
        FAIL
    }
    
    <** @description: This corresponds to enum es_adcs_op_modes_sm_states from file es_adcs_op_modes_sm_user.h
It must be manually updated if the file is changed. **>
    enumeration OP_MODES
    {
    	STATE_ROOT,
    	STATE_ADCS_RUN,
    	STATE_ADCS_TRIGGER,
    	STATE_ADCS_IDLE,
    	STATE_ADCS_NOT_INIT
    }
    
    <** @description: This is a reduced version of the above enum, which is used for the SET_OP_MODE function.
The reduction is required because not all HSM states are accessible under normal operation. **>
    enumeration OP_MODES_INPUT
    {
    	STATE_ADCS_RUN = 1,
    	STATE_ADCS_TRIGGER,
    	STATE_ADCS_IDLE
    }
    
    enumeration ESTIMATOR_WARNING
    {
    	NONE,
    	GENERAL
    }
    
    enumeration ESTIMATOR_ERROR
    {
    	NONE,
    	DATA_CACHE_GET,
    	MAGNETOMETER_INVALID,
    	INVALID_ALGO,
    	ALGO_IDENTICAL,
    	GENERAL
    }
    
    enumeration USED_MAGNETOMETER
    {
    	PRIMARY,
    	SECONDARY
    }
    
    enumeration ESTIMATOR
    {
    	ALGO_NONE,
    	ALGO_BDOT_MAG
    }
    
    enumeration CONTROLLER_WARNING
    {
    	NONE,
    	SATURATION_UPPER,
    	SATURATION_LOWER,
    	GENERAL
    }
    
    enumeration CONTROLLER_ERROR
    {
    	NONE,
    	DATA_CACHE_GET,
    	INVALID_ALGO,
    	GENERAL
    }
    
    enumeration CONTROLLER
    {
    	ALGO_NONE,
    	ALGO_BDOT_MAG
    }
    
    struct ESTIMATOR_ALGO_STATUS 
    {
    	ESTIMATOR_WARNING lastWarningAlgo
    	ESTIMATOR_ERROR   lastErrorAlgo
    }
    
    struct ESTIMATOR_STATUS
    {
    	ESTIMATOR_WARNING       lastWarningGeneral
    	ESTIMATOR_ERROR         lastErrorGeneral
    	<** @details: size = 2 **>
    	ESTIMATOR_ALGO_STATUS[] algoStatus
    }
    
    struct ESTIMATOR_CONFIG
    {
    	<** @details: size = 2 **>
    	ESTIMATOR[]                 activeEstimators
    }
    
    struct CONTROLLER_ALGO_STATUS
    {
    	CONTROLLER_WARNING lastWarningAlgo
    	CONTROLLER_ERROR   lastErrorAlgo	
    }
    
    struct CONTROLLER_STATUS
    {
    	CONTROLLER_WARNING     lastWarningGeneral
    	CONTROLLER_ERROR       lastErrorGeneral
    	CONTROLLER_ALGO_STATUS algoStatus
    }
    
    struct CONTROLLER_BDOT_CONFIG
    {
    	Double bdot_gain_coeff_X
    	Double bdot_gain_coeff_Y
    	Double bdot_gain_coeff_Z
    }
    
    struct CONTROLLER_CONFIG
    {
    	CONTROLLER             activeController
    	CONTROLLER_BDOT_CONFIG bdotConfig
    }
    
    struct STATUS
    {
    	RESULT   estimatorResult
    	RESULT   controllerResult
    	OP_MODES activeMode
    }
    
    struct CONFIG
    {
    	ESTIMATOR_CONFIG  EstimatorConfig
    	CONTROLLER_CONFIG ControllerConfig
    	USED_MAGNETOMETER UsedMagnetometer
    }
        
    struct VEC_3D
    {
        Double X
        Double Y
        Double Z
    }
    
    <** @description: Attempt to change the ADCS operating modes state machine to a new state. 
        @details: id = 0x00000001, esttc_id = X 
    **>
    method SET_OP_MODE
    {
        in
        {
            OP_MODES_INPUT desiredMode
        }
        out
        {
            RESULT opResult
        }
    }
    
    <** @description: Get the currently active state of the ADCS operating modes state machine.
        @details: id = 0x00000002, esttc_id = X
    **>
    method GET_OP_MODE
    {
        out
        {
            OP_MODES activeMode
            RESULT opResult
        }
    }
    
    <** @description: Attempt to change the used estimators by the ADCS. Leaving one estimator as NONE is allowed.
        @details: id = 0x00000003, esttc_id = X
    **>
    method SET_ESTIMATORS
    {
        in
        {
            ESTIMATOR desiredEstimator1
            ESTIMATOR desiredEstimator2
        }
        out
        {
            RESULT opResult
        }
    }
    
    <** @description: Get the currently active estimators in the ADCS.
        @details: id = 0x0000004, esttc_id = X
    **>
    method GET_ESTIMATORS
    {
        out
        {
        	ESTIMATOR activeEstimator1
        	ESTIMATOR activeEstimator2
            RESULT opResult
        }
    }

    <** @description: Attempt to change the used controller by the ADCS.
        @details: id = 0x00000005, esttc_id = X
    **>
    method SET_CONTROLLER
    {
        in
        {
            CONTROLLER desiredController
        }
        out
        {
            RESULT opResult
        }
    }

    <** @description: Get the currently active controller in the ADCS.
        @details: id = 0x00000006, esttc_id = X
    **>
    method GET_CONTROLLER
    {
        out
        {
            CONTROLLER activeController
            RESULT opResult
        }
    }
      
    <** @description: Get the general status of the ADCS.
        @details: id = 0x00000007, esttc_id = X
    **>
    method GET_STATUS
    {
    	out
    	{
    		STATUS currentStatus
    		RESULT opResult
    	}
    }
    
    <** @description: Get the estimator specific status of the ADCS.
        @details: id = 0x00000008, esttc_id = X
    **>
    method GET_STATUS_ESTIMATORS
    {
    	out
    	{
    		ESTIMATOR_STATUS currentStatusEstimators
    		RESULT opResult
    	}
    }
    
    <** @description: Get the controller specific status of the ADCS.
        @details: id = 0x00000009, esttc_id = X
    **>
    method GET_STATUS_CONTROLLER
    {
    	out
    	{
    		CONTROLLER_STATUS currentStatusController
    		RESULT opResult
    	}
    }
    
    <** @description: Attempt to change the used controller bdot config by the ADCS.
     	@details: id = 0x0000000A, esttc_id = X
    **>
    method SET_CONTROLLER_BDOT_CONFIG
    {
    	in
    	{
    		CONTROLLER_BDOT_CONFIG desiredBdotConfig
    	}
    	out
    	{
    		RESULT opResult
    	}
    }
    
    <** @description: Get the used controller bdot config in the ADCS.
        @details: id = 0x0000000B, esttc_id = X
    **>
    method GET_CONTROLLER_BDOT_CONFIG
    {
    	out
    	{
    		CONTROLLER_BDOT_CONFIG activeBdotConfig
    		RESULT opResult
    	}
    }
    
    <** @description: Attempt to change the used magnetometer by the ADCS.
     	@details: id = 0x0000000C, esttc_id = X
    **>
    method SET_MAGNETOMETER
    {
    	in
    	{
            USED_MAGNETOMETER desiredMagnetometer
    	}
    	out
    	{
    		RESULT opResult
    	}
    }
    
    <** @description: Get the used magnetometer by the ADCS.
        @details: id = 0x0000000D, esttc_id = X
    **>
    method GET_MAGNETOMETER
    {
    	out
    	{
        	USED_MAGNETOMETER activeMagnetometer
    		RESULT opResult
    	}
    }
    
    <** @description: Attempt to change the general config of the ADCS.
     	@details: id = 0x0000000E, esttc_id = X
    **>
    method SET_ADCS_CONFIG
    {
    	in
    	{
    		CONFIG desiredConfig
    	}
    	out
    	{
    		RESULT opResult
    	}
    }
    
    <** @description: Get the general config of the ADCS.
     	@details: id = 0x0000000F, esttc_id = X
    **>
    method GET_ADCS_CONFIG
    {
    	out
    	{
    		CONFIG activeConfig
    		RESULT opResult
    	}
    }
    
    <** @description: Save the active ADCS configuration to NVM. THIS SHOULD ONLY BE DONE WHEN YOU ARE SURE THE CONFIG HAS GOOD PERFORMANCE.
     	@details: id = 0x00000010, esttc_id = X
    **>
    method SAVE_ADCS_CONFIG
    {
    	out
    	{
    		RESULT opResult
    	}
    }
    
    <** @description: Load the active ADCS configuration from NVM.
    @details: id = 0x00000011, esttc_id = X
    **>
    method LOAD_ADCS_CONFIG
    {
    	out
    	{
    		RESULT opResult
    	}
    }
}
