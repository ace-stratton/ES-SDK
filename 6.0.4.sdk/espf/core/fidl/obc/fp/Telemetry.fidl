package endurosat.pf

<** @description: OBC telemetry service control and configuration interface
    @details: id = 258
**>
interface Telemetry
{
    version { major 0 minor 1 }

    <** @description: Standard result enumeration which can be used in most situations as a return code **>
    enumeration StandardResult
    {
        SUCCESS,
        ERROR,
        INVALID_ARGS,
        NOT_SUPPORTED
    }

    <** @description: Increased-Hamming-distance-version of the regular boolean **>
    enumeration safe_bool
    {
        SAFE_FALSE = 0x00
        SAFE_TRUE = 0xFF
    }

    <** @description: Settings for the telemetry service stored in the nvm **>
    struct tlm_preset_cfg
    {
        <** @description: DataCache-specified identifier **>
        UInt16 data_id
        <** @description: A flag indicating whether the data_id is part of the telemtry collection for this preset **>
        Boolean active
        <** @description: data acquistion period from the DataCache in sec **>
        UInt16 acq_period
    }

    <** @description: Structure containing the values for the telemetry size limits **>
    struct tlm_file_size_limit_cfg
    {
        <** @description: Maximum size limit for all telemetry logged on the SD card **>
        UInt32 size_limit_kb
        <** @description: Number of individual files to split the log to **>
        UInt16 max_log_files_cnt
    }

    <** @description: Structure containing the values for the telemetry time limits **>
    struct tlm_file_time_limit_cfg
    {
        <** @description: Maximum number of seconds of recent telemetry data to keep in the storage **>
        UInt32 time_limit_sec
        <** @description: Maximum size of individual log files **>
        UInt16 file_size_limit_kb
    }

    <** @description: How to keep the logging files, time based or size based **>
    enumeration tlm_file_logging_type
    {
        SIZE_LIMIT
        TIME_LIMIT
    }

    <** @description: Active configuration for the telemetry service **>
    struct tlm_general_cfg
    {
        <** @description: Controls whether the telemetry logging is active. Telemetry sink mechanisms are separately controlled but
                          if this flag is set to SAFE_FALSE, all sinks will cease operation.
        **>
        safe_bool telemetry_en
        <** @description: Controls whether telemetry storage to files is active or not **>
        safe_bool file_telemetry_en
    }

    <** @description: Counters of relevant events from the telemetry service **>
    struct tlm_stats
    {
        <** @description: number of pushed messages since system boot **>
        UInt32 msg_pushed_cnt
        <** @description: number of popped messages since system boot **>
        UInt32 msg_popped_cnt
        <** @description: minimum value reached for the free space in the queue **>
        UInt32 free_bytes_min
        <** @description: number of discarded messages due to lack of space in the queue **>
        UInt32 discarded_messages_cnt
        <** @description: maximum number of messages processed in a batch on a single run **>
        UInt32 max_number_of_batch_msg
        <** @description: identifier of the active slot where telemetry is currently stored **>
        UInt32 active_slot_id
    }

    <** @description: Obtains the general Telemetry configuration settings
        @details: id = 0
    **>
    method getTelemetryGeneralConfig
    {
        out
        {
            tlm_general_cfg cfg
        }
    }

    <** @description: Used to update the general Telemetry configuration settings
        @details: id = 1
    **>
    method setTelemetryGeneralConfig
    {
        in
        {
            tlm_general_cfg cfg
        }
        out
        {
            StandardResult res
        }

    }

    <** @description: Obtains the Telemetry service slot assignment configuration
        @details: id = 2
    **>
    method getTelemetryPresetConfig
    {
        out
        {
            <** @description: Hard-coded number of Telemetry slot presets in the system **>
            UInt8 slot_preset_cnt
            <** @description: Hard-coded number of maximum Telemetry messages in the system **>
            UInt8 max_tlm_msg_cnt
            <** @description: Specifies the different slot preset assignments of telemetry identifiers.
                              Presets can be changed at run-time depending on different conditions.
                              The size below is chosen to match the configured size of the presets in the build
                              (4 presets by 10 DataCache entries each).
                @details: size = 40
            **>
            tlm_preset_cfg[] Telemetry_preset_cfg
        }
    }

    <** @description: Used to update the Telemetry service slot assignment configuration
        @details: id = 3
    **>
    method setTelemetryPresetConfig
    {
        in
        {
            <** @description: Specifies the different slot preset assignments of telemetry identifiers.
                              Presets can be changed at run-time depending on different conditions.
                              The size below is specified by calculating the number of slot presets slot_preset_cnt times
                              the maximum number of Telemetry messages max_bcn_msg_cnt in a single Telemetry sequence. This number
                              must match the number configured in the device firmware where this interface is
                              implemented. In this case, this is 4 presets consisting of 20 messages each.
                              The array is encoded as a 1D representation of a matrix where each row specifies all max_bcn_msg_cnt
                              message IDs for a single preset.
                @details: size = 40
            **>
            tlm_preset_cfg[] Telemetry_preset_cfg
        }
        out
        {
            StandardResult res
        }
    }

    <** @description: Request a change in the Telemetry active preset
        @details: id = 4
    **>
    method setActivePreset
    {
        in
        {
            <** @description: Preset ID to use for Telemetry transmission. It will be active until next reboot or until a call
                              to restoreActivePreset method is performed.
            **>
            UInt8 req_active_preset
        }
        out
        {
            StandardResult res
            <** @description: Number of presets available in the system **>
            UInt8 avail_presets_cnt
        }
    }

    <** @description: Provides the currently active preset id used for Telemetry transmission
        @details: id = 5
    **>
    method getActivePreset
    {
        out
        {
            UInt8 active_preset_id
        }
    }

    <** @description: Restores the active preset autonomous mode, e.g. calculated by ConOps.
        @details: id = 6
    **>
    method restoreActivePreset
    {
        out
        {
            StandardResult res
        }
    }

    <** @description: Provides all file-based telemetry configuration settings
        @details: id = 7
    **>
    method getTelemetryFileSinkConfig
    {
        out
        {
            tlm_file_logging_type active_file_cfg_type
            tlm_file_size_limit_cfg size_limit_cfg
            tlm_file_time_limit_cfg time_limit_cfg
        }
    }

    <** @description: Used to update the size-limit file telemetry configuration settings.
                      The configuration becomes active as soon as it is set unless an error is
                      returned.
        @details: id = 8
    **>
    method setTelemetryFileSzLimitConfig
    {
        in
        {
            tlm_file_size_limit_cfg size_limit_cfg
        }
        out
        {
            StandardResult res
        }
    }

    <** @description: Used to update the time-limit file telemetry configuration settings.
                      The configuration becomes active as soon as it is set unless an error is
                      returned.
        @details: id = 9
    **>
    method setTelemetryFileTmLimitConfig
    {
        in
        {
            tlm_file_time_limit_cfg time_limit_cfg
        }
        out
        {
            StandardResult res
        }
    }

    <** @description: Resumes operation of the file telemetry after a call to pauseFileTelemetry
        @details: id = 10
    **>
    method resumeFileTelemetry
    {
        out
        {
            StandardResult res
        }
    }

    <** @description: Pauses file telemetry until explicit activation with resumeFileTelemetry or system reboot. The operation
                      triggers closure of all active file handles and can be used to avoid changes in telemetry files, e.g. during
                      ground station download.
        @details: id = 11
    **>
    method pauseFileTelemetry
    {
        in
        {
            <** @description: Number of seconds before automatically resuming file telemetry. If 0, a system reboot or an explicit call to
                              the resumeFileTelemetry method shall be performed to reactivate file telemetry.
             **>
            UInt16 seconds_before_resume
        }
        out
        {
            StandardResult res
        }
    }

    <** @description: Cleans-up all accumulated telemetry files on the storage. Please use with care because the files cannot be restored
                      after this operation.
        @details: id = 12
    **>
    method cleanTelemetryFiles
    {
        out
        {
            StandardResult res
        }
    }

    <** @description: Provides the accummulated run-time statistics for the telemetry operation
        @details: id = 13
    **>
    method getTelemetryOperationStats
    {
        out
        {
            tlm_stats telemetry_stats
        }
    }
}
