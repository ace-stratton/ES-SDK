package endurosat.macif

<** @description: Concept of Operations control and configuration interface
    @details: id = 16 
**>

interface ConOps
{
    version { major 0 minor 2 }
    
    <** @description: Standard result enumeration which can be used in most situations as a return code **>
    enumeration StandardResult
    {
        <** @description: The operation finished successfully **>
        SUCCESS,
        <** @description: The operation failed **>
        ERROR,
        <** @description: One or more input arguments of the method are invalid **>
        INVALID_ARGS,
        <** @description: The operation is not supported by the firmware implementation **>
        NOT_SUPPORTED
    }
    
    <** @description: Increased-Hamming-distance-version of the regular boolean type. Used to represent regular boolean values.
    **>
    enumeration SafeBool
    {
        SAFE_FALSE = 0x00
        SAFE_TRUE = 0xFF
    }
    
    <** @description: The enumeration defines the different threshold types configurable for the ConOps feature **>
    enumeration ThresholdValueTypes
    {
        <** @description: Default threshold multiplier **> 
        DEFAULT = 0,
        <** @description: See ThresholdValues::cBattSafe **> 
        CBATT_SAFE = 1,
        <** @description: See ThresholdValues::sSafe **>
        S_SAFE,
        <** @description: See ThresholdValues::sDet **>
        S_DET,
        <** @description: See ThresholdValues::sPay **>
        S_PAY,
        <** @description: See ThresholdValues::angVelMax **>
        ANGVEL_MAX,
        <** @description: See ThresholdValues::angVelLow **>
        ANGVEL_MIN,
        <** @description: See ThresholdValues::angVelRange **>
        ANGVEL_RANGE
    }
    
    <** @description: Contains the threshold settings for the ConOps **>
    struct ThresholdValues
    {
        <** @description: Battery Capacity threshold in [mWh] for entrance into Safe Mode from any higher mode**>
        Int32 cBattSafe
        <** @description: Safety margin above Safe Mode after which the OBC can switch to IDLE mode, multiplier, ex. 1000 == 1.0 **>
        Int32 sSafe
        <** @description: Safety margin above Safe Mode after which the OBC can switch to Detumbling Mode, multiplier, ex. 1000 == 1.0 **>
        Int32 sDet
        <** @description: Safety margin above Safe Mode after which the OBC can switch to specific Payload Mode, multiplier, ex. 1000 == 1.0
            @details: size = 10 **>
        Int32[] sPay
        <** @description: Angular velocity in [mrad/s] after which the OBC can switch to Detumbling Mode, ex. 1200 == 1.2 rad/s **>
        Int32 angVelMax
        <** @description: Angular velocity in [mrad/s] after which the OBC can switch from Detumbling mode (normal detumbling) to Safe mode, ex. 1200 == 1.2 rad/s **>
        Int32 angVelLow
        <** @description: Angular velocity in [mrad/s]: Low < Yref < High, after which the OBC can switch from Detumbling mode (Y-Thomson) to Safe mode, ex. 1200 == 1.2 rad/s.
            @details: size = 2 **>
        Int32[] angVelRange
    }
    
    <** @description: Defines the set of supported ConOps modes in the system **>
    enumeration OpModes
    {
        STATE_SAFE = 1,
        STATE_IDLE,
        STATE_DETUMBLING,
        STATE_PAYLOAD,
        STATE_MAX
    }
    
    <** @description: Defines the set of supported ConOps state machine events **>
    enumeration Events
    {
        <** @description: Reset the state machine to its initial state **>
        RESET           = 0,
        <** @description: Standard periodic event **>
        PERIODIC        = 1,
   
        <** @description: Idle event **>
        IDLE            = 3,
        <** @description: Payload start event **>
        PAYLOAD_START   = 4,
        <** @description: Payload stop event **>
        PAYLOAD_STOP    = 5,
        <** @description: Used for range checking only **>
        EVENT_MAX
    }
    
    <** @description: Time/date structure **>
    struct Time 
    {
        <** @description: The number of years since 2000 **>
        Int32 year
        <** @description: Month, range 1 to 12 **>
        Int32 month
        <** @description: Day of the month, range 1 to 31 **>
        Int32 day
        <** @description: Hours, range 0 to 23 **>
        Int32 hour
        <** @description: Minutes, range 0 to 59 **>
        Int32 min
        <** @description: Seconds,  range 0 to 59 **>
        Int32 sec
    }
    
    <** @description: Geographic coordinates structure **>
    struct GeoCoord
    {
        <** @description: Longitude in degrees **>
        Float Lon
        <** @description: Latitude in degrees **>
        Float Lat
        <** @description: Altitude in meters **>
        Float Alt
    }
    
    <** @description: The structure defines the type of parameters used for desribing payload arguments **>
    struct PayloadArgs
    {
       <** @description: The interpretation of this field is dependent on the payload **>
       UInt8 flags
       <** @description: Payload arguments (some payloads use a file name on the on-board storage here to specify detailed configuration); interpretation depends on the payload.
           @details: size = 16 **>
       UInt8[] args
    }
    
    <** @description: The structure defines the parameters used for the ADCS pointing control for the payloads **>
    struct SchelAdcsCfg
    {   
        <** @description: Time needed for the ADCS to complete maneuvre in seconds **>
        UInt16 adcsPrepTime
        <** @description: ADCS mode **>
        UInt8  adcsMode
        <** @description: Target geo coordinates: lat, lon, alt **>
        GeoCoord adcsTargetRef
    }
        
    <** @description: Payload control parameters description **>
    struct PayCfg
    {
        <** @description: Payload ID - mission specific **>
        UInt8 payId
        <** @description: ADCS pointing parameters for a given payload command **> 
        SchelAdcsCfg adcsCfg
        <** @description: Payload-start-specific arguments **>
        PayloadArgs  args
    }
    
    <** @description: Send a new event to the ConOps State Machine 
      @details: id = 0x0000001
    **>
    method sendNewEvent
    {
    	in
    	{
            <** @description: State machine event types
            **>
    		Events eventType
    		<** @description: Payload control configuration parameters **>
            PayCfg eventPayCfg
    	}
    	out
    	{
    	    <** @description: Result of the operation **>
			StandardResult opResult
    	}
    }
    
    <** @description: Get the current operational mode number from the ConOps State Machine 
      @details: id = 0x0000002
    **>
    method getOpMode
    {
    	out
    	{
    	    <** @description: Currenly active operational mode **>
            OpModes        opModeNum 
            <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
    
    <** @description: Set a new value for a threshold type
      @details: id = 0x0000003
    **>
    method setThreshVal
    {
        in
        {
            <** @description: NOTE: Angular velocity values are of size int16, the rest are int32 **>
            Int32 threshValue
            <** @description: Used when the threshold type is set to payload. Set to 0 for other threshold types. Payloads number is currently limited to [0-9] **>
            UInt8 payloadNum
            ThresholdValueTypes thresholdType
        }
    	out
    	{ 
    	    <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
    
    <** @description: Get the current value for a threshold type
      @details: id = 0x0000004
    **>
    method getThreshVal
    {
        in
        {
            <** @description: Used when the threshold type is set to payload. Ignored otherwise. Payloads number is currently limited to 10 **>
            UInt8 payloadNum
            <** @description: Type of threshold setting to get **>
            ThresholdValueTypes thresholdType
        }
    	out
    	{   
    	    <** @description: Threshold value which is set in the system (units depend on the type of threshold specified) **>
            Int32 threshValue
            <** @description: Operation result code **>
			StandardResult opResult
    	}
    }

    <** @description: Update all threshold values
      @details: id = 0x0000005
    **>
    method setAllThreshVal
    {
        in
        {
            <** @description: Specifies threshold settings to update **>
            ThresholdValues threshVals
        }
    	out
    	{ 
    	    <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
    
    <** @description: Get all threshold values
      @details: id = 0x0000006
    **>
    method getAllThreshVal
    {
    	out
    	{ 
    	    <** @description: Contains the settings for all threshold values set in the system **>
            ThresholdValues threshVals
            <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
    
    <** @description: Add a new record in the payload schedule. This will succeed only if there is a free slot in the schedule.
      @details: id = 0x0000007
    **>
    method addNewScheduleRecord
    {
        in
        {   
            <** @description: Specifies the moment in time for the schedule entry to be executed **>
            Time    time
            <** @description: Specifies the payload ID to control with this schedule entry **>
            UInt8   payloadID
            <** @description: Duration of payload activation in seconds **>
            UInt16  duration
            <** @description: ADCS pointing configuration for the payload **>
            SchelAdcsCfg adcsCfg
            <** @description: Payload-specific arguments (if supported by the payload) **>
            PayloadArgs payArgs
        }
    	out
    	{
    	    <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
    
    <** @description: Clear all records from the payload schedule
      @details: id = 0x0000008
    **>
    method clearScheduleRecords
    {
    	out
    	{
    	    <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
    
    <** @description: Enable/Disable Sun-Tracking in IDLE mode. If this flag is not set the 
        platform will assume Nadir pointing as the default pointing mode in Idle ConOps mode.
      @details: id = 0x0000009
    **>
    method setEnableSunTrackingFlag
    {
        in
        {
            <** @description: True - sun tracking enabled in Idle mode; False - Nadir pointing enabled in Idle mode **>
            SafeBool enFlag
        }
    	out
    	{
    	    <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
    
    <** @description: Get the status of the Sun-Tracking in IDLE mode flag.
      @details: id = 0x000000A
    **>
    method getEnableSunTrackingFlag
    {
    	out
    	{
    	    <** @description: True - sun tracking enabled in Idle mode; False - Nadir pointing enabled in Idle mode **>
            SafeBool enFlag
            <** @description: Operation result code **>
			StandardResult opResult
    	}
    }
}
    