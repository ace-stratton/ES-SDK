package endurosat.macif

<** @description: CubeADCS Gen 1 protocol as part of the Onboard Computer 
    @details: id = 17 
**>
interface OBC_CUBEADCS
{
    version { major 1 minor 1 }
    
    enumeration StandardResult
    {
        SUCCESS,
        ERROR,
        INVALID_ARGS,
        NOT_SUPPORTED
    }
    
    enumeration SafeBool
    {
        FALSE = 0,
        TRUE = 255 
    }
    
    enumeration CommissioningStatus
    {
        STEP_00_NONE
        STEP_01_INITIAL_ANG_RATE_EST
        STEP_02_DETUMBLING
        STEP_03_MAG_DEPLOYMENT
        STEP_04_MAG_CALIBRATION
        STEP_05_ANG_RATE_AND_PITCH_RATE_EST
        STEP_06_Y_WHEEL_RAMP_UP_TEST
        STEP_07_Y_MOMENTUM_MODE_COMMISSIONING
        STEP_08_SUN_NADIR_COMMISSIONING
        STEP_09_CUBESTAR_COMMISSIONING
        STEP_10_WHEELS_COMMISSIONING
        STEP_11_SUN_TRACKING
        STEP_12_GROUND_TRACKING
        STEP_NUMBER
    }
    
    <** @description: Communication statuses between OBC and CubeADCS 
		COMM_OK      		- Successful communication, no errors
		COMM_ERR 	 		- Unsuccessful communication, unspecified error
		COMM_CMD_ERR 		- Requested command ID not found in the list of known CubeADCS commands
		COMM_LEN_WRT_ERR  	- Expected vs given TC command data size mismatch  
		COMM_LEN_READ_ERR 	- Expected vs received TC/TLM command data size mismatch
		COMM_RX_TIMEOUT		- Timeout while receiving command request response
		COMM_TX_TOMEUT		- Command rquest timeout on the commmunication channel (UART, I2C or CAN)
		COMM_COMM_ERR		- Error while receiving command request reply (wrong start/end sequence, etc.) 
		COMM_INV_DATA		- Received correct number of bytes but command ID in header is mismatch
	 **>
    enumeration CommStatus
   	{
   		COMM_OK        
		COMM_ERR      
		COMM_CMD_ERR    
		COMM_LEN_WRT_ERR 
		COMM_LEN_READ_ERR
		COMM_RX_TIMEOUT
		COMM_TX_TIMEOUT
		COMM_COMM_ERR
		COMM_INV_DATA
   	}
   	
   	enumeration FwMode
    {
    	APPLICATION	= 0x0A
		BOOTLOADER  = 0x6E
   	}
   	
   	enumeration FileTypes
    {
    	TLM_LOG = 2
    	JPG_IMG = 3
    	BMP_IMG = 4
    	INDEX   = 15
    }
    
    enumeration FTransfStatus
    {
    	DONE
    	ERR
    	ERR_CRC
    	ERR_SDCARD
    	BUSY
		STOPPED
    }
    
    <** @description: Bit-masks for the CubeADCS RunTimeLatchedError flags **>
    enumeration RunTimeLatchedErrFlags
    {
    	NODERECOVERY_ERR		= 0x01
    	RANGE_ERR				= 0x02
    	RATESENSORFAILURE_ERR	= 0x04
    	MAGNETOMETER_ERR		= 0x08
		ORBITPARAMS_ERR			= 0x10
    	CONFIGINVALID_ERR		= 0x20
    	CNTRLMODECHG_ERR		= 0x40
    	ESTMODECHG_ERR			= 0x80
		SYSSTATE_ERR			= 0x100
		RESERVEDD_ERR			= 0x200
   	}
   	   	
   	<** @description: Bit-masks for TLM135 **>
    enumeration TLM135_ACP_STATE
    {
    	ADCS_CONFIG_LOAD_ERR 	= 0x01 
    	ORBIT_PARAM_LOAD_ERR 	= 0x02
    	SYS_CONFIG_LOAD_ERR	 	= 0x04
    	RES						= 0xF8
   	}
   	
   	<** @description: Bit-masks for TLM132_Boot **>
    enumeration TLM132_Boot_Flags
    {
        SRAM1_EN 		= 0x0001
        SRAM2_EN 		= 0x0002
        SRAM_LUP_ERR 	= 0x0004
        SRAM_LUP_REC 	= 0x0008
        SD_CARD_ERR	 	= 0x0010
        EXT_FLASH_ERR 	= 0x0020
        INT_FLASH_ERR 	= 0x0040
        EEPROM_ERR 		= 0x0080
        BOOT_REG_ERR 	= 0x0100
        COMM_RADIO_ERR 	= 0x0200
        RES				= 0xFC00
    }
   	
   	    <** @description: Bit-masks for TLM132_App , Byte 0 **>
    enumeration TLM132_App_Byte0
    {
    	ATT_EST_MODE	= 0x0F
    	CONTROL_MODE	= 0xF0
    }
    
    <** @description: Bit-masks for TLM132_App , Byte 1 **>
    enumeration TLM132_App_Byte1
    {
    	ADCS_RUN_MODE			= 0x03
    	ASGP4_MODE				= 0x0C
    	CUBECONTROL_SIGNAL_EN	= 0x10
    	CUBECONTROL_MOTOR_EN	= 0x20
    	CUBESENSE1_EN			= 0x40
    	CUBESENSE2_EN			= 0x80
    }
    
    <** @description: Bit-masks for TLM132_App , Byte 2 **>
    enumeration TLM132_App_Byte2
    {
    	CUBEWHEEL1_EN	    = 0x01
    	CUBEWHEEL2_EN	    = 0x02
    	CUBEWHEEL3_EN	    = 0x04
    	CUBESTAR_EN		    = 0x08
    	GPS_RX_EN		    = 0x10
    	GPS_LNA_EN		    = 0x20
    	MOTOR_DRV_EN		= 0x40
    	SUN_ABOVE_HORIZON	= 0x80
    }
    
    <** @description: Bit-masks for the TLM132_App , Byte 3 **>
    enumeration TLM132_App_Byte3
    {
    	CUBESENSE1_COMM_ERR 	=  0x01
    	CUBESENSE2_COMM_ERR 	=  0x02
    	CUBECONTROL_COMM_ERR 	=  0x04
    	CUBEMOTOR_COMM_ERR 		=  0x08
    	CUBEWHEEL1_COMM_ERR 	=  0x10
    	CUBEWHEEL2_COMM_ERR 	=  0x20
    	CUBEWHEEL3_COMM_ERR 	=  0x40
    	CUBESTAR_COMM_ERR		=  0x80
    }
    
    <** @description: Bit-masks for TLM132_App , Byte 4 **>
    enumeration TLM132_App_Byte4
    {
    	MAG_RANGE_ERR			= 0x01
    	CAM1_SRAM_OVERCURRENT 	= 0x02
    	CAM1_3V3_OVERCURRENT 	= 0x04
    	CAM1_BUSY_ERR 			= 0x08
    	CAM1_DETECT_ERR			= 0x10
    	SUN_DETECTION_ERR 		= 0x20
    	CAM2_SRAM_OVERCURRENT 	= 0x40
    	CAM2_3V3_OVERCURRENT	= 0x80
    }
    
    <** @description: Bit-masks for TLM132_App , Byte 5 **>
    enumeration TLM132_App_Byte5
    {
    	CAM2_BUSY_ERR 			= 0x01
    	CAM2_DETECT_ERR 		= 0x02
    	NADIR_RANGE_ERR 		= 0x04
    	RATE_RANGE_ERR 			= 0x08
    	WHEEL_SPEED_RANGE_ERR 	= 0x10
    	COARSE_SUN_RANGE_ERR 	= 0x20
    	STAR_MATCH_ERR 			= 0x40
    	STAR_OVERCURRENT 		= 0x80
    }
    
    <** @description: Bit-masks for TLM224, Byte 0 **>
    enumeration TLM224_Byte0
    {
    	ORBITPARAM_INVALID 	= 0x01
    	CONFIG_INVALID		= 0x02
    	CNTRLMODECHG_X		= 0x04
    	EST_CHG_X			= 0x08
    	MGNTMR_SAMPLE_MODE	= 0x30
    	DIFF_MAGNETIC_FIELD	= 0x40
    	NODE_RECOVERY_ERR	= 0x80
   	}
   	
   	<** @description: Bit-masks for TLM224, Byte 1 **>
    enumeration TLM224_Byte1
    {
    	CUBESENSE1_ERR			= 0x01
    	CUBESENSE2_ERR			= 0x02
    	CUBECONTROLSIGNAL_ERR   = 0x04
    	CUBECONTROLMOTOR_ERR    = 0x08
    	CUBEWHEEL1_ERR          = 0x10
    	CUBEWHEEL2_ERR          = 0x20
    	CUBEWHEEL3_ERR          = 0x40
    	CUBESTAR_ERR            = 0x80
   	}
   	
   	<** @description: Bit-masks for TLM224, Byte 2 **>
    enumeration TLM224_Byte2
    {
    	MAGNETOMETER_ERR	= 0x01
    	RATESENSOR_ERR		= 0x02
    	RES		            = 0xFC
   	}
    
    enumeration ADCSSysStates
    {
        PWR_UP
        NORMAL_DETUMBLING
        Y_THOMSON
        Y_THOMSON_MEMS_RATE
        FAST_DETUMB
        VERY_FAST_DETUMB
        Y_MOMENTUM
        Y_MOMENTUM_FULL_STATE
        THREE_AXIS
        SUN_TRACKING
        TARGET_TRACKING
        NO_CONTROL
        ATTITUDE_CHANGE
        ORBITAL_CHANGE
		GEO_TARGET_TRACKING
    }
	
	enumeration PROGRAM_Index
    {
		INT_FLASH_PROG = 0x01
		BOOTLOADER	   = 0x02
    }
    
    enumeration BOOT_Status
    {
		NEW_SELECTION = 0x00
		BOOT_SUCCESS  = 0x01
		FAILED_BOOT_1 = 0x02
		FAILED_BOOT_2 = 0x03
		FAILED_BOOT_3 = 0x04
    }
	
	<** @description: Bit-masks for the CubeADCS faulty node flags **>
    enumeration FaultyNodeFlags
    {
    	SIGNAL_MCU	= 0x01
    	MOTOR_MCU	= 0x02
    	CUBESENSE_1	= 0x04
    	CUBESENSE_2	= 0x08
		CUBESTAR	= 0x10
    	WHEEL_1		= 0x20
    	WHEEL_2		= 0x40
    	WHEEL_3		= 0x80
   	}
   		enumeration CUBE_ADCS_TC_13_Control_Mode
	{
		CUBE_ADCS_TC_13_CONTROLMODE_NO_CNTRL
		CUBE_ADCS_TC_13_CONTROLMODE_DETUMB_CNTRL
		CUBE_ADCS_TC_13_CONTROLMODE_Y_THOMPSON
		CUBE_ADCS_TC_13_CONTROLMODE_Y_WHEEL_INITIAL
		CUBE_ADCS_TC_13_CONTROLMODE_Y_WHEEL_STEADY
		CUBE_ADCS_TC_13_CONTROLMODE_XYZ_WHEEL_CNTRL
		CUBE_ADCS_TC_13_CONTROLMODE_RWHEEL_SUN_TRACKING
		CUBE_ADCS_TC_13_CONTROLMODE_RWHEEL_TARGET_TRACKING
		CUBE_ADCS_TC_13_CONTROLMODE_VERY_FAST_SPIN_DETUMB
		CUBE_ADCS_TC_13_CONTROLMODE_FAST_SPIN_DETUMB
		CUBE_ADCS_TC_13_CONTROLMODE_USER_MODE_1
		CUBE_ADCS_TC_13_CONTROLMODE_USER_MODE_2
		CUBE_ADCS_TC_13_CONTROLMODE_STOP_R_WHEELS
		CUBE_ADCS_TC_13_CONTROLMODE_USER_CODED_MODE
		CUBE_ADCS_TC_13_CONTROLMODE_SUN_TRACKING_YAW_OR_ROLL_ONLY
		CUBE_ADCS_TC_13_CONTROLMODE_TARGET_TRACKING_YAW_ONLY
	}
	
	enumeration CUBE_ADCS_TC_14_Estimation_Mode
	{
		CUBE_ADCS_TC_14_ESTIMATIONMODE_NO_EST
		CUBE_ADCS_TC_14_ESTIMATIONMODE_MEMS_RATE_SENS
		CUBE_ADCS_TC_14_ESTIMATIONMODE_MTM_RATE_FILT
		CUBE_ADCS_TC_14_ESTIMATIONMODE_MTM_RATE_FILT_WITH_PITCH
		CUBE_ADCS_TC_14_ESTIMATIONMODE_MTM_FINE_SUN_TRIAD
		CUBE_ADCS_TC_14_ESTIMATIONMODE_FULL_EKF
		CUBE_ADCS_TC_14_ESTIMATIONMODE_MEMS_GYRO_EKF
		CUBE_ADCS_TC_14_ESTIMATIONMODE_USR_CODED
	}
	
	enumeration CUBE_ADCS_TC_10_Run_Mode
	{
		CUBE_ADCS_TC10_RUNMODE_OFF
		CUBE_ADCS_TC10_RUNMODE_ENABLED
		CUBE_ADCS_TC10_RUNMODE_TRIGGERED
		CUBE_ADCS_TC10_RUNMODE_SIMULATION
	}
	
	enumeration power_switch
	{
		OFF = 0x00
		ON  = 0x01
	}
	
	struct CUBE_ADCS_CfgNodePwr
	{
		power_switch CubeControl_Signal
		power_switch CubeControl_Motor
		power_switch CubeSense1
		power_switch CubeSense2
		power_switch CubeStar
		power_switch CubeWheel1
		power_switch CubeWheel2
		power_switch CubeWheel3
		power_switch MotorPwr
		power_switch GPSPwr
	}
	
	struct CubeADCS_Cfg
	{
		<** @description: Different types of the adcs state **>
		ADCSSysStates 					CfgType
		<** @description: Configuration for powering the different nodes  for this particullar state **>
		CUBE_ADCS_CfgNodePwr 			NodePwrMask
		<** @description: Controll mode of this particullar state **>
		CUBE_ADCS_TC_13_Control_Mode	CntrlMask
		<** @description: Estimation mode of this particullar state **>
		CUBE_ADCS_TC_14_Estimation_Mode EstMode
		<** @description: Run mode of this particullar state **>
		CUBE_ADCS_TC_10_Run_Mode		RunMask
		<** @description: ADCS Control feedback parameter **>
		UInt8 							AdditionalLogic
	}
   
    struct TLMDataFormat
    {
    	UInt8	TLM_ID
    	<** @description: Supports all CubeADCS TLM requests except ID 206 - ADCS Configuration
    		@details: size = 173 **>
    	UInt8[]	TLM_Data
    }
    
    struct TLMReqReply
    {
		TLMDataFormat TLM_Rply_Data
    	UInt16	TLM_Rply_Len
    }
    
    struct TCReq
    {
    	UInt8 	TC_ID
    	<** @description: Supports all CubeADCS TCs except ID 20 - ADCS Configuration
    		@details: size = 173 **>
    	UInt8[]	TC_Data
    	UInt16	TC_Data_Len
    }
    
    struct TCDataFormat
    {
    	UInt8 	TC_ID
    	UInt8	TC_Err_flags
    }
    
    struct TCReqReply
    {
		TCDataFormat TCData
    	UInt16	TC_Rply_Len
    }
    
    struct CubeADCS_TLM128
    {
    	UInt8	CmdID
    	UInt8	NodeType
    	UInt8	InterfaceVersion
    	UInt8	MajorFirmwareVersion
    	UInt8	MinorFirmwareVersion
    	UInt16	RuntimeSeconds
    	UInt16	RuntimeMiliseconds
    }
    
    struct TLM132_Boot
    {
    	UInt8	CmdID
    	UInt16	UpTime
    	<** @description: Bit-field, mapping corresponds to enum TLM132_Boot **>
    	UInt16	Flags
    	UInt16	Res
    }

    struct TLM132_App
    {
    	UInt8	CmdID
    	<** @description: Bit-field, mapping corresponds to enum TLM132_App_Byte0 **>
    	UInt8	Byte0
    	<** @description: Bit-field, mapping corresponds to enum TLM132_App_Byte1 **>
    	UInt8	Byte1
    	<** @description: Bit-field, mapping corresponds to enum TLM132_App_Byte2 **>
    	UInt8	Byte2
    	<** @description: Bit-field, mapping corresponds to enum TLM132_App_Byte3 **>
    	UInt8	Byte3
    	<** @description: Bit-field, mapping corresponds to enum TLM132_App_Byte4 **>
    	UInt8	Byte4
    	<** @description: Bit-field, mapping corresponds to enum TLM132_App_Byte5 **>
    	UInt8	Byte5
    }
    
    struct TLM135
    {
    	UInt8	CmdID
    	<** @description: Bit-field, mapping corresponds to TLM135_ACP_STATE **>
    	UInt8	ACPState
    }
    
    struct TLM168
    {
    	UInt8	CmdID
    	UInt8	CCS1
    	UInt8	CCS2
    	UInt8	CCS3
    	UInt8	CCS4
    	UInt8	CCS5
    	UInt8	CCS6
    	
    }
    
    struct TLM169
    {
    	UInt8	CmdID
    	UInt8	CCS7
    	UInt8	CCS8
    	UInt8	CCS9
    	UInt8	CCS10
    	UInt16	Res
    }
    
    struct TLM224
    {
    	UInt8	CmdID
    	<** @description: Bit-field, mapping corresponds to enum TLM1224_Byte0 **>
    	UInt8	Byte0
    	<** @description: Bit-field, mapping corresponds to enum TLM224_Byte1 **>
    	UInt8	Byte1
    	<** @description: Bit-field, mapping corresponds to enum TLM224_Byte2 **>
    	UInt8	Byte2
    	UInt8	Byte3
    	UInt8	Byte4
    	UInt8	Byte5
    }
	
	<** @description: CubeADCS TLM129 as per the Firmware Reference Manual **>
	struct TLM129
	{
		UInt8	CmdID
		UInt8 	ResetAndBoot
		UInt16 	BootCnt
		UInt8 	BootProgIndx
		UInt8 	FWVersionMajor
		UInt8 	FWVersionMinor
	}
	
	<** @description: CubeADCS TLM130 as per the Firmware Reference Manual **>
	struct TLM130
	{
		UInt8	CmdID
		PROGRAM_Index ProgramIndex
		BOOT_Status BootStatus
	}
    
    <** @description: Holds ACP state and ADCS state telemetry frames **>
   	struct State
   	{
   		TLM135 	    ACPState
   		<** @description: State can be the boot state as well, this has to be handled by the client **>
   		TLM132_App  ADCSState
   		TLM224 		ADCSState2
		TLM129		BootStatus	
		TLM130		ProgStatus
   	}
   	
   	struct HCheckCommStatus
   	{
   		CommStatus TLM128
   		CommStatus TLM130
   		CommStatus TLM132
   		CommStatus TLM135
   		CommStatus TLM224
   		CommStatus TLM197
   	}
   	
   	<** @description: Holds the status of the CubeADCS as stored in the OBC **>
   	struct Status
   	{
   		CommissioningStatus Commissioning
   		UInt8	NodeStatus
   		UInt16   RunTimeLatchedErrors
   		HCheckCommStatus HCheclComm
   	}

	<** @description: Holds the operational status of the CubeADCS **>
    struct OpStatus
    {
    	FwMode   	Mode
    	State  		State
    	Status 		Status
    	CommStatus 	Comm	
    }

    struct FTransfer_FInfo
    {
    	FileTypes	FType
    	UInt8       Counter
    	UInt16		Crc16
    	UInt32      FileSize
    }
   
    struct cntrsRange
    {
    	UInt8 baseCntr
    	UInt8 topCntr
    }
    
    struct LibVersion
    {
        UInt8 majVer
        UInt8 minVer
        UInt8 patchVer
    }
    
    struct UnixTime
    {
        UInt32 currentUnixTime
        UInt16 milliseconds
    }
	
	struct ErrCounters
	{
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_OK
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_ERR
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_CMD_ERR
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_LEN_WRT_ERR
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_LEN_READ_ERR
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_RX_TIMEOUT
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_TX_TIMEOUT
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_COMM_ERR
		<** @description: Communication request (OBC <-> CubeADCS) replies counters **>
		UInt16 COMM_INV_DATA

		<** @description: TLM 132 - ACP **>
		UInt16 CUBESENSE1_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CUBESENSE2_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CUBECONTROL_SIGNAL_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CUBECONTROL_MOTOR_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CUBEWHEEL1_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CUBEWHEEL2_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CUBEWHEEL3_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CUBESTAR_COMM_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 MAGMETER_RANGE_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CAM1_SRAM_OVERCURRENT_DET
		<** @description: TLM 132 - ACP **>
		UInt16 CAM1_3V3_OVERCURRENT_DET
		<** @description: TLM 132 - ACP **>
		UInt16 CAM1_SENSOR_BUSY_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CAM1_SENSOR_DET_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 SUN_SENSOR_RANGE_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CAM2_SRAM_OVERCURRENT_DET
		<** @description: TLM 132 - ACP **>
		UInt16 CAM2_3V3_OVERCURRENT_DET
		<** @description: TLM 132 - ACP **>
		UInt16 CAM2_SENSOR_BUSY_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CAM2_SENSOR_DET_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 NADIR_SENSOR_RANGE_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 RATE_SENSOR_RANGE_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 WHEEL_SPEED_RANGE_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 CSS_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 STARTRACKER_MATCH_ERR
		<** @description: TLM 132 - ACP **>
		UInt16 STARTRACKER_OVERCURRENT_DET
		
		<** @description: TLM 132 - Bootloader **>
		UInt16 SRAM_LUP_ERR
		<** @description: TLM 132 - Bootloader **>			
		UInt16 SRAM_LUP_ERR_REC
		<** @description: TLM 132 - Bootloader **>
		UInt16 SD_CARD_INIT_ERR
		<** @description: TLM 132 - Bootloader **>
		UInt16 SD_CARD_READ_ERR
		<** @description: TLM 132 - Bootloader **>
		UInt16 SD_CARD_WRT_ERR 
		<** @description: TLM 132 - Bootloader **>
		UInt16 EXT_FLASH_ERR
		<** @description: TLM 132 - Bootloader **>
		UInt16 INT_FLASH_ERR
		<** @description: TLM 132 - Bootloader **>
		UInt16 EEPROM_ERR
		<** @description: TLM 132 - Bootloader **>
		UInt16 BOOT_REG_ERR
		<** @description: TLM 132 - Bootloader **>
		UInt16 COMM_RADIO_ERR
		
		<** @description: TLM 135 **>
		UInt16 ADCS_CONFIG_LOAD_ERR
		<** @description: TLM 135 **>
		UInt16 ORBIT_PARAM_LOAD_ERR
		<** @description: TLM 135 **>
		UInt16 SYS_CONFIG_LOAD_ERR
		
		<** @description: TLM 224 **>
		UInt16 ORBIT_PARAM_INVALID_ERR
		<** @description: TLM 224 **>
		UInt16 CONFIG_INVALID_ERR
		<** @description: TLM 224 **>
		UInt16 CNTRL_MODE_CHG_INV_ERR
		<** @description: TLM 224 **>
		UInt16 EST_CHG_INV_ERR
		<** @description: TLM 224 **>
		UInt16 MAGNETIC_FIELD_DIFF_ERR
		<** @description: TLM 224 **>
		UInt16 NODE_RECOVERY_ERR
		<** @description: TLM 224 **>
		UInt16 CUBESENSE1_RUNTIME_ERR
		<** @description: TLM 224 **>
		UInt16 CUBESENSE2_RUNTIME_ERR
		<** @description: TLM 224 **>
		UInt16 CUBECONTROL_SIGNAL_RUNTIME_ERR
		<** @description: TLM 224 **>
		UInt16 CUBECONTROL_MOTOR_RUNTIME_ERR 
		<** @description: TLM 224 **>
		UInt16 CUBEWHEEL1_RUNTIME_ERR
		<** @description: TLM 224 **>
		UInt16 CUBEWHEEL2_RUNTIME_ERR
		<** @description: TLM 224 **>
		UInt16 CUBEWHEEL3_RUNTIME_ERR
		<** @description: TLM 224 **>
		UInt16 CUBESTAR_RUNTIME_ERR
		<** @description: TLM 224 **>
		UInt16 MAGNETOMETER_ERR
		<** @description: TLM 224 **>
		UInt16 RATE_SENSOR_FAILURE_ERR
	}
	
	<** @description: Check A.4 ACP Interface Version 7 from the Commissioning Manual for more information **>
	struct FDIRCounters
	{
		UInt8 NODE_RECOVERY_ERR
		UInt8 MAGMETER_RANGE_ERR
		UInt8 CAM1_SRAM_OVERCURRENT_DET
		UInt8 CAM1_3V3_OVERCURRENT_DET
		UInt8 CAM2_SRAM_OVERCURRENT_DET
		UInt8 CAM2_3V3_OVERCURRENT_DET
		UInt8 STARTRACKER_OVERCURRENT_DET
		UInt8 MAGNETOMETER_ERR
		UInt8 CAM1_SENSOR_BUSY_ERR
		UInt8 CAM2_SENSOR_BUSY_ERR
		UInt8 RATE_SENSOR_RANGE_ERR
		UInt8 WHEEL_SPEED_RANGE_ERR
		UInt8 RATE_SENSOR_FAILURE_ERR
		UInt8 ORBIT_PARAM_INVALID_ERR
		UInt8 CONFIG_INVALID_ERR
		UInt8 CNTRL_MODE_CHG_INV_ERR
		UInt8 EST_CHG_INV_ERR
	}
    
    <** @description: Obtains the CubeADCS commissioning status
        @details: id = 0x00000003
    **>
    method getCommissioningStatus
    {
        out
        {
            CommissioningStatus status
            StandardResult opResult
        }
    }
    
    <** @description: Sets the CubeADCS commissioning status to a new value  
        @details: id = 0x00000004
    **>
    method setCommissioningStatus
    {
    	in
    	{
    		CommissioningStatus status
    	}
        out
        {
            StandardResult opResult 
        }
    }
    
    <** @description: Generic request for TLM by TLM_ID from CubeADCS 
     	@details: id = 0x00000005
    **>
    method getGenericTLM
    {
    	in
    	{
    		UInt8 TLMID
    	}
    	out
    	{
    		TLMReqReply		TLMReq_Reply
    		StandardResult  opResult
    	}
    }
    
    <** @description: Generic TC command by TC_ID with data to the CubeADCS 
     	@details: id = 0x00000006
    **>
    method sendGenericTC
    {
    	in
    	{
    		TCReq TCReq_Data
    	}
    	out
    	{
			TCReqReply TCReq_Reply
    		StandardResult  opResult
    	}
    }
    
    <** @description: Get the last operational status of CubeADCS that was read and stored in the OBC  
        @details: id = 0x00000007
    **>
    method getOpStatus
    {
        out
        {
        	OpStatus opStatus
            StandardResult opResult 
        }
    }
    
    <** @description: Reset the CubeADCS and enter requested mode - Bootloader or ACP
     	@details: id = 0x00000008
    **>
    method reset
    {
    	in
    	{
    		FwMode mode
    	}
    	out
    	{
    		StandardResult  opResult
    	}
    }
    
    <** @description: Clear Latched-up error flags in the CubeADCS
     	@details: id = 0x00000009
    **>
    method clrErrFlags
    {
    	out
    	{
    		StandardResult  opResult
    	}
    }
    
    <** @description: Start a file transfer between the CubeComputer and the OBC
        @details: id = 0x0000000A
    **>
    method startFileTransfer
    {
        in
        {
            FTransfer_FInfo FileInfo
        }
        out
        {
            StandardResult  opResult
        }
    }
    
    <** @description: Poll file transfer status between the CubeComputer and the OBC
        @details: id = 0x0000000B
    **>
    method pollFileTransferStatus
    {
        out
        {
        	FTransfStatus 		status 
            StandardResult  	opResult
        }
    }

    <** @description: Clear CubeADCS runtime latched errors as stored in the OBC
    @details: id = 0x00000011
    **>
    method clearRunTimeLatchedErrs
    {
        out
        {
        	StandardResult  opResult
        }
    }
    
    <** @description: Clear the CubeADCS faulty node status
    @details: id = 0x00000013
    **>
    method clearFaultyNodeStatus
    {
        out
        {
        	StandardResult  opResult
        }
    }
    
    <** @description: Start file list download between the CubeComputer and the OBC
        @details: id = 0x00000014
    **>
    method startFileListDownload
    {
        in
        {
        }
        out
        {
            StandardResult  opResult
        }
    }
    
    <** @description: Poll file list download status between the CubeComputer and the OBC
        @details: id = 0x00000015
    **>
    method pollFileListDownloadStatus
    {
        out
        {
        	FTransfStatus 		status 
            StandardResult  	opResult
        }
    }
    
    <** @description: Get the current ADCS System State
        @details: id = 0x00000016
    **>
    method getADCSSysState
    {
        out
        {
        	ADCSSysStates   sysState
            StandardResult  opResult
        }
    }
    
    <** @description: Set a new ADCS System State
        @details: id = 0x00000017
    **>
    method setADCSSysState
    {
        in
        {
            ADCSSysStates   sysState
        }
        out
        {
            StandardResult  opResult
        }
    }
    
    <** @description: Get the ADCS Subsystem UNIX time
        @details: id = 0x00000018
    **>
    method getADCSUnixTime
    {
        out
        {
            UnixTime        unixTime
            StandardResult  opResult
        }
    }
    
    <** @description: Update the ADCS Subsystem UNIX time. This functions updates the ADCS Unix time based on the OBC RTC time 
        @details: id = 0x00000019
    **>
    method updateADCSUnixTime
    {
        out
        {
            StandardResult  opResult
        }
    }
    
    <** @description: Enable/Disable the automatic error handling logic
        @details: id = 0x0000001A
    **>
    method setEnableErrHandlLogic
    {
        in
        {
            SafeBool enFlag
        }
        out
        {
            StandardResult  opResult
        }
    }
    
    <** @description: Get the status of the automatic error handling logic flag
        @details: id = 0x000001B
    **>
    method getEnableErrHandlLogic
    {
    	out
    	{
            SafeBool enFlag
			StandardResult opResult
    	}
    }

    <** @description: Set the angle and angle rate thresholds for stable pointing
        @details: id = 0x0000001C
    **>
    method setStablePointingThresholds
    {
        in
        {
			<** @description: Value is in [deg]**>
            Double stablePointingThresholdAngle
			<** @description: Value is in [deg/s]**>
			Double stablePointingThresholdAngleRate
        }
        out
        {
            StandardResult  opResult
        }
    }
	
    <** @description: Get the angle and angle rate thresholds for stable pointing
        @details: id = 0x000001D
    **>
    method getStablePointingThresholds
    {
    	out
    	{
			<** @description: Value is in [deg]**>
            Double stablePointingThresholdAngle
			<** @description: Value is in [deg/s]**>
			Double stablePointingThresholdAngleRate
			StandardResult opResult
    	}
    }
	
	<** @description: Set CubeADCS simulation mode
        @details: id = 0x000001E
    **>
    method setSimulationMode
    {
		in
		{
			<** @description: Simulation mode value, to enable set it to 255 **>
			SafeBool en_sim_mode
		}
    	out
    	{
			StandardResult opResult
    	}
    }
	
	<** @description: Get CubeADCS simulation mode
        @details: id = 0x000001F
    **>
    method getSimulationModeValue
    {
    	out
    	{
			<** @description: Simulation mode value **>
			SafeBool en_sim_mode
			StandardResult opResult
    	}
    }
	
	<** @description: Get communication and error counters as tracked by the OBC. These counters are stored in RAM and will be cleared after reset.
        @details: id = 0x00000020
    **>
    method getOBCCommAndErrCounters
    {
        out
        {
			ErrCounters counters
            StandardResult opResult
        }
    }
	
	<** @description: Clear communication and error counters as tracked by the OBC. The user can define the range of counters to clear (0x00 - 0x3E).
        @details: id = 0x00000021
    **>
    method clrOBCCommAndErrCounters
    {
    	in
    	{
    		cntrsRange range
    	}
        out
        { 
            StandardResult opResult
        }
    }

    <** @description: Get the FDIR counters counting the number of errors detected and handling logic activated as tracked by the OBC. These counters are stored in RAM and will cleared after reset.
        @details: id = 0x00000022
    **>
    method getFDIRCouners
    {
        out
        { 
        	FDIRCounters	counters
            StandardResult  opResult
        }
    }
	
	<** @description: Clear the FDIR counters. The user can define the range of counters to clear (0x00 - 0x11).
        @details: id = 0x00000023
    **>
    method clrFDIRCounters
    {
        in
    	{
			cntrsRange range
    	}
        out
        { 
            StandardResult opResult
        }
    }
	
	<** @description: Stop an ongoing file transfer - download to OBC or upload to CubeADCS.
		When a stop is requested during a file download, the stop will be executed after the current block transfer is completed.
		If all blocks have been transferred and the file CRC check is ongoing, the stop will not accepted.
        @details: id = 0x00000024
    **>
    method stopFileTransfer
    {
        out
        { 
            StandardResult opResult
        }
    }
	
	<** @description: Read CubeADCS runtime latched errors as stored in the OBC
    	@details: id = 0x00000025
    **>
    method getRunTimeLatchedErrs
    {
        out
        {
        	Boolean 		NodeRecoveryErr
			Boolean 		RangeErr
			Boolean 		RateSensFailure
			Boolean 		MagnetometerErr
			Boolean 		OrbitParamsErr
			Boolean 		ConfigInvalid
			Boolean 		CntrlModeChgErr
			Boolean 		EstModeChgErr
			Boolean 		SysStateChgErr
			UInt8 			Reserved
			
        	StandardResult  opResult
        }
    }
	
	<** @description: Read the CubeADCS faulty nodes
    @details: id = 0x00000026
    **>
    method getFaultyNodeStatus
    {
        out
        {
        	Boolean     	SignalMCU
			Boolean     	MotorMCU
			Boolean     	CubeSense1
			Boolean     	CubeSense2
			Boolean     	CubeStar
			Boolean     	RWheel1
			Boolean     	RWheel2
			Boolean     	RWheel3
        	StandardResult  opResult
        }
    }
    <** @description: Set CubeADCS system state configuration 
		@details: id = 0x0000027
    **>
    method setSystemStateCfg
    {
		in
		{
			<** @description: System state configuration 
			@details: size = 15 **>
			CubeADCS_Cfg[] CubeADCS_sys_state_cfg
		}
    	out
    	{
			StandardResult opResult
    	}
    }
	
	<** @description: Get CubeADCS system state configuration
	@details: id = 0x0000028
    **>
    method getSystemStateCfg
    {
    	out
    	{
			<** @description: System state configuration 
			@details: size = 15 **>
			CubeADCS_Cfg[] CubeADCS_sys_state_cfg
    	}
    }

}
