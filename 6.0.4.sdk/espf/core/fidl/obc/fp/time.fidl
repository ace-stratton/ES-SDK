package endurosat.pf


<** @description: Interface for onboard RTC
    @details: id = 24
**>
interface time
{
    version { major 0 minor 1 }


    <**@description: Operation status **>
    enumeration op_status
    {
        <**@description: Error **>
        ERROR,
        
        <**@description: Ok **>
        OK
    }


    <**@description: Week day **>
    enumeration week_day
    {
        INVALID,
        MONDAY,
        TUESDAY,
        WEDNESDAY,
        THURSDAY,
        FRIDAY,
        SATURDAY,
        SUNDAY
    }
    
    
    <**@description: Date **>
    struct sdate
    {
        <**@description: This value can be in the range: 2000 <= year <= 2099 **>
        UInt16 year
        
        <**@description: This value can be in the range: 1 <= month <= 12 **>
        UInt8 mon
        
        <**@description: This value can be in the range: 1 <= month day <= 31 **>
        UInt8 day
        
        <**@description: week day: Monday to Sunday **>
        week_day wday
    }


    <**@description: Time **>
    struct stime
    {
        <**@description: This value can be in the range: 0 <= hour <= 23 **>
        UInt8  hour
        
        <**@description: This value can be in the range: 0 <= minutes <= 59 **>
        UInt8  min
        
        <**@description: This value can be in the range: 0 <= seconds <= 59 **>
        UInt8  sec
        
        <**@description: This value can be in the range: 0 <= milliseconds <= 999 **>
        UInt16 ms
        
        <**@description: This value can be in the range: 0 <= microseconds <= 999 **>
        UInt16 us
    }
    

    <** 
        @description: Set internal RTC module date.
                      It will continue to be maintained automatically 
                      until there is voltage supplied to VBAT.
        @details: id = 0x00000001
    **>
    method set_date
    {
        in
        {
            <**@description: 
                user defined date. 
                note that you don't need to supply week day as
                it is going to be calculated automatically. **>
            sdate date
        }
        out
        {
            <**@description: operation status/result **>
            op_status status
        }
    }
    
    
    <** 
        @description: Get internal RTC module date.
        @details: id = 0x00000002
    **>
    method get_date
    {
        out
        {
            <**@description: operation status/result **>
            op_status status
            
            <**@description: current date **>
            sdate date
        }
    }
    
    
    <** 
        @description: Set internal RTC module time. 
                      It will continue to be maintained automatically 
                      until there is voltage supplied to VBAT.  
        @details: id = 0x00000003
    **>
    method set_time
    {
        in
        {
            <**@description: user defined time **>
            stime time
        }
        out
        {
            <**@description: operation status/result **>
            op_status status
        }
    }
    
    
    <** 
        @description: Get internal RTC module time.
        @details: id = 0x00000004
    **>
    method get_time
    {
        out
        {
            <**@description: operation status/result **>
            op_status status
            
            <**@description: current time **>
            stime time
        }
    }

    <** 
        @description: Calibration output frequency.
    **>
    enumeration cal_freq
    {
        F001HZ,
        F512HZ
    }

    <** 
        @description: Enable internal RTC module calibration output 
                      (can be measured on green LED on OBC 1.9).
                      The frequency should be the 'output_frequency'.
                      Once enabled it stays enabled until system reset.
        @details: id = 0x00000005
    **>
    method enable_calibration_output
    {
        in
        {
            <**@description: calibration output frequency **>
            cal_freq f
        }
        out
        {
            <**@description: operation status/result **>
            op_status status
        }
    }

    <** 
        @description: CALR[CALP] value
    **>
    enumeration calp_pulses
    {
        <**@description: RTC:CALR[CALP] value, range according the enum **>
        RESET,
        SET
    }

    <** 
        @description: Configure RTC calibration parameters.
                      Configuration is retained in NVM.
        @details: id = 0x00000006
    **>
    method configure_rtc_calibration_parameters
    {
        in
        {
            <**@description: RTC:CALR[CALP] value, range according the enum **>
            calp_pulses calp
            <**@description: RTC:CALR[CALM] value, range 0 .. 511 **>
            UInt16 calm
        }
        out
        {
            <**@description: operation status/result **>
            op_status status
        }
    }
    <** 
        @description: Read configured RTC calibration parameters.
        @details: id = 0x00000007
    **>
    method retrieve_rtc_calibration_parameters
    {
        out
        {
            <**@description: RTC:CALR[CALP] value, range according the enum **>
            calp_pulses calp
            <**@description: RTC:CALR[CALM] value, range 0 .. 511 **>
            UInt16 calm
        }
    }

    <**@description: RTC source oscillator **>
    enumeration rtc_source
    {
        <**@description: No clock is selected (this is an available register option)  **>
        RTC_OSC_NONE,
        <**@description: Low Speed External oscillator (32768Hz) **>
        RTC_OSC_LSE,
        <**@description: Low Speed Internal oscillator (~32768Hz) **>
        RTC_OSC_LSI,
        <**@description: High Speed External oscillator **>
        RTC_OSC_HSE
        <**@description: Source oscillator is unknown **>
        RTC_OSC_UNKNOWN
    }

    <**@description: RTC source type **>
    struct s_rtc_info
    {
        <**@description: Whether the RTC is enabled at all **>
        Boolean enabled

        <**@description: RTC oscillator source **>
        rtc_source source

        <**@description: RTC asynchronous prescaler (PREDIV_A) **>
        UInt8 rtc_asynchronous_prescaler

        <**@description: RTC synchronous prescaler (PREDIV_S) **>
        UInt16 rtc_synchronous_prescaler

        <**@description: By how much the HSE clock is divided before being source for RTC.
                         0 and 1 mean HSE clock is not used.
                         Ignore if source is different from RTC_OSC_HSE **>
        UInt8 hse_division_factor
    }

    <**
        @description: Read the currently used oscillator source for the RTC clock
        @details: id = 0x00000008
    **>
    method get_rtc_clock_source
    {
        out
        {
            <**@description: operation status/result; ignore `info` value on ERROR **>
            op_status status

            <**@description: RTC Clock info **>
            s_rtc_info info
        }
    }
}
