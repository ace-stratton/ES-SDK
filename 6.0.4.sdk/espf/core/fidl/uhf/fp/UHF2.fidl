package endurosat.macif

<** @description: UHF Protocol
    @details: id = 5 
**>

interface UHF
{
    version { major 0 minor 4 }
    
    <** @description: General status returned for HW-related communication and/or settings **>
    enumeration HwResult
    {
		<** @description: The operation is successful **>
        SUCCESS,
		<** @description: An error has occurred **>
        ERROR,
		<** @description: Requested operation is disabled **>
        DISABLED
    }
    
	<** @description: General status returned for FP commands **>
    enumeration eESSA_UhfStatus
    {
		<** @description: The operation is successful **>
	    OK
		<** @description:  Operation could not be executed **>
	    ERROR
		<** @description:  Invalid data is provided **>
	    ERROR_BAD_DATA
		<** @description:  Operation not implemented **>
	    ERROR_NOT_IMPLEMENTED
		<** @description:  No NACK in i2c Operation **>
	    ERROR_I2C_NACK
		<** @description:  Transceiver is busy with previous transfer **>
	    UHF_ERR_BUSY
    }
   
    enumeration eESSA_UhfSCipherKeySlotStatus
    {
	<** @description: The operation is successful **>
    	SUCCESS
		<** @description: Slot is empty **>
    	EMPTY
		<** @description: Slot is occupied **>
    	OCCUPIED
		<** @description: Operation is unsuccessful, slot ID is out of range **>
    	ERR_OUT_OF_RANGE
		<** @description: Critical error in underlaying layers **>
    	ERR_IO
		<** @description: Operation is unsuccessful, slot is occupied **>
    	ERR_OCCUPIED
		<** @description: Operation is unsuccessful, slot is empty **>
    	ERR_EMPTY
		<** @description: Operation is unsuccessful, wrong key size (16/32) **>
    	ERR_KEYSIZE
		<** @description: Operation is unsuccessful, provide master key first **>
    	ERR_NOMASTER
		<** @description: Operation is unsuccessful, wrong key **>
    	ERR_KEYNOTMATCH
		<** @description: Operation is unsuccessful**>
    	ERR
    }
    
	<** @description: Structure for read/write Status Control Word**>
    struct StatusControlWord
    {
        <** @description: Bit-field indicating the status and mode of operation
                          Bit 0 -> Radio
                          Bit 1 -> Fram
                          Bit 2 -> Secure
                          Bit 3 -> CTS
                          Bit 4 -> Boot
                          Bit 5 -> Reserved
                          Bit 6 -> BeaconON
                          Bit 7 -> Echo
                          Bit 8 -> RfMode:3
                          Bit 11 -> Reset
                          Bit 12 -> UartBaud:2
                          Bit 14 -> HFXT
                          Bit 15 -> GS session
                           
        **>
        
        UInt16 SCWBitField
    }
    
	<** @description: Structure for read/write UpTime**>
    struct sUpTime
    {
		<** @description: 32 bit value of UpTime (s)**>
    	UInt32 u32UpTime	
    }
    
	<** @description: Structure for read/write RF configuration**>
    struct sRFConfig
	{   
		<** @description: Receiver - integer part**>
		UInt8   RxIntPar
		<** @description: Receiver - fractional part
		    @details: size = 3 **>
		UInt8[] RxFractional
        <** @description: Transmitter - integer part**>
		UInt8   TxIntPar
		<** @description: Transmitter - fractional part
		    @details: size = 3 **>
		UInt8[] TxFractional
		<** @description: Validity flag, 0 invalid configuration, 1 valid configuration**>
		UInt8   Validity
	}
	
	<** @description: Structure for text beacon period configuration**>
	struct sBeaconMessageTxPeriodCfg
	{
		<** @description: Period in seconds**>
		UInt16 Period
		<** @description: Validity flag, 0 invalid configuration, 1 valid configuration**>
    	UInt8  Validity
	}
	
	<** @description: Structure for audio beacon period configuration**>
	struct sBeaconMessageBetweenTxPeriodCfg
	{
		<** @description: Period in seconds**>
		UInt16 Period
		<** @description: Validity flag, 0 invalid configuration, 1 valid configuration**>
    	UInt8  Validity
	}
	
	<** @description: Structure for 1U antenna release configuration**>
	struct sAntennaReleaseCfg
	{
        <** @description: Bit-field indicating the status and mode of operation
                          Bit 0 -> Release enable/disable
                          Bit 4 -> Robust release enabe/disable
						  **>
		UInt8 Enable
		<** @description: Release time after power up**>
		UInt8 Time
		<** @description: Validity flag, 0 invalid configuration, 1 valid configuration**>
		UInt8 Validity
	}
	
	<** @description: Structure for response of 1U antenna i2c read operation**>
	struct sAntennaData
	{
	    <** @description: Antenna data response according to 1U Antenna specification**>
		UInt32 Data
	    <** @description: Validity flag, 0 response is not valid, 1 response is valid**>
		UInt8 Validity
	}
	
	<** @description: Structure for AX25 Source Call signature configuration**>
	struct sCallSign
	{
		<** @description: ASCII signature
		    @details: size = 6 **>
		UInt8[] Signature
		<** @description: Validity flag, 0 Configuration is not valid, 1 Configuration is valid**>
    	UInt8   u8Validity
	}

    <** @description: Structure for Morse code content configuration**>
	struct sMorseCallSign
	{
	    <** @description: Size of Morse code data**>
		UInt8 Size
		<** @description: Morse code data
		    @details: size = 37 **>
    	UInt8[] Signature
		<** @description: Validity flag, 0 Configuration is not valid, 1 Configuration is valid**>
    	UInt8   Validity
	}

    <** @description: Structure for Audio beacon contnet configuration**>
    struct sMidiAudioBeacon
	{
		<** @description: Size of beacon data**>
		UInt8 Size
		<** @description: MIDI notes of beacon data, MSB - Note Duration, LSB - Note
			@details: size = 37 **>
    	UInt16[] Midi
		<** @description: Validity flag, 0 Configuration is not valid, 1 Configuration is valid**>
    	UInt8   Validity
	}
	
	<** @description: Structure for Firmware version**>
	struct sSwVersionBuild
	{
		<** @description: Major version**>
		UInt8 Version
		<** @description: Minor version**>
    	UInt8 Increment
    	<** @description: ASCII Timestamp
		@details: size = 25 **>
    	UInt8[] DateTimeAsciiZ
		<** @description: Validity flag, 0 data is not valid, 1 data is valid**>
    	UInt8   Validity
	}
	
	<** @description: Structure for text beacon content configuration**>
	struct sBeaconMessageContentCfg
	{
		<** @description: Size of beacon data**>
	    UInt8 Size
	    <** @description: ASCII text content
		@details: size = 98 **>
    	UInt8[] Message
		<** @description: Validity flag, 0 Configuration is not valid, 1 Configuration is valid**>
    	UInt8 Validity
	}
	
	<** @description: Structure for module address configuration**>
	struct sAddrCfg
	{
		<** @description: Address**>
		UInt8 Addr
		<** @description: Validity flag, 0 Configuration is not valid, 1 Configuration is valid**>
		UInt8 Validity
	}
	
	<** @description: Structure for external NvM read/write operations**>
	struct sFramData
	{
		<** @description: Address**>
		UInt32 Addr
		<** @description: Data
		@details: size = 16 **>
		UInt8[] Data
		<** @description: Validity flag, 0 data is not valid, 1 data is valid**>
		UInt8 Validity
	}
	
	<** @description: Structure for SI4463 property read request according to SI4463 specification**>
	struct sReadTransceiverProperty
	{
		<**@description: Property group**>
		UInt8 Group
		<**@description: Property offset in group**>
	    UInt8 Offset
		<**@description: Size to read**>
	    UInt8 Size
	}
	
	<** @description: Structure for SI4463 property read request response and write request, according to SI4463 specification**>
	struct sTransceiverProperty
	{
		<**@description: Property group**>
		UInt8 Group
		<**@description: Property offset in group**>
	    UInt8 Offset
		<**@description: Size**>
	    UInt8 Size
	    <** @description: Property data
		@details: size = 16 **>
	    UInt8[] Data
		<** @description: Validity flag, 0 data is not valid, 1 data is valid**>
	    UInt8 Validity
	}
	
	<** @description: Structure for SI4463 status according specification**>
	struct sSi4463ModemStatus
	{
		<** @description: Pending status**>
	    UInt8  MODEM_PEND
		<** @description: Modem status**>
	    UInt8  MODEM_STATUS
		<** @description: Current RSSI**>
	    UInt8  CURR_RSSI
		<** @description: Latch RSSI**>
	    UInt8  LATCH_RSSI
		<** @description: Antenna 1 RSSI**>
	    UInt8  ANT1_RSSI
		<** @description: Antenna 2 RSSI**>
	    UInt8  ANT2_RSSI
		<** @description: Afc frequency offset**>
	    UInt16 AFC_FREQ_OFFSET
	}
	
	<** @description: Structure for Radio Raw data write request operation**>
	struct sRadioRawData 
	{
		<** @description: Size**>
		UInt8 Size
		<** @description: Data
		@details: size = 128 **>
		UInt8[] Data
	}
	
	<** @description: Structure for module Ping-Pong functionality**>
	struct sPing
	{
		<** @description: Size**>
		UInt8   Size
		<** @description: Data
		@details: size = 16 **>
		UInt8[] Data
	}
	
	<** @description: Structure for Beacon transmission request operation**>
    struct sExBeacon
	{
		<** @description: Size**>
		UInt8   Size
		<** @description: Data
		@details: size = 98 **>
		UInt8[] Data
	}
	
	<** @description: Structure for I2C confiration**>
	struct sI2cCfg
	{
		<** @description: Slave operation i2c Address**>
		UInt8 Addr
		<** @description: i2c line Pull-up resistor 4.7K enable/disable**>
		UInt8 PullUp4_7K
		<** @description: i2c line Pull-up resistor 10K enable/disable**>
		UInt8 PullUp10K
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8 Validity
	}
	
	<** @description: Structure for antenna configuration**>
	struct sAntennaCfg
	{
		<** @description: Antenna i2c address**>
		UInt8 I2cAddr
		<** @description: Release enable**>
		UInt8 AntennaReleaseCheckEnable
		<** @description: Time to start release after power up, s**>
		UInt8 AntennaReleaseCheckTime
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8 Validity
	}
	
	<** @description: Structure for EPS configuration**>
	struct sEpsCfg
	{
	<** @description: EPS module address**>
		UInt8  Addr
		<** @description: EPS module type, EPS 1 only is supported**>
		UInt8  u8Variant
		<** @description: Period between telemetry request, ms**>
		UInt32 u32RequestTimeMs
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8  Validity
	}
	
	<** @description: ConOps voltage hysteresis configuration, values from EPS specification**>
	struct sEpsConOpsCfg
	{
	    UInt16 v_low
	    UInt16 i_low
	    UInt16 v_high
	    UInt16 i_high
		<** @description: Vbat ideal low value**>
	    UInt16 v_ideal_low
		<** @description: Vbat ideal high value**>
	    UInt16 v_ideal_high
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8  Validity
	}
	
	<** @description: RS485 line configuration**>
	struct sRS485Cfg
	{
	<** @description: RS485 line termination enable/disable**>
		UInt8 Termination
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8 Validity
	}
	
	<** @description: OBC configuration**>
	struct sObcCfg
	{
		<** @description: OBC1 module address**>
	    UInt8  Addr1
		<** @description: OBC1 type**>
	    UInt8  Variant1
		<** @description: OBC1 EPS output**>
	    UInt8  EPSOut1
		<** @description: OBC2 module address**>
	    UInt8  Addr2
		<** @description: OBC2 type**>
	    UInt8  Variant2
		<** @description: OBC2 EPS output**>
	    UInt8  EPSOut2
		<** @description: timeout in seconds for PING requests from OBC**>
	    UInt16 PingTimeoutS
		<** @description: Number of resets for current OBC before switching to next**>
	    UInt8  RstRetry
		<** @description: Period in seconds of Ping requests towards OBC, 0 - Ping disabled**>
	    UInt8  PingPeriod
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
	    UInt8  Validity
	}
	
	<** @description: SatID configuration**>
	struct sSatCfg
	{
		<** @description: SatID value**>
		UInt64 SatID
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8  Validity
	}
	
	<** @description: EPS output configartion for Phoenix and Normal ConOps modes**>
	struct sEpsOutCfg
	{
		<** @description: Logical output levels for Normal mode**>
		UInt8  output_normal
		<** @description: Output mask for Normal mode**>
		UInt8  mask_normal
		<** @description: Logical output levels for Phoenix mode**>
		UInt8  output_phoenix
		<** @description: Output mask for Phoenix mode**>
		UInt8  mask_phoenix
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8  Validity
	}
	
	<** @description: 2U Antenna release algorithm states**>
	enumeration Ant2U_Alg_State
	{
		<** @description: Idle, nothing to do**>
		IDLE,
		<** @description: GPIO requesting**>
		GPO_REQ,
		<** @description: GPIO1 state is active**>
		GPO1,
		<** @description: GPIO2 state is active**>
		GPO2,
		<** @description: GPIO3 state is active**>
		GPO3,
		<** @description: MCU request is active**>
		MCU_REQ,
		<** @description: MCU 1 state is active**>
		MCU1,
		<** @description: MCU 2 state is active**>
		MCU2,
		<** @description: Get status state is active**>
		GET_STAT,
		<** @description: Waiting response state is active**>
		WAIT_RESP,
		<** @description: State request timed out**>
		TIMEOUT,
		<** @description: Release finished**>
		END
	}

	<** @description: Antenna 2U Deployment state**>
	enumeration Ant2U_deployment
	{
		<** @description: Deployment enabled**>
		Enabled = 0x5A
		<** @description: Deployment disabled**>
		Disabled = 0
	}

	<** @description: Antenna 2U configuration**>
	struct s2UAntennaCfg
	{
		<** @description: enables the algorithm with the 0x5A magic **>
		Ant2U_deployment Enable
		<** @description: default 0x80 - test mode **>
		UInt8 MACAddr
		<** @description: forces GPOs **>
		UInt8 Robust
		<** @description: minutes **>
		UInt8 AlgCheckDelay		
		<** @description: in seconds for any of the algorithms commanded defaults to 120 **>
		UInt16 AlgTimeout
		<** @description: default 150, disables algorithm if reaches 0 regardless of enable flag **>
		UInt16 RemainingBootCount
		<** @description: current state of algorithm **>
		Ant2U_Alg_State State
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8 Validity
	}
	
	<** @description: Atomated beacon configuraton**>
	struct sAutomatedBeaconCfg
	{
		<** @description: Phoenix ConOps mode mask
						Bit-field indicating the status and mode of operation
						Bit 0 -> Text beacon enable
						Bit 1 -> Telemetry type 1 beacon enable
						Bit 2 -> Telemetry type 2 beacon enable
						Bit 3 -> Telemetry type 3 beacon enable
						  **>
		UInt64 EnPhoenix
		<** @description: Normal ConOps mode mask
						Bit-field indicating the status and mode of operation
						Bit 0 -> Text beacon enable
						Bit 1 -> Telemetry type 1 beacon enable
						Bit 2 -> Telemetry type 2 beacon enable
						Bit 3 -> Telemetry type 3 beacon enable
						  **>
		UInt64 EnNormal
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8 Validity
	}
	
	<** @description: Structure for transceiver output power configuraton**>
	struct sOutputPowerCfg
	{
		<** @description: output power value 0-255**>
		UInt8 Value
		<** @description: Reserved for future use**>
		UInt32 Reserved 
		<** @description: Validity flag, 0 configuration is not valid, 1 configuration is valid**>
		UInt8 Validity
	}
	
	<** @description: Structure for statistical counters**>
	struct sCounters
	{
		<** @description: Power-on Reset**>
	    UInt32 POR
		<** @description: RS485 bus line collisions during transmission**>
	    UInt32 MAC_Collisions
		<** @description: RS485 bus line transmission fails**>
	    UInt32 MAC_fails
		<** @description: Groundstation handshakes**>
	    UInt32 GS_Handshakes
		<** @description: NvM write operation failed**>
	    UInt32 NvMWriteFails
		<** @description: NvM read operation failed**>
	    UInt32 NvMReadFails
		<** @description: NvM configuration entry was restored from default configuration**>
	    UInt32 NvMDefaultEntry
		<** @description: Internal FRAM configuration entry was corrupted (wrong CRC) and restored**>
	    UInt32 IntFRAM_corruptions
		<** @description: External FRAM configuration entry was corrupted (wrong CRC) and restored**>
	    UInt32 ExtFRAM_corruptions
		<** @description: External FRAM not responding**>
	    UInt32 ExtFRAM_gone
	}
	
	<** @description: Structure for cipher key slot**>
	struct sCipherKeySlot
	{
		<** @description: Service ID 
								0 - connected to no service, 
								1 - Key is used for dynamic key generation 
								2 - key is used for static encryption
								**>
		UInt8  ServiceID
		<** @description: Slot ID, 0-8**>
		UInt8  SlotID
		<** @description: Key data
			@details: size = 32 **>
		UInt8[] Data
		<** @description: Key size in bytes - 16/32**>
		UInt8   Size
	}

    <** @description: Write Status control word 
        @details: id = 0x0000001
    **>
    
    method WriteSCW
    {
    	in
    	{
            StatusControlWord Scw
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }

   <** @description: Read Status control word 
       @details: id = 0x0000002
    **>
    method ReadSCW
    {
    	out
    	{
			StatusControlWord opResult
    	}
    }

    <** @description: Write RF Config
        @details: id = 0x0000003
    **>
    method WriteRfConfig
    {
    	in
    	{
    		sRFConfig RfConfig
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }

    <** @description: Read RF Config
        @details: id = 0x0000004
    **>
    method ReadRfConfig
    {
    	out
    	{
			sRFConfig opResult
    	}
    }
    
    <** @description: Read Uptime
        @details: id = 0x0000005
    **>
    method ReadUpTime
    {
    	out
    	{
			sUpTime UpTime
    	}
    }
    
    <** @description: Read Number Of Tx Packets
        @details: id = 0x0000006
    **>
    method ReadNumberOfTxPackets
    {
    	out
    	{
			UInt32 Packets
    	}
    }
    
    <** @description: Read Number Of Rx Packets
        @details: id = 0x0000007
    **>
    method ReadNumberOfRxPackets
    {
    	out
    	{
			UInt32 Packets
    	}
    }
    
    <** @description: Read Number Of Rx Packets with CRC Error
        @details: id = 0x0000008
    **>
    method ReadNumberOfRxPacketsCRCErr
    {
    	out
    	{
			UInt32 Packets
    	}
    }
    
    <** @description: Write Beacon Message Tx Period Configuration
        @details: id = 0x0000009
    **>
    method WriteBeaconMessageTxPeriodCfg
    {
    	in
    	{
    		sBeaconMessageTxPeriodCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Beacon Message Tx Period Configuration
        @details: id = 0x000000A
    **>
    method ReadBeaconMessageTxPeriodCfg
    {
    	out
    	{
			sBeaconMessageTxPeriodCfg opResult
    	}
    }
    
    <** @description: Write Beacon Message Betweeen Tx Period Config
        @details: id = 0x000000B
    **>
    method WriteBeaconMessageBetweeenTxPeriodConfig
    {
    	in
    	{
    		sBeaconMessageBetweenTxPeriodCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Beacon Message Betweeen Tx Period Config
        @details: id = 0x000000C
    **>
    method ReadBeaconMessageBetweeenTxPeriodConfig
    {
    	out
    	{
			sBeaconMessageBetweenTxPeriodCfg opResult
    	}
    }
    
    <** @description: Restore Default Config
        @details: id = 0x000000D
    **>
    method RestoreDefaultConfig
    {
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Write Antenna Release Config
        @details: id = 0x000000E
    **>
    method WriteAntennaReleaseConfig
    {
    	in 
    	{
    		sAntennaReleaseCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Antenna Release Config
        @details: id = 0x000000F
    **>
    method ReadAntennaReleaseConfig
    {
    	out
    	{
			sAntennaReleaseCfg opResult
    	}
    }
    
    <** @description: Write Antenna
        @details: id = 0x0000010
    **>
    method WriteAntenna
    {
    	in
    	{
    		UInt8 Algorithm
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Antenna
        @details: id = 0x0000011
    **>
    method ReadAntenna
    {
    	out
    	{
			sAntennaData opResult
    	}
    }
    
    <** @description: Enter Low Power Mode
        @details: id = 0x0000012
    **>
    method EnterLPM
    {
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Low Power Mode
        @details: id = 0x0000013
    **>
    method ReadLPM
    {
    	out
    	{
			UInt8 Mode
    	}
    }
    
    <** @description: Write Destination Call Sign
        @details: id = 0x0000014
    **>
    method WriteDestCallSign
    {
    	in
    	{
    		sCallSign CallSign
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Destination Call Sign
        @details: id = 0x0000015
    **>
    method ReadDestCallSign
    {
    	out
    	{
			sCallSign opResult
    	}
    }
    
    <** @description: Write Source Call Sign
        @details: id = 0x0000016
    **>
    method WriteSrcCallSign
    {
    	in
    	{
    		sCallSign CallSign
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Source Call Sign
        @details: id = 0x0000017
    **>
    method ReadSRCCallSign
    {
    	out
    	{
			sCallSign opResult
    	}
    }
    
    <** @description: Write Morse Call Sign
        @details: id = 0x0000018
    **>
    method WriteMorseCallSign
    {
    	in
    	{
    		sMorseCallSign MorseCallSign
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Morse Call Sign
        @details: id = 0x0000019
    **>
    method ReadMorseCallSign
    {
    	out
    	{
			sMorseCallSign opResult
    	}
    }
    
    <** @description: Write MIDI audio Beacon
        @details: id = 0x000001A
    **>
    method WriteMIDIAudioBeacon
    {
    	in
    	{
    		sMidiAudioBeacon Midi
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read MIDI audio Beacon
        @details: id = 0x000001B
    **>
    method ReadMIDIAudioBeacon
    {
    	out
    	{
			sMidiAudioBeacon opResult
    	}
    }
    
    <** @description: Read SW Version Build
        @details: id = 0x000001C
    **>
    method ReadSWVersion
    {
    	out
    	{
			sSwVersionBuild opResult
    	}
    }
    
    <** @description: Read Payload Size
        @details: id = 0x000001D
    **>
    method ReadPayloadSize
    {
    	out
    	{
			UInt16 PayloadSize
    	}
    }
    
    <** @description: Write Beacon Message Content Config
        @details: id = 0x000001E
    **>
    method WriteBeaconMessageContentCfg
    {
    	in
    	{
    		sBeaconMessageContentCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Beacon Message Content Config
        @details: id = 0x000001F
    **>
    method ReadBeaconMessageContentCfg
    {
    	out
    	{
			sBeaconMessageContentCfg opResult
    	}
    }
    
    <** @description: Write Device Address Config
        @details: id = 0x0000020
    **>
    method WriteDeviceAddrConfig
    {
    	in
    	{
			sAddrCfg Cfg
    	}
    	
    	out
    	{
    		eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Write FRAM
        @details: id = 0x0000021
    **>
    method WriteFRAM
    {
    	in
    	{
    		sFramData FramWriteReq
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read FRAM
        @details: id = 0x0000022
    **>
    method ReadFRAM
    {
    	in
    	{
    		UInt32 Addr
    	}
    	out
    	{
			sFramData opResult
    	}
    }
    
    <** @description: Write Transceiver Property
        @details: id = 0x0000023
    **>
    method WriteTransProperty
    {
    	in
    	{
    		sTransceiverProperty Property
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read Transceiver Property
        @details: id = 0x0000024
    **>
    method ReadTransProperty
    {
    	in 
    	{
    		sReadTransceiverProperty Property	
    	}
    	out
    	{
			sTransceiverProperty opResult
    	}
    }
    
     <** @description: Read Temperature
        @details: id = 0x0000025
    **>
    method ReadTemp
    {
    	out
    	{
			Int16 opResult
    	}
    }

    <** @description: Read Modem RSSI
      @details: id = 0x0000026
    **>
    method ReadRSSI
    {
    	out
    	{
			sSi4463ModemStatus opResult
    	}
    }
    
    <** @description: Write Raw Data to Radio
      @details: id = 0x0000027
    **>
    method WriteRadioRawData
    {
    	in
    	{
    		sRadioRawData Data
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Ping 
      @details: id = 0x0000028
    **>
    method Ping
    {
    	in
    	{
    		sPing Data
    	}
    	out
    	{
			sPing opResult
    	}
    }
    
    <** @description: Explicit beacon set and send 
      @details: id = 0x0000029
    **>
    method ExBeaconSetSend
    {
    	in
    	{
    		sExBeacon Data
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Write i2c configuration
      @details: id = 0x000002A
    **>
    method WriteI2cConfig
    {
    	in
    	{
    		sI2cCfg Data
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read i2c configuration
      @details: id = 0x000002B
    **>
    method ReadI2cConfig
    {
    	out
    	{
			sI2cCfg Data
    	}
    }
    
    <** @description: Write antenna configuration
      @details: id = 0x000002C
    **>
    method WriteAntennaCfg
    {
    	in
    	{
    		sAntennaCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Write antenna configuration
      @details: id = 0x000002D
    **>
    method ReadAntennaCfg
    {
    	out
    	{
			sAntennaCfg Cfg
    	}
    }

    <** @description: Write EPS base configuration
      @details: id = 0x000002E
    **>
    method WriteEpsCfg
    {
    	in
    	{
    		sEpsCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Write EPS base configuration
      @details: id = 0x000002F
    **>
    method ReadEpsCfg
    {
    	out
    	{
			sEpsCfg Cfg
    	}
    }
    
    <** @description: Write EPS configuration
      @details: id = 0x0000030
    **>
    method WriteEpsConOpsCfg
    {
    	in
    	{
    		sEpsConOpsCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read EPS configuration
      @details: id = 0x0000031
    **>
    method ReadEpsConOpsCfg
    {
    	out
    	{
			sEpsConOpsCfg Cfg
    	}
    }

	<** @description: Write RS485 network configuration
	  @details: id = 0x0000032
	**>
	method WriteRs485Config
	{
		in
		{
			sRS485Cfg Cfg
		}
		out
		{
			eESSA_UhfStatus opResult
		}
	}

	<** @description: Read RS485 network configuration
	  @details: id = 0x0000033
	**>
	method ReadRs485Config
	{
		out
		{
			sRS485Cfg Cfg
		}
	}
	
	<** @description: Write OBC configuration
	  @details: id = 0x0000034
	**>
	method WriteOBCConfig
	{
		in
		{
			sObcCfg Cfg
		}
		out
		{
			eESSA_UhfStatus opResult
		}
	}

	<** @description: Read OBC configuration
	  @details: id = 0x0000035
	**>
	method ReadOBCConfig
	{
		out
		{
			sObcCfg Cfg
		}
	}
	
	<** @description: Write Sat configuration
	  @details: id = 0x0000036
	**>
	method WriteSatConfig
	{
		in
		{
			sSatCfg Cfg
		}
		out
		{
			eESSA_UhfStatus opResult
		}
	}

	<** @description: Read Sat configuration
	  @details: id = 0x0000037
	**>
	method ReadSatConfig
	{
		out
		{
			sSatCfg Cfg
		}
	}
	
		<** @description: Read EPS output configuration
	  @details: id = 0x0000038
	**>
	method ReadEpsCfgOut
	{
		out
		{
			sEpsOutCfg Cfg
		}
	}
	
	<** @description: Write EPS output configuration
	  @details: id = 0x0000039
	**>
	method WriteEpsCfgOut
	{
		in
		{
			sEpsOutCfg Cfg
		}
		out
		{
			eESSA_UhfStatus opResult
		}
	}
	
	 <** @description: Write 2U antenna configuration
      @details: id = 0x000003A
    **>
    method Write2UAntennaCfg
    {
    	in
    	{
    		s2UAntennaCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read 2U antenna configuration
      @details: id = 0x000003B
    **>
    method Read2UAntennaCfg
    {
    	out
    	{
			s2UAntennaCfg Cfg
    	}
    }
    
   	<** @description: Write automated beacons configuration
      @details: id = 0x000003C
    **>
    method WriteAutomatedBeaconCfg
    {
    	in
    	{
    		sAutomatedBeaconCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read automated beacons configuration
      @details: id = 0x000003D
    **>
    method ReadAutomatedBeaconCfg
    {
    	out
    	{
			sAutomatedBeaconCfg Cfg
    	}
    }
    
    <** @description: Write output power configuration
      @details: id = 0x000003E
    **>
    method WriteOutputPowerCfg
    {
    	in
    	{
    		sOutputPowerCfg Cfg
    	}
    	out
    	{
			eESSA_UhfStatus opResult
    	}
    }
    
    <** @description: Read output power configuration
      @details: id = 0x000003F
    **>
    method ReadOutputPowerCfg
    {
    	out
    	{
			sOutputPowerCfg Cfg
    	}
    }
    
    <** @description: Read counters
      @details: id = 0x0000040
    **>
    method ReadCounters
    {
    	out
    	{
			sCounters Cfg
    	}
    }
    
    <** @description: Write cipher key slot
    @details: id = 0x0000041
    **>
    method WriteCipherKeySlot
    {
    	in
    	{
			sCipherKeySlot sKeySlot
    	}
    	
    	out
    	{
    		eESSA_UhfSCipherKeySlotStatus opResult
    	}
    }
    
    <** @description: Read cipher key slot status
      @details: id = 0x0000042
    **>
    method ReadCipherKeySlotStatus
    {
    	in
    	{
    		UInt8 SlotId
    	}
    	out
    	{
			eESSA_UhfSCipherKeySlotStatus eSlotStatus
    	}
    }
    
    <** @description: Erase cipher key slot
    @details: id = 0x0000043
    **>
    method EraseCipherKeySlot
    {
    	in
    	{
			sCipherKeySlot sKeySlot
    	}
    	
    	out
    	{
    		eESSA_UhfSCipherKeySlotStatus opResult
    	}
    }
}