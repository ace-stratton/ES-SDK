package endurosat.macif.cp

<** @description: Deployment of SP
    @details: id = 18 
**>

interface SP
{
    version { major 0 minor 1 }
    
      <** @description: fn-n getSoftwareVersion, version variant
                      0xFF for development state
                      0x00 for release candidate
                      1..100 for major version number
                      101-254 reserved
    **>
	enumeration VersionVariant
	{
		DevelopmentState = 0xFF,
		ReleaseCandidate = 0
	}
	
	    <** @description: Acquire the software version information
        @details: id = 0x00001000, esttc_id = ES+R 42
    **>
    method eSP_getSWVersion
    {
        out
        {
		    <** @description: software state, enum -> uint8
                              0xFF for development state
                              0x00 for release candidate
                              1..100 for major version number
                              101-254 reserved
		    **>
            VersionVariant  ver_variant
            
		    <** @description: build number is same as esttc_id = ES+R 42 **>
            UInt16 ver_number
		    
		    <** @description: timestamp in format YYYYMMDDhhmmss, 
                              ASCII chars, fixed size, no null-termination
                              TBD: time repserented with null chars for releases?
		        @details: size = 14 **>
            Int8[] timestamp
        }
    }
    
    enumeration eSP_DeployCmds
    {
    	Mode_ALL_OFF
    	Mode_ALG1
    	Mode_ALG2
	Mode_ALG3
    	Mode_TYPES
    }
    
    <** @description: Write panel release command (REG_REL_WRITE)
        @details: id = 0x00001001, esttc_id = ES+W42
    **>
    method StartDeployment
    {
    	in
    	{
    		eSP_DeployCmds DeployCmd
    	}
    }
    
    <** @description: Read panel deployment status (REG_REL_READ)
        @details: id = 0x00001002, esttc_id = ES+R30
    **>
    method GetDeploymentStatus
    {
    	out
    	{
			UInt8 status
			UInt8 heaters
			UInt8 timer
			UInt8 feedback
		}
    }
    
    <** @description: Get the uptime after reset in seconds (REG_SSP_UPTIME_READ)
        @details: id = 0x00001003, esttc_id = ES+R2D
    **>
    method GetUptime
    {
    	out
    	{
			UInt32 uptime
		}
    }

    struct SunSensors{
        UInt16 sunDataMain
        UInt16 sunDataExt
        Int16 sunDataTemp
    }

    struct TempSensors{
        Int16 tmpDataMain
        Int16 tmpDataExt1
        Int16 tmpDataExt2
    }
    
    struct GyroMain{
        Int16 gyroDataMainRate
        UInt16 gyroDataMainAngle
        Int16 gyroDataMainTmp
    }
    
    struct GyroExt{
        Int16 gyroDataExtRate
        UInt16 gyroDataExtAngle
        Int16 gyroDataExtTmp
    }
    
    struct AllTelemetry{
	SunSensors sunData
	TempSensors tempData
	GyroMain gyroMainData
	GyroExt	gyroExtData
    }

    <** @description: Get all the telemetry that is available
        @details: id = 0x00001004, 
    **>
    method GetTelemetry
    {
    	out
    	{
			AllTelemetry data
		}
    }
    
   
    <** @description: Read Stationary Panel Sun Sensor Data (REG_SUN_MAIN_READ)
        @details: id = 0x00001006, esttc_id = ES+R29
    **>
    method GetSunMain 
    {
    	out
    	{
    		UInt16 sunDataMain
    	}
    }
    
     <** @description: Read Stationary Panel Sun Sensor Data (REG_SUN_EXT_READ)
        @details: id = 0x00001007, esttc_id = ES+R2A
    **>
    method GetSunExt 
    {
    	out
    	{
    		UInt16 sunDataExt
    	}
    }

	<** @description: Read microC Temperature Sensor Data (REG_SUN_TEMP_READ)
        @details: id = 0x00001008, esttc_id = ES+R2B
    **>
    method GetSunTemp 
    {
    	out
    	{
    		Int16 sunDataTemp
    	}
    }

	<** @description: Read microC main Temperature Sensor Data (REG_TEMP_MAIN_READ)
        @details: id = 0x00001009, esttc_id = ES+R25
    **>
    method GetTmpMain 
    {
    	out
    	{
    		Int16 tmpDataMain
    	}
    }

	<** @description: Read microC Temperature Sensor Data (REG_TEMP_EXT1_READ)
        @details: id = 0x0000100A, esttc_id = ES+R26
    **>
    method GetTmpExt1 
    {
    	out
    	{
    		Int16 tmpDataExt1
    	}
    }

	<** @description: Read microC Temperature Sensor Data (REG_TEMP_EXT2_READ)
        @details: id = 0x0000100B, esttc_id = ES+R27
    **>
    method GetTmpExt2
    {
    	out
    	{
    		Int16 tmpDataExt2
    	}
    }


	<** @description: Read microC main Temperature Sensor Data (REG_GYRO_ROT_READ)
        @details: id = 0x0000100C, esttc_id = ES+R21
    **>
    method GetGyroMainRate 
    {
    	out
    	{
    		Int16 gyroDataMainRate
    	}
    }

	<** @description: Read microC Temperature Sensor Data (REG_GYRO_ANGLE_READ)
        @details: id = 0x0000100D, esttc_id = ES+R22
    **>
    method GetGyroMainAngle
    {
    	out
    	{
    		UInt16 gyroDataMainAngle
    	}
    }

	<** @description: Read microC Temperature Sensor Data (REG_GYRO_TEMP_READ)
        @details: id = 0x0000100E, esttc_id = ES+R23
    **>
    method GetGyroMainTmp
    {
    	out
    	{
    		Int16 gyroDataMainTmp
    	}
    }

	<** @description: Read microC main Temperature Sensor Data (REG_Z_GYRO_ROT_READ)
        @details: id = 0x0000100F, esttc_id = ES+R33
    **>
    method GetGyroExtRate 
    {
    	out
    	{
    		Int16 gyroDataExtRate
    	}
    }

	<** @description: Read microC Temperature Sensor Data (REG_Z_GYRO_ANGLE_READ)
        @details: id = 0x00001010, esttc_id = ES+R34
    **>
    method GetGyroExtAngle
    {
    	out
    	{
    		UInt16 gyroDataExtAngle
    	}
    }

	<** @description: Read microC Temperature Sensor Data (REG_Z_GYRO_TEMP_READ)
        @details: id = 0x00001011, esttc_id = ES+R35
    **>
    method GetGyroExtTmp
    {
    	out
    	{
    		Int16 gyroDataExtTmp
    	}
    }

} 