package endurosat.pf

<** @description: Onboard Computer Telemetry Messages Descriptions
    @details: id = 21
**>
typeCollection DataCacheTypes
{
    version { major 0 minor 1 }

    struct OBC_0
    {
        UInt8  opMode
        UInt32 upTime
        UInt16 totalResetCount
        <** @description:
            LS bit 0: WWD reset occurred at least once
            LS bit 1: IWD reset occurred at least once
            LS bit 2: LPR reset occurred at least once
            LS bit 3: POR reset occurred at least once
            LS bit 4: RSTPIN reset occurred at least once
            LS bit 5: BOR reset occurred at least once
            LS bit 6: HARDFAULT reset occurred at least once
            LS bit 7: MEMFAULT reset occurred at least once
            LS bit 8: BUSFAULT reset occurred at least once
            LS bit 9: USAGEFAULT reset occurred at least once

        **>
        UInt16 resetReasonBitField
        <** @description: Payload Modes Enabled / Disabled status
            LS bit 0: Payload Mode 1 (Ext payload 1)
            LS bit 1: Payload Mode 2 (Ext payload 2)
            LS bit 2: Payload Mode 3 (Downlink)
            LS bit 3: Payload Mode 4 (Data Transfer)
        **>
        UInt16 payloadModesStatus
    }

    struct ADCS_0
    {
        <** @details: size = 3 **>
        Int16[] magFieldVec
        <** @details: size = 3 **>
        Int16[] coarseSunVec
        <** @details: size = 3 **>
        Int16[] fineSunVec
        <** @details: size = 3 **>
        Int16[] nadirVec
        <** @details: size = 3 **>
        Int16[] angRateVec
        <** @details: size = 3 **>
        Int16[] wheelSpeedArr
    }

    struct ADCS_1
    {
        <** @details: size = 3 **>
        Int16[] estQSet
        <** @details: size = 3 **>
        Int16[] estAngRateVec
		<** @details: size = 3 **>
        Int16[] controlledAngles
		<** @details: size = 3 **>
        Int16[] rawGyroRates
    }

    struct ADCS_2
    {
        <** @details: size = 6 **>
        UInt8[] adcsState
    }

    struct EPS_0
    {
        <** @description: Battery energy in [mWh] **>
        Int64 battEnergy
        <** @description: Battery charge in [mAh]. This is the charge state (from Coloumb counter, etc.) **>
        Int64 battCharge
        <** @description: Battery charge capacity in [mAh]. This is the current peak capacity based on the battery health (temp., etc.) **>
        Int64 battChargeCapacity
        <** @description: Battery percent in [%] **>
        Int64 battPercent
        <** @description: Battery voltage in [mV] **>
        Int32 battVoltage
        <** @description: Battery current in [mA] **>
        Int32 battCurrent
        <** @description: Battery temperature in [mDeg/C] **>
        Int32 battTemperature
    }

    struct SSP_0
    {
        UInt16 sunDataMain
        UInt16 sunDataExt
        Int16 tempMCU
        Int16 tempMain
        Int16 tempExt1
        Int16 tempExt2
    }

    struct SSP_1
    {
        UInt16 sunDataMain
        UInt16 sunDataExt
        Int16 tempMCU
        Int16 tempMain
        Int16 tempExt1
        Int16 tempExt2
    }

    struct SSP_2
    {
        UInt16 sunDataMain
        UInt16 sunDataExt
        Int16 tempMCU
        Int16 tempMain
        Int16 tempExt1
        Int16 tempExt2
    }

    struct SSP_3
    {
        UInt16 sunDataMain
        UInt16 sunDataExt
        Int16 tempMCU
        Int16 tempMain
        Int16 tempExt1
        Int16 tempExt2
    }

    struct AOCS_CNTRL_TLM
    {
        <** @description: ADCS error flags **>
        UInt32 adcsErrFlags
        <** @description: Norm of the estimated angular velocity in [mrad/s] **>
        Int32 estAngRateNorm
        <** @description: Estimated angular velocity vector in [mrad/s]
            @details: size = 3 **>
        Int32[] estAngRateVec
        <** @description: Estimated attitude angles in [mdeg]
            @details: size = 3 **>
        Int32[] estAttAngles
        <** @description: Measured Wheel Speed [RPM]
            @details: size = 4 **>
        Int16[] measWheelSpeed
    }

    struct AOCS_CNTRL_SYS_STATE
    {
        <** @description: ADCS System State **>
        UInt8 adcsSysState
        <** @description: ADCS System State Change Request Status
            REQ_COMPLETED 	= 0,
            REQ_NEW_REQ		= 1,
            REQ_IN_PROGRESS = 2,
            REQ_FAILED		= 3,

            E_MAX			= 4

            To enable a payload mode, set this value to COMPLETED.
        **>
        UInt8 adcsSysStateStatus
    }
    
    struct AOCS_CNTRL_REF_PARAMS
    {	
    	<** @description: Roll, Latitude or X component of an ECI pointing vector **>
    	Float refParam1
    	<** @description: Pitch, Longitude or Y component of an ECI pointing vector **>
    	Float refParam2
    	<** @description: Yaw, Altitude or Z component of an ECI pointing vector **>
    	Float refParam3
    }

    struct TaskStats
    {
        <** @details: size = 30 **>
        Int16[] taskStackMaxUnusedSize
    }

    struct SENSOR_MAG_PRIMARY
    {
        <** @description: Magnetometer X axis measurement [uT] in Sensor Frame **>
        Int32 MAG_X
        <** @description: Magnetometer Y axis measurement [uT] in Sensor Frame **>
        Int32 MAG_Y
        <** @description: Magnetometer Z axis measurement [uT] in Sensor Frame **>
        Int32 MAG_Z

    }

    struct SENSOR_MAG_SECONDARY
    {
        <** @description: Magnetometer X axis measurement [uT] in Sensor Frame **>
        Int32 MAG_X
        <** @description: Magnetometer Y axis measurement [uT] in Sensor Frame **>
        Int32 MAG_Y
        <** @description: Magnetometer Z axis measurement [uT] in Sensor Frame **>
        Int32 MAG_Z

    }

    struct SENSOR_GYRO
    {
        <** @description: Gyroscope measurement [urad/s] in Sensor Frame **>
        Int32 GYRO_1
        <** @description: Gyroscope measurement [urad/s] in Sensor Frame **>
        Int32 GYRO_2
        <** @description: Gyroscope measurement [urad/s] in Sensor Frame **>
        Int32 GYRO_3

    }

    struct SENSOR_COARSE_SUN
    {
        <** @description: Coarse Sun Sensor Panel 1 ADC value in Sensor Frame **>
        Int32 CSS_PANEL_1
        <** @description: Coarse Sun Sensor Panel 2 ADC value in Sensor Frame **>
        Int32 CSS_PANEL_2
        <** @description: Coarse Sun Sensor Panel 3 ADC value in Sensor Frame **>
        Int32 CSS_PANEL_3
        <** @description: Coarse Sun Sensor Panel 4 ADC value in Sensor Frame **>
        Int32 CSS_PANEL_4
        <** @description: Coarse Sun Sensor Panel 5 ADC value in Sensor Frame **>
        Int32 CSS_PANEL_5
        <** @description: Coarse Sun Sensor Panel 6 ADC value in Sensor Frame **>
        Int32 CSS_PANEL_6

    }

    struct ES_ADCS_SENSOR_MAG_PRIMARY
    {
        <** @description: Magnetometer X axis most recent measurement [uT] in Satellite Frame **>
        Int32 MAG_X_CURRENT
        <** @description: Magnetometer Y axis most recent measurement [uT] in Satellite Frame **>
        Int32 MAG_Y_CURRENT
        <** @description: Magnetometer Z axis most recent measurement [uT] in Satellite Frame **>
        Int32 MAG_Z_CURRENT
        <** @description: Magnetometer X axis previous measurement [uT] in Satellite Frame **>
        Int32 MAG_X_PREVIOUS
        <** @description: Magnetometer Y axis previous measurement [uT] in Satellite Frame **>
        Int32 MAG_Y_PREVIOUS
        <** @description: Magnetometer Z axis previous measurement [uT] in Satellite Frame **>
        Int32 MAG_Z_PREVIOUS

    }

    struct ES_ADCS_SENSOR_MAG_SECONDARY
    {
        <** @description: Magnetometer X axis most recent measurement [uT] in Satellite Frame **>
        Int32 MAG_X_CURRENT
        <** @description: Magnetometer Y axis most recent measurement [uT] in Satellite Frame **>
        Int32 MAG_Y_CURRENT
        <** @description: Magnetometer Z axis most recent measurement [uT] in Satellite Frame **>
        Int32 MAG_Z_CURRENT
        <** @description: Magnetometer X axis previous measurement [uT] in Satellite Frame **>
        Int32 MAG_X_PREVIOUS
        <** @description: Magnetometer Y axis previous measurement [uT] in Satellite Frame **>
        Int32 MAG_Y_PREVIOUS
        <** @description: Magnetometer Z axis previous measurement [uT] in Satellite Frame **>
        Int32 MAG_Z_PREVIOUS

    }

    struct ES_ADCS_SENSOR_GYRO
    {
        <** @description: Gyroscope X axis most recent measurement [urad/s] in Satellite Frame **>
        Int32 GYRO_X
        <** @description: Gyroscope Y axis most recent measurement [urad/s] in Satellite Frame **>
        Int32 GYRO_Y
        <** @description: Gyroscope Z axis most recent measurement [urad/s] in Satellite Frame **>
        Int32 GYRO_Z

    }

    struct ES_ADCS_SENSOR_CSS
    {
        <** @description: Coarse Sun Sensor Panel 1 measurement normalized in Satellite Frame **>
        Int32 CSS_AXIS_X_PLUS
        <** @description: Coarse Sun Sensor Panel 2 measurement normalized in Satellite Frame **>
        Int32 CSS_AXIS_Y_PLUS
        <** @description: Coarse Sun Sensor Panel 3 measurement normalized in Satellite Frame **>
        Int32 CSS_AXIS_Z_PLUS
        <** @description: Coarse Sun Sensor Panel 4 measurement normalized in Satellite Frame **>
        Int32 CSS_AXIS_X_MINUS
        <** @description: Coarse Sun Sensor Panel 5 measurement normalized in Satellite Frame **>
        Int32 CSS_AXIS_Y_MINUS
        <** @description: Coarse Sun Sensor Panel 6 measurement normalized in Satellite Frame **>
        Int32 CSS_AXIS_Z_MINUS

    }

    struct ES_ADCS_ESTIMATES_BDOT
    {
        <** @description: X axis magnetic field derivative [uT/s] **>
        Int32 MAG_FIELD_DERIV_X
        <** @description: Y axis magnetic field derivative [uT/s] **>
        Int32 MAG_FIELD_DERIV_Y
        <** @description: Z axis magnetic field derivative [uT/s] **>
        Int32 MAG_FIELD_DERIV_Z

    }

    struct ES_ADCS_CONTROL_VALUES_MTQ
    {
        <** @description: X axis magnetorquer control drive strength [-100 to 100], where (-100) is the maximum in negative direction, (100) is the maximum in positive direction and (0) is stopped **>
        Int8 MAGTORQUE_VALUE_X
        <** @description: Y axis magnetorquer control drive strength [-100 to 100], where (-100) is the maximum in negative direction, (100) is the maximum in positive direction and (0) is stopped **>
        Int8 MAGTORQUE_VALUE_Y
        <** @description: Z axis magnetorquer control drive strength [-100 to 100], where (-100) is the maximum in negative direction, (100) is the maximum in positive direction and (0) is stopped **>
        Int8 MAGTORQUE_VALUE_Z
    }

	struct ConOpsFlags
	{
		<** @description: Payload error reported **>
		Boolean PAY_ERR
		<** @description: ADCS pointing error reported - timeout or failure to perform requested pointing requirement **>
		Boolean ADCS_ERR
		<** @description: Detumbling completed flag - raised once detumbling or Y-Thomson is completed  **>
		Boolean DETUMB_COMPLETED
	}
	
	struct ADCS_3
    {
        <** @description: CubeADCS TLM 146 **>
        Int16 est_roll_angle
        <** @description: CubeADCS TLM 146 **>
        Int16 est_pitch_angle
        <** @description: CubeADCS TLM 146 **>
        Int16 est_yaw_angle
        <** @description: CubeADCS TLM 193 **>
        Int16 IGRF_MagField_X
        <** @description: CubeADCS TLM 193 **>
        Int16 IGRF_MagField_Y
        <** @description: CubeADCS TLM 193 **>
        Int16 IGRF_MagField_Z
        <** @description: CubeADCS TLM 193 **>
        Int16 Modelled_Sun_V_X
        <** @description: CubeADCS TLM 193 **>
        Int16 Modelled_Sun_V_Y
        <** @description: CubeADCS TLM 193 **>
        Int16 Modelled_Sun_V_Z
        <** @description: CubeADCS TLM 193 **>
        Int16 EstGyroBias_X
        <** @description: CubeADCS TLM 193 **>
        Int16 EstGyroBias_Y
        <** @description: CubeADCS TLM 193 **>
        Int16 EstGyroBias_Z
        <** @description: CubeADCS TLM 193 **>
        Int16 Innovation_Vec_X
        <** @description: CubeADCS TLM 193 **>
        Int16 Innovation_Vec_Y
        <** @description: CubeADCS TLM 193 **>
        Int16 Innovation_Vec_Z
        <** @description: CubeADCS TLM 193 **>
        Int16 Err_Q1
        <** @description: CubeADCS TLM 193 **>
        Int16 Err_Q2
        <** @description: CubeADCS TLM 193 **>
        Int16 Err_Q3
        <** @description: CubeADCS TLM 193 **>
        Int16 RMS_Q1
        <** @description: CubeADCS TLM 193 **>
        Int16 RMS_Q2
        <** @description: CubeADCS TLM 193 **>
        Int16 RMS_Q3
        <** @description: CubeADCS TLM 193 **>
        Int16 X_AngRate_Cov
        <** @description: CubeADCS TLM 193 **>
        Int16 Y_AngRate_Cov
        <** @description: CubeADCS TLM 193 **>
        Int16 Z_AngRate_Cov
        <** @description: CubeADCS TLM 229 **>
        Int16 X_Rate
        <** @description: CubeADCS TLM 229 **>
        Int16 Y_Rate
        <** @description: CubeADCS TLM 229 **>
        Int16 Z_Rate
        <** @description: CubeADCS TLM 230 **>
        Int16 Q0
        <** @description: CubeADCS TLM 230 **>
        Int16 Q1
        <** @description: CubeADCS TLM 230 **>
        Int16 Q2
    }

    struct ADCS_4
    {
        <** @description: CubeADCS TLM 195 **>
        UInt16 Cubesense1_3V3_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 Cubesense1_SRAM_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 Cubesense2_3V3_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 Cubesense2_SRAM_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 CubeControl_3V3_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 CubeControl_5V_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 CubeControl_Vbat_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 Wheel_1_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 Wheel_2_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 Wheel_3_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 CubeStar_Current
        <** @description: CubeADCS TLM 195 **>
        UInt16 MTQ_Current
        <** @description: CubeADCS TLM 195 **>
        Int16 CubeStar_MCU_Temp
        <** @description: CubeADCS TLM 195 **>
        Int16 ADCS_MCU_Temp
        <** @description: CubeADCS TLM 195 **>
        Int16 MTM_Temp
        <** @description: CubeADCS TLM 195 **>
        Int16 RMTM_Temp
        <** @description: CubeADCS TLM 195 **>
        Int16 X_Rate_Sensor_Temp
        <** @description: CubeADCS TLM 195 **>
        Int16 Y_Rate_Sensor_Temp
        <** @description: CubeADCS TLM 195 **>
        Int16 Z_Rate_Sensor_Temp
	}
	
	struct SENSOR_ACC_PRIMARY
    {
        <** @description: Accelerometer X axis measurement in [mg] in Sensor Frame **>
        Int32 ACC_X
        <** @description: Accelerometer Y axis measurement in [mg] in Sensor Frame **>
        Int32 ACC_Y
        <** @description: Accelerometer Z axis measurement in [mg] in Sensor Frame **>
        Int32 ACC_Z
    }
	
	struct SENSOR_ACC_SECONDARY
    {
        <** @description: Accelerometer X axis measurement in [mg] in Sensor Frame **>
        Int32 ACC_X
        <** @description: Accelerometer Y axis measurement in [mg] in Sensor Frame **>
        Int32 ACC_Y
        <** @description: Accelerometer Z axis measurement in [mg] in Sensor Frame **>
        Int32 ACC_Z
        
    }
	
	struct SENSOR_ACC_PRIMARY_SAT_FRAME
    {
		<** @description: Accelerometer X axis measurement in [mg] in Satellite Frame **>
        Int32 ACC_X
        <** @description: Accelerometer Y axis measurement in [mg] in Satellite Frame **>
        Int32 ACC_Y
        <** @description: Accelerometer Z axis measurement in [mg] in Satellite Frame **>
        Int32 ACC_Z
    }
	
    struct SENSOR_ACC_SECONDARY_SAT_FRAME
    {
		<** @description: Accelerometer X axis measurement in [mg] in Satellite Frame **>
        Int32 ACC_X
        <** @description: Accelerometer Y axis measurement in [mg] in Satellite Frame **>
        Int32 ACC_Y
        <** @description: Accelerometer Z axis measurement in [mg] in Satellite Frame **>
        Int32 ACC_Z
    }

    <** @description: GetPowerDistributionInfo from EPSII_PDM_1 interface **>
    struct EPS_9
    {
        Int32 In_SysBUS_Voltage
        <** @description: Summary for each channel, all outputs **>
        Int32 Out_BatRAW_Output_Sense_U
        Int32 Out_BatRAW_Output_Sense_I
        Int32 Out_BatRAW_Output_Sense_P
        Int32 Out_12V_Output_Sense_U
        Int32 Out_12V_Output_Sense_I
        Int32 Out_12V_Output_Sense_P
        <** @description: in mA. Uses ESEPSII_PDM_ReservedValues on error, if ESEPSIISSVPDM_UNKNOWN_VAL channel may be disabled **>
        Int32 Out_12V_Output_ILimit
        Int32 Out_5V_Output1_Sense_U
        Int32 Out_5V_Output1_Sense_I
        Int32 Out_5V_Output1_Sense_P
        <** @description: in mA. Uses ESEPSII_PDM_ReservedValues on error, if ESEPSIISSVPDM_UNKNOWN_VAL channel may be disabled **>
        Int32 Out_5V_Output1_ILimit
        <** @description: Can provide also 28V with HW configuration **>
        Int32 Out_5V_Output2_Sense_U
        Int32 Out_5V_Output2_Sense_I
        Int32 Out_5V_Output2_Sense_P
        <** @description: in mA. Uses ESEPSII_PDM_ReservedValues on error, if ESEPSIISSVPDM_UNKNOWN_VAL channel may be disabled **>
        Int32 Out_5V_Output2_ILimit
        Int32 Out_3V3_Output1_Sense_U
        Int32 Out_3V3_Output1_Sense_I
        Int32 Out_3V3_Output1_Sense_P
        <** @description: in mA. Uses ESEPSII_PDM_ReservedValues on error, if ESEPSIISSVPDM_UNKNOWN_VAL channel may be disabled **>
        Int32 Out_3V3_Output1_ILimit
        Int32 Out_3V3_Output2_Sense_U
        Int32 Out_3V3_Output2_Sense_I
        Int32 Out_3V3_Output2_Sense_P
        <** @description: in mA. Uses ESEPSII_PDM_ReservedValues on error, if ESEPSIISSVPDM_UNKNOWN_VAL channel may be disabled **>
        Int32 Out_3V3_Output2_ILimit
    }

    <** @description: GetDeviceHealthInfo from EPSII_PDM_1 interface **>
    struct EPS_10
    {
        <** @description: After last reset in seconds. Uses ESEPSII_PDM_ReservedValues on error **>
        Int32 ActiveCPU_RunningTime
        <** @description: Uses ESEPSII_PDM_ReservedValues on error **>
        Int32 ActiveCPU_Voltage
        <** @description: Uses ESEPSII_PDM_ReservedValues on error**>
        Int32 ActiveCPU_Temperature
        <** @description: Uses ESEPSII_PDM_ReservedValues on error**>
        Int32 PCB_Temperature_1
        <** @description: Uses ESEPSII_PDM_ReservedValues on error**>
        Int32 PCB_Temperature_2
        <** @description: Uses ESEPSII_PDM_ReservedValues on error**>
        Int32 NVM_AllocatedSize
        <** @description: Uses ESEPSII_PDM_ReservedValues on error**>
        Int32 NVM_UsedSize
        <** @description: Uses ESEPSII_PDM_ReservedValues on error**>
        Int32 Stack_AllocatedSize
        <** @description: Uses ESEPSII_PDM_ReservedValues on error**>
        Int32 Stack_UsedSize
        UInt8 DPOT_MCP4562_LUP_3V3_1P
        UInt8 DPOT_MCP4562_LUP_3V3_1R
        UInt8 DPOT_MCP4562_LUP_3V3_2P
        UInt8 DPOT_MCP4562_LUP_3V3_2R
        UInt8 DPOT_MCP4562_LUP_5V_1P
        UInt8 DPOT_MCP4562_LUP_5V_1R
        UInt8 DPOT_MCP4562_LUP_5V_2P
        UInt8 DPOT_MCP4562_LUP_5V_2R
        UInt8 DPOT_MCP4562_LUP_12V_P
        UInt8 DPOT_MCP4562_LUP_12V_R
        UInt8 DPOT_MCP4562_OUTU_12V_P
        UInt8 DPOT_MCP4562_OUTU_12V_R
        UInt8 GPIO_PCA9538_U1001
        UInt8 GPIO_PCA9538_U1000
        UInt8 GPIO_PCA9538_U1004
        UInt8 GPIO_PCA9538_U1011
        UInt8 INA_LUP_IN_3V3_1P
        UInt8 INA_LUP_IN_3V3_1R
        UInt8 INA_LUP_IN_3V3_2P
        UInt8 INA_LUP_IN_3V3_2R
        UInt8 INA_LUP_IN_5V_1P
        UInt8 INA_LUP_IN_5V_1R
        UInt8 INA_LUP_IN_5V_2P
        UInt8 INA_LUP_IN_5V_2R
        UInt8 INA_LUP_IN_12V_P
        UInt8 INA_LUP_IN_12V_R
        UInt8 TMP117_U1014
        UInt8 TMP117_U1031
    }

    <** @description: GetRAWSensors from EPSII_PDM_1 interface (Indexes 1-54) **>
    struct EPS_14
    {
        <** @details: size = 54 **>
        Int32[] pdm_1_54_values
    }
	<** @description: Panel temeprature sensors measurements in [degC] in Sensor Frame (mounting locations) **>
	struct SENSOR_PANEL_TEMP
    {
        <** @description: Panel 1 temperature sensor measured temperature [degC] in Sensor Frame **>
        Int16 PAN_1_TEMP
        <** @description: Panel 2 temperature sensor measured temperature [degC] in Sensor Frame **>
        Int16 PAN_2_TEMP
        <** @description: Panel 3 temperature sensor measured temperature [degC] in Sensor Frame **>
        Int16 PAN_3_TEMP
		<** @description: Panel 4 temperature sensor measured temperature [degC] in Sensor Frame **>
        Int16 PAN_4_TEMP
        <** @description: Panel 5 temperature sensor measured temperature [degC] in Sensor Frame **>
        Int16 PAN_5_TEMP
        <** @description: Panel 6 temperature sensor measured temperature [degC] in Sensor Frame **>
        Int16 PAN_6_TEMP

    }
	<** @description: Panel temeprature sensors measurements in [degC] in Satellite Frame **>
	struct SENSOR_PANEL_TEMP_SAT_FRAME
    {
        <** @description: Panel AXIS X PLUS temperature sensor measured temperature [degC] in Satellite Frame **>
        Int16 PAN_X_PLUS_TEMP
        <** @description: Panel AXIS Y PLUS temperature sensor measured temperature [degC] in Satellite Frame **>
        Int16 PAN_Y_PLUS_TEMP
        <** @description: Panel AXIS Z PLUS temperature sensor measured temperature [degC] in Satellite Frame **>
        Int16 PAN_Z_PLUS_TEMP
		<** @description: Panel AXIS X MINUS temperature sensor measured temperature [degC] in Satellite Frame **>
        Int16 PAN_X_MINUS_TEMP
        <** @description: Panel AXIS Y MINUS temperature sensor measured temperature [degC] in Satellite Frame **>
        Int16 PAN_Y_MINUS_TEMP
        <** @description: Panel AXIS Z MINUS temperature sensor measured temperature [degC] in Satellite Frame **>
        Int16 PAN_Z_MINUS_TEMP

    }
	<** @description: Rate sensors temperatures in the sensor frame **>
	struct SENSOR_GYRO_TEMP
    {
        <** @description: Gyroscope temperature [degC] in Sensor Frame **>
        Int16 GYRO_1_TEMP
        <** @description: Gyroscope temperature [degC] in Sensor Frame **>
        Int16 GYRO_2_TEMP
        <** @description: Gyroscope temperature [degC] in Sensor Frame **>
        Int16 GYRO_3_TEMP

    }
	<** @description: Rate sensors temperature for the three primary axes (Satellite Frame) **>
	struct SENSOR_GYRO_TEMP_SAT_FRAME
    {
        <** @description: Gyroscope X axis most recent temperature measurement [degC] in Satellite Frame **>
        Int16 GYRO_X_TEMP
        <** @description: Gyroscope Y axis most recent temperature measurement [degC] in Satellite Frame **>
        Int16 GYRO_Y_TEMP
        <** @description: Gyroscope Z axis most recent temperature measurement [degC] in Satellite Frame **>
        Int16 GYRO_Z_TEMP

    }
	
	<** @description: CubeADCS Gen2 common operational status - TLM_137, TLM_183, TLM_230 **>
	struct CUBEADCS_GEN2_OP_STATUS_COMMON
	{
	    <** @description: Boot State **>
        UInt8 State
        <** @description: Cause of the last reset **>
        UInt8 ResetReason
        <** @description: Set if CubeComputer is configured to dual boot **>
        Boolean DualBankBoot
        <** @description: Bootloader failed to read information about the programmed application **>
        Boolean AppReadError
        <** @description: Bootloader discerned that no application is programmed **>
        Boolean AppEmptyError
        <** @description: Bootloader discerned that the file programmed in to the application region is of the wrong type **>
        Boolean AppTypeError
        <** @description: Bootloader discerned that the file programmed in to the application region has an incorrect vector table offset **>
        Boolean AppVectTblError
        <** @description: Bootloader failed to read information about the programmed config **>
        Boolean ConfigReadError
        <** @description: Bootloader discerned that no config is programmed **>
        Boolean ConfigEmptyError
        <** @description: Bootloader discerned that the file programmed in to the config region is of the wrong type **>
        Boolean ConfigTypeError
        <** @description: Bootloader discerned that the application and config do not match **>
        Boolean ConfigMismatchError
        <** @description: Bootloader failed to set data in the shared location for the application **>
        Boolean SharedParamsError
        <** @description: Bootloader port validation. Only applicable to CubeComputer. **>
        Boolean PortValidationError
        <** @description: Bootloader port discovery. Only applicable to CubeComputer. **>
        Boolean PortDiscoveryError
        <** @description: OTP serial number is invalid **>
        Boolean OtpSerialError
        <** @description: Config serial number is invalid **>
        Boolean CfgSerialError
        <** @description: OTP/Config serial numbers do not match **>
        Boolean SerialMismatchError
        <** @description: Set if the bootloader failed to remove write protection on the config region **>
        Boolean ConfigUnlockError
        <** @description: CubeComputer only. Set if the bootloader's config is invalid and the default configuration is being used. **>
        Boolean ConfigInvalidError       
		<** @description: RWheel 0 **>
		UInt8 rwl0
		<** @description: RWheel 1 **>
		UInt8 rwl1
		<** @description: RWheel 2 **>
		UInt8 rwl2
		<** @description: RWheel 3 **>
		UInt8 rwl3
		<** @description: Magnetometer 0 **>
		UInt8 mag0
		<** @description: Magnetometer 1 **>
		UInt8 mag1
		<** @description: Gyro 0 **>
		UInt8 gyro0
		<** @description: Gyro 1 **>
		UInt8 gyro1
		<** @description: Fine Sun Sensor 0 **>
		UInt8 fss0
		<** @description: Fine Sun Sensor 1 **>
		UInt8 fss1
		<** @description: Fine Sun Sensor 2 **>
		UInt8 fss2
		<** @description: Fine Sun Sensor 3 **>
		UInt8 fss3
		<** @description: Horizon Sensor 0 **>
		UInt8 hss0
		<** @description: Horizon Sensor 1 **>
		UInt8 hss1
		<** @description: Star Tracker 0 **>
		UInt8 str0
		<** @description: Star Tracker 1 **>
		UInt8 str1
		<** @description: External Sensor 0 **>
		UInt8 extSensor0
		<** @description: External Sensor 1 **>
		UInt8 extSensor1
		<** @description: Tctlm comms master service error code (node comms) **>
        UInt32 MasterSvc
        <** @description: FRAM file system error code. **>
        UInt32 FramFsSvc
        <** @description: Event log service error code. **>
        UInt32 EventLogSvc
        <** @description: Image log service error code. **>
        UInt32 ImgLogSvc
        <** @description: Telemetry log service error code. **>
        UInt32 TlmLogSvc
        <** @description: IMU/Gyro service error code. **>
        UInt32 ImuSvc
	}
	
	<** @description: CubeADCS Gen2 application control program operational status - TLM_185, TLM_199, TLM_200 **>
	struct CUBEADCS_GEN2_OP_STATUS_APP
	{
		<** @description: TLM_184 Run Mode **>
		UInt8 run_mode
		<** @description: Used control mode type **>
		UInt8 control_mode
		<** @description: Magnetic controller timeout **>
		UInt16 magnetic_control_timeout
		<** @description: Main estimation mode **>
		UInt8 estimator_main
		<** @description: Backup estimation mode **>
		UInt8 estimator_backup
		<** @description: TLM_200 Operational State **>
		UInt8 adcs_op_state
	}
    
    <** @description: CubeADCS Gen2 TLM_166 - Health telemetry for cubenode pst3s **>
    struct CUBEADCS_GEN2_TLM_FRAME_166
    {
        <** @description: STR0 MCU Temperature  (measurment unit is [°C]) **>
        Double str0McuTemp 
        <** @description: STR0 MCU current  (measurment unit is [mA]) **>        
        Double str0McuCurrent              
        <** @description: STR0 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 str0McuVoltage              
        <** @description: STR0 PST3S current  (measurment unit is [mA]) **>
        Double str0Pst3sCurrent            
        <** @description: STR0 PST3S CAM overcurrent  **>
        Boolean str0Pst3sOvercurrent    
        <** @description: STR1 MCU Temperature  (measurment unit is [°C]) **>
        Double str1McuTemp                 
        <** @description: STR1 MCU current  (measurment unit is [mA]) **>
        Double str1McuCurrent              
        <** @description: STR1 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 str1McuVoltage              
        <** @description: STR1 PST3S current  (measurment unit is [mA]) **>
        Double str1Pst3sCurrent            
        <** @description: STR1 PST3S CAM overcurrent  **>
        Boolean str1Pst3sOvercurrent    
    }
    
    <** @description: CubeADCS Gen2 TLM_167 - Health telemetry for CubeMag magnetometer **>
    struct CUBEADCS_GEN2_TLM_FRAME_167
    {
        <** @description: MAG0 MCU Temperature  (measurment unit is [°C]) **>
        Double mag0McuTemp                 
        <** @description: MAG0 MCU current  (measurment unit is [mA]) **>
        Double mag0McuCurrent              
        <** @description: MAG0 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 mag0McuVoltage              
        <** @description: MAG0 Detector Temperature  (measurment unit is [°C]) **>
        Double mag0PrimaryTemp             
        <** @description: MAG0 Detector Current  (measurment unit is [°C]) **>
        Double mag0RedTemp                 
        <** @description: MAG0 Deploy Burn Current  (measurment unit is [mA]) **>
        UInt32 mag0BurnCurrent             
        <** @description: MAG0 Deploy Pin State  **>
        Boolean mag0DeployPinState      
        <** @description: MAG0 Burn Pin State  **>
        Boolean mag0BurnPinState        
        <** @description: MAG0 Burn Under Current Flag  **>
        Boolean mag0BurnUnderCurrent    
        <** @description: MAG0 Burn Over Current Flag  **>
        Boolean mag0BurnOverCurrent     
        <** @description: MAG0 Deployment timeout Flag  **>
        Boolean mag0DeployTimeout       
        <** @description: MAG1 MCU Temperature  (measurment unit is [°C]) **>
        Double mag1McuTemp                 
        <** @description: MAG1 MCU current  (measurment unit is [mA]) **>
        Double mag1McuCurrent              
        <** @description: MAG1 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 mag1McuVoltage              
        <** @description: MAG1 Detector Temperature  (measurment unit is [°C]) **>
        Double mag1PrimaryTemp             
        <** @description: MAG1 Detector Current  (measurment unit is [°C]) **>
        Double mag1RedTemp                 
        <** @description: MAG1 Deploy Burn Current  (measurment unit is [mA]) **>
        UInt32 mag1BurnCurrent             
        <** @description: MAG1 Deploy Pin State  **>
        Boolean mag1DeployPinState      
        <** @description: MAG1 Burn Pin State  **>
        Boolean mag1BurnPinState        
        <** @description: MAG1 Burn Under Current Flag  **>
        Boolean mag1BurnUnderCurrent    
        <** @description: MAG1 Burn Over Current Flag  **>
        Boolean mag1BurnOverCurrent     
        <** @description: MAG1 Deployment timeout Flag  **>
        Boolean mag1DeployTimeout       
    }
    
    <** @description: CubeADCS Gen2 TLM_168 - Health telemetry for CubeSense Sun **>
    struct CUBEADCS_GEN2_TLM_FRAME_168
    {
        <** @description: FSS0 MCU Temperature  (measurment unit is [°C]) **>
        Double fss0McuTemp                
        <** @description: FSS0 MCU current  (measurment unit is [mA]) **>
        Double fss0McuCurrent             
        <** @description: FSS0 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 fss0McuVoltage             
        <** @description: FSS0 Camera current  (measurment unit is [mA]) **>
        Double fss0CurrentCam             
        <** @description: FSS0 SRAM current  (measurment unit is [mA]) **>
        Double fss0CurrentSram            
        <** @description: FSS0 CAM overcurrent detected  **>
        Boolean fss0OvercurrentCam     
        <** @description: FSS0 SRAM overcurrent detected  **>
        Boolean fss0OvercurrentSram    
        <** @description: FSS1 MCU Temperature  (measurment unit is [°C]) **>
        Double fss1McuTemp                
        <** @description: FSS1 MCU current  (measurment unit is [mA]) **>
        Double fss1McuCurrent             
        <** @description: FSS1 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 fss1McuVoltage             
        <** @description: FSS1 Camera current  (measurment unit is [mA]) **>
        Double fss1CurrentCam             
        <** @description: FSS1 SRAM current  (measurment unit is [mA]) **>
        Double fss1CurrentSram            
        <** @description: FSS1 CAM overcurrent detected  **>
        Boolean fss1OvercurrentCam     
        <** @description: FSS1 SRAM overcurrent detected  **>
        Boolean fss1OvercurrentSram    
        <** @description: FSS2 MCU Temperature  (measurment unit is [°C]) **>
        Double fss2McuTemp                
        <** @description: FSS2 MCU current  (measurment unit is [mA]) **>
        Double fss2McuCurrent             
        <** @description: FSS2 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 fss2McuVoltage             
        <** @description: FSS2 Camera current  (measurment unit is [mA]) **>
        Double fss2CurrentCam             
        <** @description: FSS2 SRAM current  (measurment unit is [mA]) **>
        Double fss2CurrentSram            
        <** @description: FSS2 CAM overcurrent detected  **>
        Boolean fss2OvercurrentCam     
        <** @description: FSS2 SRAM overcurrent detected  **>
        Boolean fss2OvercurrentSram    
        <** @description: FSS3 MCU Temperature  (measurment unit is [°C]) **>
        Double fss3McuTemp                
        <** @description: FSS3 MCU current  (measurment unit is [mA]) **>
        Double fss3McuCurrent             
        <** @description: FSS3 MCU supply voltage  (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 fss3McuVoltage             
        <** @description: FSS3 Camera current  (measurment unit is [mA]) **>
        Double fss3CurrentCam             
        <** @description: FSS3 SRAM current  (measurment unit is [mA]) **>
        Double fss3CurrentSram            
        <** @description: FSS3 CAM overcurrent detected  **>
        Boolean fss3OvercurrentCam     
        <** @description: FSS3 SRAM overcurrent detected  **>
        Boolean fss3OvercurrentSram    
    }
    
    <** @description: CubeADCS Gen2 TLM_169 - Torquer Current measurements **>
    struct CUBEADCS_GEN2_TLM_FRAME_169
    {
        <** @description: Total magnetorquer 1 positive current peak (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq1TotalCurrentPeakPos                                  
        <** @description: Total magnetorquer 1 positive current average (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq1TotalCurrentAveragePos                               
        <** @description: Total magnetorquer 1 negative current peak (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq1TotalCurrentPeakNeg                                  
        <** @description: Total magnetorquer 1 negative current average (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq1TotalCurrentAverageNeg                               
        <** @description: Total magnetorquer 2 positive current peak (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq2TotalCurrentPeakPos                                  
        <** @description: Total magnetorquer 2 positive current average (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq2TotalCurrentAveragePos                               
        <** @description: Total magnetorquer 2 negative current peak (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq2TotalCurrentPeakNeg                                  
        <** @description: Total magnetorquer 2 negative current average (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq2TotalCurrentAverageNeg                               
        <** @description: Total magnetorquer 3 positive current peak (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq3TotalCurrentPeakPos                                  
        <** @description: Total magnetorquer 3 positive current average (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq3TotalCurrentAveragePos                               
        <** @description: Total magnetorquer 3 negative current peak (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq3TotalCurrentPeakNeg                                  
        <** @description: Total magnetorquer 3 negative current average (mA)  (measurment unit is [mA]. valid range is between -500 mA and 500 mA) **>
        Float mtq3TotalCurrentAverageNeg                               
        <** @description: The polarity of magnetorquer 1 on the last iteration - type is TctlmCubeComputerControlProgram8_MtqPolarity **>
        UInt8 mtq1Polarity    
        <** @description: The polarity of magnetorquer 2 on the last iteration - type is TctlmCubeComputerControlProgram8_MtqPolarity **>
        UInt8 mtq2Polarity    
        <** @description: The polarity of magnetorquer 3 on the last iteration - type is TctlmCubeComputerControlProgram8_MtqPolarity **>
        UInt8 mtq3Polarity    
    }
    
    <** @description: CubeADCS Gen2 TLM_170 - Raw CubeSense Sun telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_170
    {
        <** @description: Unix time integer seconds  (measurment unit is [s]) **>
        UInt32 timeSeconds                                                         
        <** @description: Unix time fraction nanoseconds  (measurment unit is [ns]) **>
        UInt32 timeNs                                                              
        <** @description: FSS0 alpha Angle  (measurment unit is [deg]) **>
        Double fss0Alpha                                                           
        <** @description: FSS0 beta Angle  (measurment unit is [deg]) **>
        Double fss0Beta                                                            
        <** @description: FSS0 capture result  **>
        UInt8 fss0CaptureResult     
        <** @description: FSS0 detection result  **>
        UInt8 fss0DetectionResult    
        <** @description: FSS1 alpha Angle  (measurment unit is [deg]) **>
        Double fss1Alpha                                                           
        <** @description: FSS1 beta Angle  (measurment unit is [deg]) **>
        Double fss1Beta                                                            
        <** @description: FSS1 capture result  **>
        UInt8 fss1CaptureResult     
        <** @description: FSS1 detection result  **>
        UInt8 fss1DetectionResult    
        <** @description: FSS2 alpha Angle  (measurment unit is [deg]) **>
        Double fss2Alpha                                                           
        <** @description: FSS2 beta Angle  (measurment unit is [deg]) **>
        Double fss2Beta                                                            
        <** @description: FSS2 capture result  **>
        UInt8 fss2CaptureResult     
        <** @description: FSS2 detection result  **>
        UInt8 fss2DetectionResult    
        <** @description: FSS3 alpha Angle  (measurment unit is [deg]) **>
        Double fss3Alpha                                                           
        <** @description: FSS3 beta Angle  (measurment unit is [deg]) **>
        Double fss3Beta                                                            
        <** @description: FSS3 capture result  **>
        UInt8 fss3CaptureResult     
        <** @description: FSS3 detection result  **>
        UInt8 fss3DetectionResult      
    }
    
    <** @description: CubeADCS Gen2 TLM_171 - Raw external sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_171
    {
        <** @description: Unix time integer seconds  (measurment unit is [s]) **>
        UInt32 timeSeconds   
        <** @description: Unix time fraction nanoseconds  (measurment unit is [ns]) **>        
        UInt32 timeNs                   
        <** @description: ExtSensor0 raw float 0  **>
        Float extSensor0Float0         
        <** @description: ExtSensor0 raw float 1  **>
        Float extSensor0Float1         
        <** @description: ExtSensor0 raw float 2  **>
        Float extSensor0Float2         
        <** @description: ExtSensor0 raw float 3  **>
        Float extSensor0Float3         
        <** @description: ExtSensor0 raw float 4  **>
        Float extSensor0Float4         
        <** @description: ExtSensor0 raw float 5  **>
        Float extSensor0Float5         
        <** @description: ExtSensor1 raw float 0  **>
        Float extSensor1Float0         
        <** @description: ExtSensor1 raw float 1  **>
        Float extSensor1Float1         
        <** @description: ExtSensor1 raw float 2  **>
        Float extSensor1Float2         
        <** @description: ExtSensor1 raw float 3  **>
        Float extSensor1Float3         
        <** @description: ExtSensor1 raw float 4  **>
        Float extSensor1Float4         
        <** @description: ExtSensor1 raw float 5  **>
        Float extSensor1Float5         
        <** @description: ExtSensor0 valid flag  **>
        Boolean extSensor0IsValid    
        <** @description: ExtSensor1 valid flag  **>
        Boolean extSensor1IsValid    
    }
    
    <** @description: CubeADCS Gen2 TLM_172 - Controller telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_172
    {
        <** @description: Unix time integer seconds  (measurment unit is [s]) **>
        UInt32 timeSeconds                                                 
        <** @description: Unix time fraction nanoseconds  (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Commanded roll angle (measurment unit is [deg]) **>
        Double rpyCmdRoll 
        <** @description: Commanded pitch angle (measurment unit is [deg]) **>
        Double rpyCmdPitch
        <** @description: Commanded yaw angle (measurment unit is [deg]) **>
        Double rpyCmdYaw
        <** @description: Error roll angle (steering) (measurment unit is [deg]) **>
        Double rpyErrRoll
        <** @description: Error pitch angle (steering) (measurment unit is [deg]) **>
        Double rpyErrPitch
        <** @description: Error yaw angle (steering) (measurment unit is [deg]) **>
        Double rpyErrYaw
        <** @description: Reference ground/GEO target latitude (measurment unit is [deg]. valid range is between -90 deg and 90 deg) **>
        Float tgtRefLat
        <** @description: Reference ground/GEO target longitude (measurment unit is [deg]. valid range is between -180 deg and 180 deg) **>
        Float tgtRefLon
        <** @description: Reference ground/GEO target altitude (measurment unit is [km]) **>
        Int32 tgtRefAlt
        <** @description: Control error quaternion vector Q0 **>
        Double quatErrQ0
        <** @description: Control error quaternion vector Q1 **>
        Double quatErrQ1        
        <** @description: Control error quaternion vector Q2 **>
        Double quatErrQ2        
        <** @description: RWL0 speed command  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl0CmdSpeed       
        <** @description: RWL1 speed command  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl1CmdSpeed        
        <** @description: RWL2 speed command  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl2CmdSpeed       
        <** @description: RWL3 speed command  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl3CmdSpeed       
        <** @description: RWL0 momentum command (measurment unit is [N.m.s]. valid range is between -10 N.m.s and 10 N.m.s) **>
        Float rwl0CmdMom        
        <** @description: RWL1 momentum command (measurment unit is [N.m.s]. valid range is between -10 N.m.s and 10 N.m.s) **>
        Float rwl1CmdMom        
        <** @description: RWL2 momentum command (measurment unit is [N.m.s]. valid range is between -10 N.m.s and 10 N.m.s) **>
        Float rwl2CmdMom        
        <** @description: RWL3 momentum command (measurment unit is [N.m.s]. valid range is between -10 N.m.s and 10 N.m.s) **>
        Float rwl3CmdMom        
        <** @description: RWL0 torque command (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float rwl0CmdTorque        
        <** @description: RWL1 torque command (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float rwl1CmdTorque        
        <** @description: RWL2 torque command (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float rwl2CmdTorque        
        <** @description: RWL3 torque command (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float rwl3CmdTorque        
        <** @description: MTQ0 dipole moment command (measurment unit is [A.m^2]) **>
        Double mtq0CmdDip       
        <** @description: MTQ1 dipole moment command (measurment unit is [A.m^2]) **>
        Double mtq1CmdDip       
        <** @description: MTQ2 dipole moment command (measurment unit is [A.m^2]) **>
        Double mtq2CmdDip        
        <** @description: MTQ0 torque command (measurment unit is [N.m]. valid range is between -0.001 N.m and 0.001 N.m) **>
        Float mtq0CmdTorque       
        <** @description: MTQ1 torque command (measurment unit is [N.m]. valid range is between -0.001 N.m and 0.001 N.m) **>
        Float mtq1CmdTorque        
        <** @description: MTQ2 torque command (measurment unit is [N.m]. valid range is between -0.001 N.m and 0.001 N.m) **>
        Float mtq2CmdTorque        
        <** @description: MTQ0 on-time command (measurment unit is [ms]) **>
        Int16 mtq0CmdOnTime        
        <** @description: MTQ1 on-time command (measurment unit is [ms]) **>
        Int16 mtq1CmdOnTime        
        <** @description: MTQ2 on-time command (measurment unit is [ms]) **>
        Int16 mtq2CmdOnTime        
        <** @description: Magnetic control timeout (measurment unit is [s]) **>
        UInt16 magConTimeout        
        <** @description: Active control mode (measurment unit is [degps]) **>
        UInt8 conModeActive        
        <** @description: RWL0 error flag (measurment unit is [degps]) **>
        Boolean rwl0ErrorFlag        
        <** @description: RWL1 error flag (measurment unit is [degps]) **>
        Boolean rwl1ErrorFlag        
        <** @description: RWL2 error flag (measurment unit is [degps]) **>
        Boolean rwl2ErrorFlag        
        <** @description: RWL3 error flag (measurment unit is [degps]) **>
        Boolean rwl3ErrorFlag       
        <** @description: RWL0 active flag (measurment unit is [degps]) **>
        Boolean rwl0ActiveFlag        
        <** @description: RWL1 active flag (measurment unit is [degps]) **>
        Boolean rwl1ActiveFlag        
        <** @description: RWL2 active flag (measurment unit is [degps]) **>
        Boolean rwl2ActiveFlag        
        <** @description: RWL3 active flag (measurment unit is [degps]) **>
        Boolean rwl3ActiveFlag
    }
    
    <** @description: CubeADCS Gen2 TLM_173 - Backup estimator telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_173
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Estimated roll angle (measurment unit is [deg]) **>
        Double estRpyRoll
        <** @description: Estimated pitch angle (measurment unit is [deg]) **>
        Double estRpyPitch
        <** @description: Estimated yaw angle (measurment unit is [deg]) **>
        Double estRpyYaw
        <** @description: Estimated ORC quaternion Q0 **>
        Double estQuatQ0
        <** @description: Estimated ORC quaternion Q1 **>
        Double estQuatQ1
        <** @description: Estimated ORC quaternion Q2 **>
        Double estQuatQ2
        <** @description: Estimated ORC quaternion Q3 **>
        Double estQuatQ3
        <** @description: Estimated gyro bias X component (measurment unit is [degps]) **>
        Double estGyroBiasX
        <** @description: Estimated gyro bias Y component (measurment unit is [degps]) **>
        Double estGyroBiasY
        <** @description: Estimated gyro bias Z component (measurment unit is [degps]) **>
        Double estGyroBiasZ
        <** @description: Estimated body rate (ORC) X component (measurment unit is [degps]) **>
        Double estRateOrcX
        <** @description: Estimated body rate (ORC) Y component (measurment unit is [degps]) **>
        Double estRateOrcY
        <** @description: Estimated body rate (ORC) Z component (measurment unit is [degps]) **>
        Double estRateOrcZ
        <** @description: Estimated body rate (IRC) X component (measurment unit is [degps]) **>
        Double estRateIrcX
        <** @description: Estimated body rate (IRC) Y component (measurment unit is [degps]) **>
        Double estRateIrcY
        <** @description: Estimated body rate (IRC) Z component (measurment unit is [degps]) **>
        Double estRateIrcZ
        <** @description: Estimated gyroscopic torque X component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float estGyrTorqueX
        <** @description: Estimated gyroscopic torque Y component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float estGyrTorqueY
        <** @description: Estimated gyroscopic torque Z component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float estGyrTorqueZ
        <** @description: Innovation vector X component **>
        Double estInnovX
        <** @description: Innovation vector Y component **>
        Double estInnovY
        <** @description: Innovation vector Z component **>
        Double estInnovZ
        <** @description: StdDev of estimated rate X component (measurment unit is [degps]) **>
        Double estStdDevRateX
        <** @description: StdDev of estimated rate Y component (measurment unit is [degps]) **>
        Double estStdDevRateY
        <** @description: StdDev of estimated rate Z component (measurment unit is [degps]) **>
        Double estStdDevRateZ
        <** @description: StdDev of estimated quaternion Q0 component **>
        Double estStdDevQ0
        <** @description: StdDev of estimated quaternion Q1 component **>
        Double estStdDevQ1
        <** @description: StdDev of estimated quaternion Q2 component **>
        Double estStdDevQ2
        <** @description: Active estimator mode **>
        UInt8 estModeActive
    }
    
    <** @description: CubeADCS Gen2 TLM_174 - Models telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_174
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Satellite ECI position vector X component (measurment unit is [m]) **>
        Int32 satPosEciX
        <** @description: Satellite ECI position vector Y component (measurment unit is [m]) **>
        Int32 satPosEciY
        <** @description: Satellite ECI position vector Z component (measurment unit is [m]) **>
        Int32 satPosEciZ
        <** @description: Satellite ECI velocity vector X component (measurment unit is [m/s]) **>
        Int16 satVelEciX
        <** @description: Satellite ECI velocity vector Y component (measurment unit is [m/s]) **>
        Int16 satVelEciY
        <** @description: Satellite ECI velocity vector Z component (measurment unit is [m/s]) **>
        Int16 satVelEciZ
        <** @description: Satellite geodetic latitude (measurment unit is [deg]) **>
        Double satLatGeod
        <** @description: Satellite geocentric latitude (measurment unit is [deg]) **>
        Double satLatGeoc
        <** @description: Satellite longitude (measurment unit is [deg]) **>
        Double satLon
        <** @description: Satellite altitude (measurment unit is [km]) **>
        Double satAlt
        <** @description: Target satellite ECI position vector X component (measurment unit is [m]) **>
        Int32 tgtPosEciX
        <** @description: Target satellite ECI position vector Y component (measurment unit is [m]) **>
        Int32 tgtPosEciY
        <** @description: Target satellite ECI position vector Z component (measurment unit is [m]) **>
        Int32 tgtPosEciZ
        <** @description: IGRF ORC model X component (measurment unit is [uT]) **>
        Double modelMagOrcX
        <** @description: IGRF ORC model Y component (measurment unit is [uT]) **>
        Double modelMagOrcY
        <** @description: IGRF ORC model Z component (measurment unit is [uT]) **>
        Double modelMagOrcZ
        <** @description: Sun ORC model X component **>
        Double modelSunOrcX
        <** @description: Sun ORC model Y component **>
        Double modelSunOrcY
        <** @description: Sun ORC model Z component **>
        Double modelSunOrcZ
        <** @description: Sun beta angle with orbit plane (measurment unit is [deg]) **>
        Double modelSunBetaAngle
        <** @description: Horizon angle in XoYo plane (measurment unit is [deg]) **>
        Double modelHorRhoAngle
        <** @description: Horizon East angle from Xo direction (measurment unit is [deg]) **>
        Double modelHorXoEastAngle
        <** @description: Horizon East angle from Yi direction (measurment unit is [deg]) **>
        Double modelHorYiEastAngle
        <** @description: Satellite to ground ORC target vector X component (measurment unit is [m]) **>
        Int32 sat2TgtGndOrcX
        <** @description: Satellite to ground ORC target vector Y component (measurment unit is [m]) **>
        Int32 sat2TgtGndOrcY
        <** @description: Satellite to ground ORC target vector Z component (measurment unit is [m]) **>
        Int32 sat2TgtGndOrcZ
        <** @description: ASGP4 batch counter **>
        UInt16 asgp4BatchCtr
        <** @description: Average position error between GNSS and ASGP4 (measurment unit is [m]) **>
        UInt16 asgp4PosDelta
        <** @description: Active orbit mode **>
        UInt8 orbModeActive
        <** @description: GNSS and ASGP4 position error differs too much **>
        Boolean asgp4Error
        <** @description: Eclipse flag **>
        Boolean eclipse
    }
    
    <** @description: CubeADCS Gen2 TLM_175 - Calibrated GNSS sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_175
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Satellite ECEF position vector X component (measurment unit is [m]) **>
        Float gnssSatPosEcefX
        <** @description: Satellite ECEF position vector Y component (measurment unit is [m]) **>
        Float gnssSatPosEcefY
        <** @description: Satellite ECEF position vector Z component (measurment unit is [m]) **>
        Float gnssSatPosEcefZ
        <** @description: Satellite ECEF velocity vector X component (measurment unit is [m/s]) **>
        Float gnssSatVelEcefX
        <** @description: Satellite ECEF velocity vector Y component (measurment unit is [m/s]) **>
        Float gnssSatVelEcefY
        <** @description: Satellite ECEF velocity vector Z component (measurment unit is [m/s]) **>
        Float gnssSatVelEcefZ
        <** @description: GNSS-supplied unix time integer seconds (measurment unit is [s]) **>
        UInt32 gnssTimeSeconds
        <** @description: GNSS-supplied unix time nanoseconds (measurment unit is [ns]) **>
        UInt32 gnssTimeNs
        <** @description: GNSS valid flag **>
        Boolean gnssIsValid
    }    

    <** @description: CubeADCS Gen2 TLM_176 - Calibrated HSS sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_176
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: HSS0 calibrated unit vector X component **>
        Double hss0CalVecX
        <** @description: HSS0 calibrated unit vector Y component **>
        Double hss0CalVecY
        <** @description: HSS0 calibrated unit vector Z component **>
        Double hss0CalVecZ
        <** @description: HSS1 calibrated unit vector X component **>
        Double hss1CalVecX
        <** @description: HSS1 calibrated unit vector Y component **>
        Double hss1CalVecY
        <** @description: HSS1 calibrated unit vector Z component **>
        Double hss1CalVecZ
        <** @description: HSS0 valid flag **>
        Boolean hss0IsValid
        <** @description: HSS1 valid flag **>
        Boolean hss1IsValid
    
    }

    <** @description: CubeADCS Gen2 TLM_177 - Calibrated MAG sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_177
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: MAG0 calibrated vector X component (measurment unit is [uT]) **>
        Double mag0CalVecX
        <** @description: MAG0 calibrated vector Y component (measurment unit is [uT]) **>
        Double mag0CalVecY
        <** @description: MAG0 calibrated vector Z component (measurment unit is [uT]) **>
        Double mag0CalVecZ
        <** @description: MAG1 calibrated vector X component (measurment unit is [uT]) **>
        Double mag1CalVecX
        <** @description: MAG1 calibrated vector Y component (measurment unit is [uT]) **>
        Double mag1CalVecY
        <** @description: MAG1 calibrated vector Z component (measurment unit is [uT]) **>
        Double mag1CalVecZ
        <** @description: MAG0 valid flag **>
        Boolean mag0IsValid
        <** @description: MAG1 valid flag **>
        Boolean mag1IsValid
        <** @description: MAG0 best for estimators flag **>
        Boolean mag0IsBest
        <** @description: MAG1 best for estimators flag **>
        Boolean mag1IsBest
    }

    <** @description: CubeADCS Gen2 TLM_178 - Calibrated FSS sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_178
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: FSS0 calibrated unit vector X component **>
        Double fss0CalVecX
        <** @description: FSS0 calibrated unit vector Y component **>
        Double fss0CalVecY
        <** @description: FSS0 calibrated unit vector Z component **>
        Double fss0CalVecZ
        <** @description: FSS1 calibrated unit vector X component **>
        Double fss1CalVecX
        <** @description: FSS1 calibrated unit vector Y component **>
        Double fss1CalVecY
        <** @description: FSS1 calibrated unit vector Z component **>
        Double fss1CalVecZ
        <** @description: FSS2 calibrated unit vector X component **>
        Double fss2CalVecX
        <** @description: FSS2 calibrated unit vector Y component **>
        Double fss2CalVecY
        <** @description: FSS2 calibrated unit vector Z component **>
        Double fss2CalVecZ
        <** @description: FSS3 calibrated unit vector X component **>
        Double fss3CalVecX
        <** @description: FSS3 calibrated unit vector Y component **>
        Double fss3CalVecY
        <** @description: FSS3 calibrated unit vector Z component **>
        Double fss3CalVecZ
        <** @description: FSS0 valid flag **>
        Boolean fss0IsValid
        <** @description: FSS1 valid flag **>
        Boolean fss1IsValid
        <** @description: FSS2 valid flag **>
        Boolean fss2IsValid
        <** @description: FSS3 valid flag **>
        Boolean fss3IsValid
        <** @description: FSS0 best for estimators flag **>
        Boolean fss0IsBest
        <** @description: FSS1 best for estimators flag **>
        Boolean fss1IsBest
        <** @description: FSS2 best for estimators flag **>
        Boolean fss2IsBest
        <** @description: FSS3 best for estimators flag **>
        Boolean fss3IsBest
    }

    <** @description: CubeADCS Gen2 TLM_179 - Raw CubeSense Earth telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_179
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: HSS0 raw elevation angle (measurment unit is [deg]) **>
        Double hss0RawElev
        <** @description: HSS0 raw rotation angle (measurment unit is [deg]) **>
        Double hss0RawRot
        <** @description: HSS0 capture result **>
        UInt8 hss0CaptureResult
        <** @description: HSS0 detection result **>
        UInt8 hss0DetectionResult
        <** @description: HSS1 raw elevation angle (measurment unit is [deg]) **>
        Double hss1RawElev
        <** @description: HSS1 raw rotation angle (measurment unit is [deg]) **>
        Double hss1RawRot
        <** @description: HSS1 capture result **>
        UInt8 hss1CaptureResult
        <** @description: HSS1 detection result **>
        UInt8 hss1DetectionResult
    }

    <** @description: CubeADCS Gen2 TLM_180 - Raw MAG sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_180
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: MAG0 raw vector X component (measurment unit is [uT]) **>
        Double mag0RawVecX
        <** @description: MAG0 raw vector Y component (measurment unit is [uT]) **>
        Double mag0RawVecY
        <** @description: MAG0 raw vector Z component (measurment unit is [uT]) **>
        Double mag0RawVecZ
        <** @description: MAG1 raw vector X component (measurment unit is [uT]) **>
        Double mag1RawVecX
        <** @description: MAG1 raw vector Y component (measurment unit is [uT]) **>
        Double mag1RawVecY
        <** @description: MAG1 raw vector Z component (measurment unit is [uT]) **>
        Double mag1RawVecZ
        <** @description: MAG0 valid flag **>
        Boolean mag0IsValid
        <** @description: MAG1 valid flag **>
        Boolean mag1IsValid
    }

    <** @description: CubeADCS Gen2 TLM_203 - Raw CSS sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_203
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: CSS0 raw measurement **>
        UInt8 css0Raw
        <** @description: CSS1 raw measurement **>
        UInt8 css1Raw
        <** @description: CSS2 raw measurement **>
        UInt8 css2Raw
        <** @description: CSS3 raw measurement **>
        UInt8 css3Raw
        <** @description: CSS4 raw measurement **>
        UInt8 css4Raw
        <** @description: CSS5 raw measurement **>
        UInt8 css5Raw
        <** @description: CSS6 raw measurement **>
        UInt8 css6Raw
        <** @description: CSS7 raw measurement **>
        UInt8 css7Raw
        <** @description: CSInt8 raw measurement **>
        UInt8 csInt8Raw
        <** @description: CSS9 raw measurement **>
        UInt8 css9Raw
        <** @description: CSS valid flag **>
        Boolean cssIsValid
    }

    <** @description: CubeADCS Gen2 TLM_204 - Raw GYR sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_204
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: GYR0 raw rate X component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro0RawRateX
        <** @description: GYR0 raw rate Y component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro0RawRateY
        <** @description: GYR0 raw rate Z component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro0RawRateZ
        <** @description: GYR1 raw rate X component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro1RawRateX
        <** @description: GYR1 raw rate Y component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro1RawRateY
        <** @description: GYR1 raw rate Z component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro1RawRateZ
        <** @description: GYR0 valid flag **>
        Boolean gyro0IsValid
        <** @description: GYR1 valid flag **>
        Boolean gyro1IsValid
    }

    <** @description: CubeADCS Gen2 TLM_205 - Raw RWL sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_205
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: RWL0 measured speed  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl0MeasSpeed
        <** @description: RWL1 measured speed  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl1MeasSpeed
        <** @description: RWL2 measured speed  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl2MeasSpeed
        <** @description: RWL3 measured speed  (measurment unit is [rpm]. valid range is between -12000 rpm and 12000 rpm) **>
        Float rwl3MeasSpeed
        <** @description: RWL0 valid flag **>
        Boolean rwl0IsValid
        <** @description: RWL1 valid flag **>
        Boolean rwl1IsValid
        <** @description: RWL2 valid flag **>
        Boolean rwl2IsValid
        <** @description: RWL3 valid flag **>
        Boolean rwl3IsValid
    }
   
    <** @description: CubeADCS Gen2 TLM_206 - Calibrated CSS sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_206
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: CSS calibrated unit vector X component **>
        Double cssCalVecX
        <** @description: CSS calibrated unit vector Y component **>
        Double cssCalVecY
        <** @description: CSS calibrated unit vector Z component **>
        Double cssCalVecZ
        <** @description: CSS valid flag **>
        Boolean cssIsValid
    } 

    <** @description: CubeADCS Gen2 TLM_207 - Calibrated GYR sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_207
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: GYR0 calibrated rate X component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro0CalRateX
        <** @description: GYR0 calibrated rate Y component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro0CalRateY
        <** @description: GYR0 calibrated rate Z component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro0CalRateZ
        <** @description: GYR1 calibrated rate X component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro1CalRateX
        <** @description: GYR1 calibrated rate Y component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro1CalRateY
        <** @description: GYR1 calibrated rate Z component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float gyro1CalRateZ
        <** @description: GYR0 valid flag **>
        Boolean gyro0IsValid
        <** @description: GYR1 valid flag **>
        Boolean gyro1IsValid
    }

    <** @description: CubeADCS Gen2 TLM_208 - Calibrated STR sensor telemetry Part 1 **>
    struct CUBEADCS_GEN2_TLM_FRAME_208_1
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: STR0 measured body vector 0 X component **>
        Double str0MeasBodyVec0X
        <** @description: STR0 measured body vector 0 Y component **>
        Double str0MeasBodyVec0Y
        <** @description: STR0 measured body vector 0 Z component **>
        Double str0MeasBodyVec0Z
        <** @description: STR0 measured body vector 1 X component **>
        Double str0MeasBodyVec1X
        <** @description: STR0 measured body vector 1 Y component **>
        Double str0MeasBodyVec1Y
        <** @description: STR0 measured body vector 1 Z component **>
        Double str0MeasBodyVec1Z
        <** @description: STR0 measured body vector 2 X component **>
        Double str0MeasBodyVec2X
        <** @description: STR0 measured body vector 2 Y component **>
        Double str0MeasBodyVec2Y
        <** @description: STR0 measured body vector 2 Z component **>
        Double str0MeasBodyVec2Z
        <** @description: STR0 modelled ORC vector 0 X component **>
        Double str0ModelOrbitVec0X
        <** @description: STR0 modelled ORC vector 0 Y component **>
        Double str0ModelOrbitVec0Y
        <** @description: STR0 modelled ORC vector 0 Z component **>
        Double str0ModelOrbitVec0Z
        <** @description: STR0 modelled ORC vector 1 X component **>
        Double str0ModelOrbitVec1X
        <** @description: STR0 modelled ORC vector 1 Y component **>
        Double str0ModelOrbitVec1Y
        <** @description: STR0 modelled ORC vector 1 Z component **>
        Double str0ModelOrbitVec1Z
        <** @description: STR0 modelled ORC vector 2 X component **>
        Double str0ModelOrbitVec2X
        <** @description: STR0 modelled ORC vector 2 Y component **>
        Double str0ModelOrbitVec2Y
        <** @description: STR0 modelled ORC vector 2 Z component **>
        Double str0ModelOrbitVec2Z
    }

    <** @description: CubeADCS Gen2 TLM_208 - Calibrated STR sensor telemetry part 2**>
    struct CUBEADCS_GEN2_TLM_FRAME_208_2
    {  
        <** @description: STR1 measured body vector 0 X component **>
        Double str1MeasBodyVec0X
        <** @description: STR1 measured body vector 0 Y component **>
        Double str1MeasBodyVec0Y
        <** @description: STR1 measured body vector 0 Z component **>
        Double str1MeasBodyVec0Z
        <** @description: STR1 measured body vector 1 X component **>
        Double str1MeasBodyVec1X
        <** @description: STR1 measured body vector 1 Y component **>
        Double str1MeasBodyVec1Y
        <** @description: STR1 measured body vector 1 Z component **>
        Double str1MeasBodyVec1Z
        <** @description: STR1 measured body vector 2 X component **>
        Double str1MeasBodyVec2X
        <** @description: STR1 measured body vector 2 Y component **>
        Double str1MeasBodyVec2Y
        <** @description: STR1 measured body vector 2 Z component **>
        Double str1MeasBodyVec2Z
        <** @description: STR1 modelled ORC vector 0 X component **>
        Double str1ModelOrbitVec0X
        <** @description: STR1 modelled ORC vector 0 Y component **>
        Double str1ModelOrbitVec0Y
        <** @description: STR1 modelled ORC vector 0 Z component **>
        Double str1ModelOrbitVec0Z
        <** @description: STR1 modelled ORC vector 1 X component **>
        Double str1ModelOrbitVec1X
        <** @description: STR1 modelled ORC vector 1 Y component **>
        Double str1ModelOrbitVec1Y
        <** @description: STR1 modelled ORC vector 1 Z component **>
        Double str1ModelOrbitVec1Z
        <** @description: STR1 modelled ORC vector 2 X component **>
        Double str1ModelOrbitVec2X
        <** @description: STR1 modelled ORC vector 2 Y component **>
        Double str1ModelOrbitVec2Y
        <** @description: STR1 modelled ORC vector 2 Z component **>
        Double str1ModelOrbitVec2Z
        <** @description: STR0 valid flag **>
        Boolean str0IsValid
        <** @description: STR1 valid flag **>
        Boolean str1IsValid    
    }    

    <** @description: CubeADCS Gen2 TLM_209 - Calibrated RWL sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_209
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Wheel SBC torque vector X component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float rwlTorqueVecX
        <** @description: Wheel SBC torque vector Y component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float rwlTorqueVecY
        <** @description: Wheel SBC torque vector Z component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float rwlTorqueVecZ
        <** @description: Wheel SBC momentum vector X component (measurment unit is [N.m.s]. valid range is between -10 N.m.s and 10 N.m.s) **>
        Float rwlMomVecX
        <** @description: Wheel SBC momentum vector Y component (measurment unit is [N.m.s]. valid range is between -10 N.m.s and 10 N.m.s) **>
        Float rwlMomVecY
        <** @description: Wheel SBC momentum vector Z component (measurment unit is [N.m.s]. valid range is between -10 N.m.s and 10 N.m.s) **>
        Float rwlMomVecZ
        <** @description: RWL valid flag **>
        Boolean rwlIsValid   
    }

    <** @description: CubeADCS Gen2 TLM_210 - Main estimator telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_210
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Estimated roll angle (measurment unit is [deg]) **>
        Double estRpyRoll
        <** @description: Estimated pitch angle (measurment unit is [deg]) **>
        Double estRpyPitch
        <** @description: Estimated yaw angle (measurment unit is [deg]) **>
        Double estRpyYaw
        <** @description: Estimated ORC quaternion Q0 **>
        Double estQuatQ0
        <** @description: Estimated ORC quaternion Q1 **>
        Double estQuatQ1
        <** @description: Estimated ORC quaternion Q2 **>
        Double estQuatQ2
        <** @description: Estimated ORC quaternion Q3 **>
        Double estQuatQ3
        <** @description: Estimated gyro bias X component (measurment unit is [degps]) **>
        Double estGyroBiasX
        <** @description: Estimated gyro bias Y component (measurment unit is [degps]) **>
        Double estGyroBiasY
        <** @description: Estimated gyro bias Z component (measurment unit is [degps]) **>
        Double estGyroBiasZ
        <** @description: Estimated body rate (ORC) X component (measurment unit is [degps]) **>
        Double estRateOrcX
        <** @description: Estimated body rate (ORC) Y component (measurment unit is [degps]) **>
        Double estRateOrcY
        <** @description: Estimated body rate (ORC) Z component (measurment unit is [degps]) **>
        Double estRateOrcZ
        <** @description: Estimated body rate (IRC) X component (measurment unit is [degps]) **>
        Double estRateIrcX
        <** @description: Estimated body rate (IRC) Y component (measurment unit is [degps]) **>
        Double estRateIrcY
        <** @description: Estimated body rate (IRC) Z component (measurment unit is [degps]) **>
        Double estRateIrcZ
        <** @description: Estimated gyroscopic torque X component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float estGyrTorqueX
        <** @description: Estimated gyroscopic torque Y component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float estGyrTorqueY
        <** @description: Estimated gyroscopic torque Z component (measurment unit is [N.m]. valid range is between -1 N.m and 1 N.m) **>
        Float estGyrTorqueZ
        <** @description: Innovation vector X component **>
        Double estInnovX
        <** @description: Innovation vector Y component **>
        Double estInnovY
        <** @description: Innovation vector Z component **>
        Double estInnovZ
        <** @description: StdDev of estimated rate X component (measurment unit is [degps]) **>
        Double estStdDevRateX
        <** @description: StdDev of estimated rate Y component (measurment unit is [degps]) **>
        Double estStdDevRateY
        <** @description: StdDev of estimated rate Z component (measurment unit is [degps]) **>
        Double estStdDevRateZ
        <** @description: StdDev of estimated quaternion Q0 component **>
        Double estStdDevQ0
        <** @description: StdDev of estimated quaternion Q1 component **>
        Double estStdDevQ1
        <** @description: StdDev of estimated quaternion Q2 component **>
        Double estStdDevQ2
        <** @description: Active estimator mode **>
        UInt8 estModeActive
    }

    <** @description: CubeADCS Gen2 TLM_211 - Main estimator high-resolution telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_211
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Estimated ORC quaternion Q0 (valid range is between -1 and 1) **>
        Float estQuatQ0
        <** @description: Estimated ORC quaternion Q1 (valid range is between -1 and 1) **>
        Float estQuatQ1
        <** @description: Estimated ORC quaternion Q2 (valid range is between -1 and 1) **>
        Float estQuatQ2
        <** @description: Estimated ORC quaternion Q3 (valid range is between -1 and 1) **>
        Float estQuatQ3
        <** @description: Estimated body rate (ORC) X component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float estRateOrcX
        <** @description: Estimated body rate (ORC) Y component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float estRateOrcY
        <** @description: Estimated body rate (ORC) Z component (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float estRateOrcZ    
    }

    <** @description: CubeADCS Gen2 TLM_212 - Raw GNSS sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_212
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 rtcTimeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 rtcTimeNs
        <** @description: Drift per second (measurment unit is [ns]) **>
        Int32 rtcDriftNs
        <** @description: Satellite ECEF position vector X component (measurment unit is [m]) **>
        Float gnssSatPosEcefX
        <** @description: Satellite ECEF position vector Y component (measurment unit is [m]) **>
        Float gnssSatPosEcefY
        <** @description: Satellite ECEF position vector Z component (measurment unit is [m]) **>
        Float gnssSatPosEcefZ
        <** @description: Satellite ECEF velocity vector X component (measurment unit is [m/s]) **>
        Float gnssSatVelEcefX
        <** @description: Satellite ECEF velocity vector Y component (measurment unit is [m/s]) **>
        Float gnssSatVelEcefY
        <** @description: Satellite ECEF velocity vector Z component (measurment unit is [m/s]) **>
        Float gnssSatVelEcefZ
        <** @description: GNSS-supplied unix time integer seconds (measurment unit is [s]) **>
        UInt32 gnssTimeSeconds
        <** @description: GNSS-supplied unix time nanoseconds (measurment unit is [ns]) **>
        UInt32 gnssTimeNs
        <** @description: GPS week number **>
        UInt16 gpsWeek
        <** @description: GNSS Time of Week  (measurment unit is [ms]) **>
        UInt32 tow
        <** @description: Offset between GNSS time and UTC  (measurment unit is [s]) **>
        Int8 utcOffset
        <** @description: GNSS data is valid, but may be outdated **>
        Boolean gnssValidData
        <** @description: GNSS has lock, data most recent **>
        Boolean gnssLock
        <** @description: GNSS PPS Detected by ADCS HW **>
        Boolean gnssPPSDetected    
    }

    <** @description: CubeADCS Gen2 TLM_213 - Raw PST3S star tracker telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_213
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs
        <** @description: Star tracker TCTLM instance **>
        UInt8 strInstance
        <** @description: PST3S Version **>
        UInt8 pst3sVersion
        <** @description: PST3S Quaternion 1 (valid range is between -1 and 1) **>
        Float quat1
        <** @description: PST3S Quaternion 2 (valid range is between -1 and 1) **>
        Float quat2
        <** @description: PST3S Quaternion 3 (valid range is between -1 and 1) **>
        Float quat3
        <** @description: PST3S Quaternion 4 (valid range is between -1 and 1) **>
        Float quat4
        <** @description: PST3S Angular Valocity X (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float angVelX
        <** @description: PST3S Angular Valocity Y (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float angVelY
        <** @description: PST3S Angular Valocity Z (measurment unit is [degps]. valid range is between -1000 degps and 1000 degps) **>
        Float angVelZ
        <** @description: PST3S Rate Quality **>
        UInt8 rateQuality
        <** @description: PST3S Unix Seconds (measurment unit is [S]) **>
        UInt32 unixSeconds
        <** @description: PST3S Unix Seconds Decimal (measurment unit is [S]. valid range is between 0 S and 1 S) **>
        Float unixSecondsDecimal
        <** @description: PST3S Temperature (measurment unit is [C]) **>
        Int8 temperature
        <** @description: PST3S Image Exposure **>
        UInt8 imageExposure
        <** @description: PST3S Image Threshold **>
        UInt8 imageThreshold
        <** @description: PST3S BackGround Values **>
        UInt8 backGroundValues
        <** @description: PST3S Internal Process Code **>
        UInt8 internalProcessCode
        <** @description: PST3S CMOS Chip ID Self-test Result **>
        UInt8 cmosChipIdResult
        <** @description: PST3S FPGA MRAM Self-test Result **>
        UInt8 fpgaMRamResult
        <** @description: PST3S Number of Extracted Stars **>
        UInt8 numberOfExtractedStars
        <** @description: PST3S Operating Mode **>
        UInt8 operatingMode
        <** @description: PST3S Imaging Gain **>
        UInt8 imagingGain
        <** @description: PST3S Minimum Navigation Stars When Quaternion is Valid **>
        UInt8 minNavigationStars
        <** @description: PST3S Data Valid **>
        UInt8 dataValid
        <** @description: PST3S External Image State **>
        UInt8 extImageState
        <** @description: PST3S Number of Identified Stars **>
        UInt8 identifiedStars
        <** @description: PST3S Device Number **>
        UInt8 deviceNumber
        <** @description: PST3S Software Version **>
        UInt8 softwareVersion
        <** @description: PST3S EDAC Error Count **>
        UInt8 edacErrorCount
        <** @description: PST3S Image Frame Number **>
        UInt32 imageFrameNumber
        <** @description: PST3S Dynamic Mode **>
        UInt8 dynamicMode
        <** @description: PST3S SAA Mode **>
        UInt8 saaMode
        <** @description: PST3S SAA Threshold **>
        UInt8 saaThreshold
        <** @description: PST3S Quaternion Filtering State **>
        UInt8 quaternionFilteringState
        <** @description: PST3S Four Star Capture Threshold **>
        UInt8 fourStarCaptureThreshold
        <** @description: PST3S Tracking Threshold **>
        UInt8 trackingThreshold
        <** @description: PST3S EDAC Enabled/Disabled **>
        Boolean edacSwitch
    } 

    <** @description: CubeADCS Gen2 TLM_214 - ACP execution telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_214
    {
        <** @description: Time since the start of the current loop iteration (measurment unit is [ms]) **>
        UInt16 timeSinceLoopStart
        <** @description: Indicates which part of the loop is currently executing **>
        UInt8 currentExecutionPoint
        <** @description: Execution time of node sync (measurment unit is [ms]) **>
        UInt16 execTimeNodeSync
        <** @description: Execution time of sensor comms (measurment unit is [ms]) **>
        UInt16 execTimeSensorComms
        <** @description: Execution time of sensor calibration (measurment unit is [ms]) **>
        UInt16 execTimeSensorCal
        <** @description: Execution time of ADCS estimators (measurment unit is [ms]) **>
        UInt16 execTimeEstimators
        <** @description: Execution time of ADCS controllers (measurment unit is [ms]) **>
        UInt16 execTimeControllers
        <** @description: Execution time of wheel comms (measurment unit is [ms]) **>
        UInt16 execTimeWheelComms
        <** @description: Execution time of ADCS models (measurment unit is [ms]) **>
        UInt16 execTimeModels
        <** @description: Execution time of ADCS loop sync (measurment unit is [ms]) **>
        UInt16 execTimeLoopSync
        <** @description: Execution time of health service (measurment unit is [ms]) **>
        UInt16 execTimeHealth
        <** @description: Execution time of telemetry logging (measurment unit is [ms]) **>
        UInt16 execTimeTlmLog
        <** @description: Time offset between the ADCS loop and RTC control pulse (measurment unit is [ms]) **>
        Int16 loopRtcOffset
        <** @description: ADCS loop has started flag **>
        Boolean loopHasStarted
        <** @description: HIL is currently synchronised **>
        Boolean hilSyncOk   
    }

    <** @description: CubeADCS Gen2 TLM_216 - CubeComputer Health **>
    struct CUBEADCS_GEN2_TLM_FRAME_216
    {
        <** @description: MCU Temperature (measurment unit is [°C]) **>
        Double mcuTemp
        <** @description: MCU current (measurment unit is [mA]) **>
        Double mcuCurrent
        <** @description: MCU internal reference voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 mcuVoltage
        <** @description: MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 supplyVoltage
        <** @description: 5V supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 v5Sense
        <** @description: SRAM1 current (measurment unit is [mA]) **>
        Double sram1Current
        <** @description: SRAM2 current (measurment unit is [mA]) **>
        Double sram2Current
        <** @description: ADC current (measurment unit is [mA]) **>
        Double adcCurrent
        <** @description: Flash memory current (measurment unit is [mA]) **>
        Double flashCurrent
        <** @description: RS485 driver current (measurment unit is [mA]) **>
        Double rs485Current
        <** @description: CAN driver current (measurment unit is [mA]) **>
        Double canCurrent
        <** @description: Gyro current (measurment unit is [mA]) **>
        Double gyroCurrent
        <** @description: Redundant gyro current (measurment unit is [mA]) **>
        Double redGyroCurrent
        <** @description: Set if the primary gyro supply voltage has exceeded the maximum limit **>
        Boolean gyroOverVoltage
        <** @description: Set if the primary gyro supply voltage has exceeded the minimum limit **>
        Boolean gyroUnderVoltage
        <** @description: Set if the redundant gyro supply voltage has exceeded the maximum limit **>
        Boolean redGyroOverVoltage
        <** @description: Set if the redundant gyro supply voltage has exceeded the minimum limit **>
        Boolean redGyroUnderVoltage
        <** @description: Bitmask representing virtual watchdog region warning counters.
        @details: size = 5    
        **>
        UInt8[] watchdogCount    
    } 

    <** @description: CubeADCS Gen2 TLM_217 - Health telemetry for CubeSense Earth **>
    struct CUBEADCS_GEN2_TLM_FRAME_217
    {
        <** @description: HSS0 MCU Temperature (measurment unit is [°C]) **>
        Double hss0McuTemp
        <** @description: HSS0 MCU current (measurment unit is [mA]) **>
        Double hss0McuCurrent
        <** @description: HSS0 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 hss0McuVoltage
        <** @description: HSS0 Detector Temperature (measurment unit is [K]) **>
        Double hss0DetectorTemp
        <** @description: HSS0 Detector Current (measurment unit is [mA]) **>
        Double hss0DetectorCurrent
        <** @description: HSS1 MCU Temperature (measurment unit is [°C]) **>
        Double hss1McuTemp
        <** @description: HSS1 MCU current (measurment unit is [mA]) **>
        Double hss1McuCurrent
        <** @description: HSS1 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 hss1McuVoltage
        <** @description: HSS1 Detector Temperature (measurment unit is [K]) **>
        Double hss1DetectorTemp
        <** @description: HSS1 Detector Current (measurment unit is [mA]) **>
        Double hss1DetectorCurrent    
    }

    <** @description: CubeADCS Gen2 TLM_218 - Health telemetry for Reaction Wheels **>
    struct CUBEADCS_GEN2_TLM_FRAME_218
    {
        <** @description: RWL0 MCU Temperature (measurment unit is [°C]) **>
        Double rwl0McuTemp
        <** @description: RWL0 MCU current (measurment unit is [mA]) **>
        Double rwl0McuCurrent
        <** @description: RWL0 Battery supply voltage (measurment unit is [mV]. valid range is between 0 mV and 24000 mV) **>
        UInt16 rwl0BatVoltage
        <** @description: RWL0 Battery current (measurment unit is [mA]) **>
        Double rwl0BatCurrent
        <** @description: RWL1 MCU Temperature (measurment unit is [°C]) **>
        Double rwl1McuTemp
        <** @description: RWL1 MCU current (measurment unit is [mA]) **>
        Double rwl1McuCurrent
        <** @description: RWL1 Battery supply voltage (measurment unit is [mV]. valid range is between 0 mV and 24000 mV) **>
        UInt16 rwl1BatVoltage
        <** @description: RWL1 Battery current (measurment unit is [mA]) **>
        Double rwl1BatCurrent
        <** @description: RWL2 MCU Temperature (measurment unit is [°C]) **>
        Double rwl2McuTemp
        <** @description: RWL2 MCU current (measurment unit is [mA]) **>
        Double rwl2McuCurrent
        <** @description: RWL2 Battery supply voltage (measurment unit is [mV]. valid range is between 0 mV and 24000 mV) **>
        UInt16 rwl2BatVoltage
        <** @description: RWL2 Battery current (measurment unit is [mA]) **>
        Double rwl2BatCurrent
        <** @description: RWL3 MCU Temperature (measurment unit is [°C]) **>
        Double rwl3McuTemp
        <** @description: RWL3 MCU current (measurment unit is [mA]) **>
        Double rwl3McuCurrent
        <** @description: RWL3 Battery supply voltage (measurment unit is [mV]. valid range is between 0 mV and 24000 mV) **>
        UInt16 rwl3BatVoltage
        <** @description: RWL3 Battery current (measurment unit is [mA]) **>
        Double rwl3BatCurrent    
    } 

    <** @description: CubeADCS Gen2 TLM_225 - Health telemetry for CubeNode NSSRWL **>
    struct CUBEADCS_GEN2_TLM_FRAME_225
    {
        <** @description: RWL0 MCU Temperature (measurment unit is [°C]) **>
        Double rwl0McuTemp
        <** @description: RWL0 MCU current (measurment unit is [mA]) **>
        Double rwl0McuCurrent
        <** @description: RWL0 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 rwl0McuVoltage
        <** @description: RWL0 5V current (measurment unit is [mA]) **>
        Double rwl0Current5v
        <** @description: Rwl0 5V overcurrent **>
        Boolean rwl0Overcurrent5v
        <** @description: RWL1 MCU Temperature (measurment unit is [°C]) **>
        Double rwl1McuTemp
        <** @description: RWL1 MCU current (measurment unit is [mA]) **>
        Double rwl1McuCurrent
        <** @description: RWL1 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 rwl1McuVoltage
        <** @description: RWL1 5V current (measurment unit is [mA]) **>
        Double rwl1Current5v
        <** @description: Rwl1 5V overcurrent **>
        Boolean rwl1Overcurrent5v        
        <** @description: RWL2 MCU Temperature (measurment unit is [°C]) **>
        Double rwl2McuTemp
        <** @description: RWL2 MCU current (measurment unit is [mA]) **>
        Double rwl2McuCurrent
        <** @description: RWL2 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 rwl2McuVoltage
        <** @description: RWL2 5V current (measurment unit is [mA]) **>
        Double rwl2Current5v
        <** @description: Rwl2 5V overcurrent **>
        Boolean rwl2Overcurrent5v       
        <** @description: RWL3 MCU Temperature (measurment unit is [°C]) **>
        Double rwl3McuTemp
        <** @description: RWL3 MCU current (measurment unit is [mA]) **>
        Double rwl3McuCurrent
        <** @description: RWL3 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 rwl3McuVoltage
        <** @description: RWL3 5V current (measurment unit is [mA]) **>
        Double rwl3Current5v
        <** @description: Rwl3 5V overcurrent **>
        Boolean rwl3Overcurrent5v   
    }  

    <** @description: CubeADCS Gen2 TLM_226 - Raw NSSRWL sensor telemetry **>
    struct CUBEADCS_GEN2_TLM_FRAME_226
    {
        <** @description: Unix time integer seconds (measurment unit is [s]) **>
        UInt32 timeSeconds
        <** @description: Unix time fraction nanoseconds (measurment unit is [ns]) **>
        UInt32 timeNs        
        <** @description: RWL0 target value **>
        Int16 rwl0TargetValue
        <** @description: RWL0 measured speed  (measurment unit is [rpm]. valid range is between -10000 rpm and 10000 rpm) **>
        Float rwl0MeasSpeed
        <** @description: RWL0 measured current (measurment unit is [mA]) **>
        Int16 rwl0MeasCurrent
        <** @description: RWL0 NSSRWL temperature (not CubeNode) (measurment unit is [C]) **>
        Int16 rwl0Temp        
        <** @description: RWL1 target value **>
        Int16 rwl1TargetValue
        <** @description: RWL1 measured speed  (measurment unit is [rpm]. valid range is between -10000 rpm and 10000 rpm) **>
        Float rwl1MeasSpeed
        <** @description: RWL1 measured current (measurment unit is [mA]) **>
        Int16 rwl1MeasCurrent
        <** @description: RWL1 NSSRWL temperature (not CubeNode) (measurment unit is [C]) **>
        Int16 rwl1Temp       
        <** @description: RWL2 target value **>
        Int16 rwl2TargetValue
        <** @description: RWL2 measured speed  (measurment unit is [rpm]. valid range is between -10000 rpm and 10000 rpm) **>
        Float rwl2MeasSpeed
        <** @description: RWL2 measured current (measurment unit is [mA]) **>
        Int16 rwl2MeasCurrent
        <** @description: RWL2 NSSRWL temperature (not CubeNode) (measurment unit is [C]) **>
        Int16 rwl2Temp        
        <** @description: RWL3 target value **>
        Int16 rwl3TargetValue
        <** @description: RWL3 measured speed  (measurment unit is [rpm]. valid range is between -10000 rpm and 10000 rpm) **>
        Float rwl3MeasSpeed
        <** @description: RWL3 measured current (measurment unit is [mA]) **>
        Int16 rwl3MeasCurrent
        <** @description: RWL3 NSSRWL temperature (not CubeNode) (measurment unit is [C]) **>
        Int16 rwl3Temp        
        <** @description: RWL0 valid flag **>
        Boolean rwl0IsValid
        <** @description: RWL0 Set if in reaction wheel mode **>
        Boolean rwl0WheelMode
        <** @description: RWL0 Set if in current-control mode **>
        Boolean rwl0CurentCtrlMode
        <** @description: RWL0 Set if in speed-control mode **>
        Boolean rwl0SpeedCtrlMode
        <** @description: RWL0 Set if in torque-control mode **>
        Boolean rwl0TorqueCtrlMode
        <** @description: RWL0 Set if CRC error on protected area **>
        Boolean rwl0CrcError
        <** @description: RWL0 wrong low-level command **>
        Boolean rwl0WrongLlCmd
        <** @description: RWL0 wrong high-level command **>
        Boolean rwl0WrongHlCmd
        <** @description: RWL0 Timeout on SCI1 main interface **>
        Boolean rwl0ToutSci1Main        
        <** @description: RWL1 valid flag **>
        Boolean rwl1IsValid
        <** @description: RWL1 Set if in reaction wheel mode **>
        Boolean rwl1WheelMode
        <** @description: RWL1 Set if in current-control mode **>
        Boolean rwl1CurentCtrlMode
        <** @description: RWL1 Set if in speed-control mode **>
        Boolean rwl1SpeedCtrlMode
        <** @description: RWL1 Set if in torque-control mode **>
        Boolean rwl1TorqueCtrlMode
        <** @description: RWL1 Set if CRC error on protected area **>
        Boolean rwl1CrcError
        <** @description: RWL1 wrong low-level command **>
        Boolean rwl1WrongLlCmd
        <** @description: RWL1 wrong high-level command **>
        Boolean rwl1WrongHlCmd
        <** @description: RWL1 Timeout on SCI1 main interface **>
        Boolean rwl1ToutSci1Main        
        <** @description: RWL2 valid flag **>
        Boolean rwl2IsValid
        <** @description: RWL2 Set if in reaction wheel mode **>
        Boolean rwl2WheelMode
        <** @description: RWL2 Set if in current-control mode **>
        Boolean rwl2CurentCtrlMode
        <** @description: RWL2 Set if in speed-control mode **>
        Boolean rwl2SpeedCtrlMode
        <** @description: RWL2 Set if in torque-control mode **>
        Boolean rwl2TorqueCtrlMode
        <** @description: RWL2 Set if CRC error on protected area **>
        Boolean rwl2CrcError
        <** @description: RWL2 wrong low-level command **>
        Boolean rwl2WrongLlCmd
        <** @description: RWL2 wrong high-level command **>
        Boolean rwl2WrongHlCmd
        <** @description: RWL2 Timeout on SCI1 main interface **>
        Boolean rwl2ToutSci1Main       
        <** @description: RWL3 valid flag **>
        Boolean rwl3IsValid
        <** @description: RWL3 Set if in reaction wheel mode **>
        Boolean rwl3WheelMode
        <** @description: RWL3 Set if in current-control mode **>
        Boolean rwl3CurentCtrlMode
        <** @description: RWL3 Set if in speed-control mode **>
        Boolean rwl3SpeedCtrlMode
        <** @description: RWL3 Set if in torque-control mode **>
        Boolean rwl3TorqueCtrlMode
        <** @description: RWL3 Set if CRC error on protected area **>
        Boolean rwl3CrcError
        <** @description: RWL3 wrong low-level command **>
        Boolean rwl3WrongLlCmd
        <** @description: RWL3 wrong high-level command **>
        Boolean rwl3WrongHlCmd
        <** @description: RWL3 Timeout on SCI1 main interface **>
        Boolean rwl3ToutSci1Main    
    } 

    <** @description: CubeADCS Gen2 TLM_165 - Health telemetry for CubeStar **>
    struct CUBEADCS_GEN2_TLM_FRAME_165
    {
        <** @description: STR0 MCU Temperature (measurment unit is [°C]) **>
        Double str0McuTemp
        <** @description: STR0 MCU current (measurment unit is [mA]) **>
        Double str0McuCurrent
        <** @description: STR0 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 str0McuVoltage
        <** @description: STR0 current (measurment unit is [mA]) **>
        Double str0Current
        <** @description: STR0 CAM overcurrent **>
        Boolean str0Overcurrent
        <** @description: STR0 Error Code **>
        UInt32 str0ErrorCode
        <** @description: STR1 MCU Temperature (measurment unit is [°C]) **>
        Double str1McuTemp
        <** @description: STR1 MCU current (measurment unit is [mA]) **>
        Double str1McuCurrent
        <** @description: STR1 MCU supply voltage (measurment unit is [mV]. valid range is between 0 mV and 5000 mV) **>
        UInt16 str1McuVoltage
        <** @description: STR1 current (measurment unit is [mA]) **>
        Double str1Current
        <** @description: STR1 CAM overcurrent **>
        Boolean str1Overcurrent
        <** @description: STR1 Error Code **>
        UInt32 str1ErrorCode   
    }    

    struct GNSS_TIME
    {
        <** @description: Sync character. The ASCII message is always preceded by a single ’#’ symbol. **>
        UInt8    sync
        
        <** @details: size = 25 **>
        UInt8[]  message
        
        <** @details: size = 8 **>
        UInt8[]  port
        
        <** @details: Used for multiple related logs. **>
        Int32    sequence
        
        <** @details: Time the processor is idle, calculated once per second. This value is a percentage, ranging from 0 to 100 %. **>
        Float    idle_time
        
        <** @details: Indicates the quality of the GPS reference time. **>
        UInt32   time_status
        
        <** @details: GPS reference week number. **>
        UInt32   week
        
        <** @details: Seconds from the beginning of the GPS reference week. **>
        Float    seconds
        
        <** @details: 32-bits representing the status of various hardware and software components of the receiver. **>
        UInt32   receiver_status
        
        <** @details: Reserved for internal use. **>
        UInt32   reserved
        
        <** @details: A value (0 - 65535) representing the receiver software build number. **>
        UInt32   receiver_sw_version        
        
        <** @details: The character indicates the end of the header ’;’ symbol. **>
        UInt8    end1
        
        <** @details: Clock model status (not including current measurement data). **>
        UInt32   clock_status 
        
        <** @details: Receiver clock offset in seconds from GPS system time. **>
        Double   offset 
        
        <** @details: Receiver clock offset standard deviation (s). **>
        Double   offset_std 
        
        <** @details: The offset of GPS system time from UTC time, computed using almanac parameters. **>
        Double   utc_offset 
        
        <** @details: UTC year. **>
        UInt32   utc_year 
        
        <** @details: UTC month (0-12). If UTC time is unknown, the value for month is 0. **>
        UInt8    utc_month                   /*!< .             */
        
        <** @details: UTC day (0-31). If UTC time is unknown, the value for day is 0. **>
        UInt8    utc_day 
        
        <** @details: UTC hour (0-23). **>
        UInt8    utc_hour         
        
        <** @details: UTC minute (0-59). **>
        UInt8    utc_min            
        
        <** @details: UTC millisecond (0-60999). Maximum of 60999 when leap second is applied. **>
        UInt32   utc_ms      
        
        <** @details: UTC status 0 = Invalid, 1 = Valid, 2 = Warning. **>
        UInt32   utc_status  
        
        <** @details: 32-bit CRC. **>
        UInt32   crc32        
        
        <** @details: size = 2 **>
        UInt8[]  end2
    }
    
    struct GNSS_BESTXYZ
    {
        <** @description: Sync character. The ASCII message is always preceded by a single ’#’ symbol. **>
        UInt8    sync
        
        <** @details: size = 25 **>
        UInt8[]  message
        
        <** @details: size = 8 **>
        UInt8[]  port
        
        <** @details: Used for multiple related logs. **>
        Int32    sequence
        
        <** @details: Time the processor is idle, calculated once per second. This value is a percentage, ranging from 0 to 100 %. **>
        Float    idle_time
        
        <** @details: Indicates the quality of the GPS reference time. **>
        UInt32   time_status
        
        <** @details: GPS reference week number. **>
        UInt32   week
        
        <** @details: Seconds from the beginning of the GPS reference week. **>
        Float    seconds
        
        <** @details: 32-bits representing the status of various hardware and software components of the receiver. **>
        UInt32   receiver_status
        
        <** @details: Reserved for internal use. **>
        UInt32   reserved1
        
        <** @details: A value (0 - 65535) representing the receiver software build number. **>
        UInt32   receiver_sw_version        
        
        <** @details: The character indicates the end of the header ’;’ symbol. **>
        UInt8    end1
        
        <** @details: Solution status. **>
        UInt32   p_sol_status
        
        <** @details: Position type. **>
        UInt32   pos_type
        
        <** @details: Position X-coordinate (m). **>
        Double   px
        
        <** @details: Position Y-coordinate (m). **>
        Double   py
        
        <** @details: Position Z-coordinate (m). **>
        Double   pz
        
        <** @details: Standard deviation of P-X (m). **>
        Float    pxo
        
        <** @details: Standard deviation of P-Y (m). **>
        Float    pyo
        
        <** @details: Standard deviation of P-Z (m). **>
        Float    pzo
        
        <** @details: Solution status. **>
        UInt32   v_sol_status
        
        <** @details: Velocity type. **>
        UInt32   vel_type 
        
        <** @details: Velocity vector along X-axis (m/s). **>
        Double   vx  
        
        <** @details: Velocity vector along Y-axis (m/s). **>
        Double   vy      
        
        <** @details: Velocity vector along Z-axis (m/s). **>
        Double   vz    
        
        <** @details: Standard deviation of V-X (m/s). **>
        Float    vxo       
        
        <** @details: Standard deviation of V-Y (m/s). **>
        Float    vyo           
        
        <** @details: Standard deviation of V-Z (m/s) . **>
        Float    vzo                
        
        <** @details: size = 4 **>
        UInt8[]  stn_id     
        
        <** @details: A measure of the latency in the velocity time tag in seconds. **>
        Float    v_latency    
        
        <** @details: Differential age in seconds. **>
        Float    diff_age     
        
        <** @details: Solution age in seconds. **>
        Float    sol_age      
        
        <** @details: Number of satellites tracked. **>
        UInt8    svs         
        
        <** @details: Number of satellite vehicles used in solution. **>
        UInt8    solnsvs    
        
        <** @details: Number of GPS plus GLONASS plus BDS L1/B1 used in solution. **>
        UInt8    ggl1      
        
        <** @details: Number of satellites with L1/E1/B1 signals used in solution. **>
        UInt8    solnmultisvs   
        
        <** @details: Reserved. **>
        UInt8    reserved2
        
        <** @details: Extended solution status. **>
        UInt8    ext_sol_stat     
        
        <** @details: Galileo and BeiDou signals used mask . **>
        UInt8    galileo_and_beidou_sig_mask 
        
        <** @details: GPS and GLONASS signals used mask . **>
        UInt8    gps_and_glonass_sig_mask   
        
        <** @details: 32-bit CRC. **>
        UInt32   crc32          
        
        <** @details: size = 2 **>
        UInt8[]  end2                
    }
    
        <** @description: Common Driver operation result **>
    enumeration EMDrvOperationResult 
    {
        <** @description:  Operation success **>
        EMDOR_SUCCESS
        <** @description:  Operation in progress **>
        EMDOR_IN_PROGRESS
        <** @description:  Driver/Module currently bussy with another operation **>
        EMDOR_BUSSY
        <** @description:  Chip still not ready for operation **>
        EMDOR_OFFLINE
        <** @description:  Chip communication error, NACK or else **>
        EMDOR_COM_ERR
        <** @description:  Chip communication error, timeout **>
        EMDOR_COM_TIMEOUT
        <** @description:  Write-Read-Compare error **>
        EMDOR_WRC_ERR
        <** @description:  Some general error, usually should not be reported **>
        EMDOR_GENERAL_ERR 
        <** @description:  Driver disabled **>
        EMDOR_DRV_DISABLED 
    }   
    
    <** @description: Battery Pack mode type 
    @details: size = 1 **>
    enumeration BpModeType
    {
        <** @description: Reserved state **>
        ROOT
        <** @description: Reserved state **>
        IDENTIFYPREVIOUSSTATE
        <** @description: Reserved state **>
        BATTERY_AVAILABLE
        <** @description: This is the state in which the battery pack is working normally with battery cells attached. **>
        BATTERY
        <** @description: This is the state in which the battery pack is working, but in 3 seconds it will switch to HIB(hibernation) mode. **>
        TRANSITION_TO_HIB
        <** @description: Reserved state **>
        NORMAL
        <** @description: In this state all consumers are detached and the battery pack tries to charge it's cells and to get back to BATTERY state. **>
        HIB
        <** @description: In this state the satellite is working as in Battery state and all SW protection mechanisms are stopped. The only way to leave this mode is to send request "LeaveNoHibMode" **>
        NOHIB
        <** @description: At this state the satellite is working only when on sun. The battery cells are detached because of fatal error. **>        
        PANEL
        <** @description: Reserved state **>
        ___HISTORY_BATTERY_AVAILABLE
    }

    <** @description: GetBatteryInfo from EPSII_BP_1 interface **>
    struct EpsOverallBatteryInfoType
    {
        <** @description: [mWh] Average capacity of all normally working Battery packs in the system.**>
        UInt32 Capacity
        <** @description: [mV] Average voltage of all normally working Battery packs in the system.**>
        UInt16 Voltage
    }
    

// begin EPS BP generated code


//
// Global declarations for EPS BP INSTANCE0
//    
    <** @description: GetBatteryInfo from EPSII_BP_1 interface **>
    struct Eps2Inst0BatteryInfoType
    {
        <** @description: [mWh] The capacity of the battery pack.
                         0xFFFFFFFF - Unknown Value
                         0xFFFFFFFE - Error Value**>
        UInt32 Capacity
        <** @description: [mV] Voltage of the battery pack. 
                    Special return values: 
                         0xFFFFFFFF - Unknown Value
                         0xFFFFFFFE - Error Value**>
        UInt16 Voltage
        <** @description: [mA] Negative upon charge, positive upon discharge. 
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>

        Int16 Current
        <** @description: [mC] Temperature of the Battery Pack
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int32 Temperature
        <** @description: Current state of the BatteryPack
            0: ROOT - Reserved state
            1: IDENTIFYPREVIOUSSTATE - Reserved state
            2: BATTERY_AVAILABLE - Reserved state
            3: BATTERY - This is the state in which the battery pack is working normally with battery cells attached.
            4: TRANSITION_TO_HIB - This is the state in which the battery pack is working, but in 3 seconds it will switch to HIB(hibernation) mode.
            5: NORMAL - Reserved state
            6: HIB - In this state all consumers are detached and the battery pack tries to charge it's cells and to get back to BATTERY state.
            7: NOHIB - In this state the satellite is working as in Battery state and all SW protection mechanisms are stopped. The only way to leave this mode is to send request "LeaveNoHibMode"
            8: PANEL - At this state the satellite is working only when on sun. The battery cells are detached because of fatal error.
            9: ___HISTORY_BATTERY_AVAILABLE - Reserved state
            **>
        UInt8 bp_mode
    }
    
    <** @description: GetDeviceHealthInfo from EPSII_BP_1 interface **>
    struct Eps2Inst0DeviceHealthInfoType
    {
        <** @description: Time after start of the system in seconds.
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_RunningTime
        <** @description: CPU Voltage in [mV]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_Voltage
        <** @description: CPU temperature in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_Temperature
        <** @description: PCB Temperature sensor 1 in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 PCB_Temperature_1
        <** @description: PCB Temperature sensor 2 in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 PCB_Temperature_2
        <** @description: Status of Balancer chip
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 BALANCER_CHIP_1
        <** @description: Status of Primary Input Channel 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_XP
        <** @description: Status of Redundant Input Channel 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_XR
        <** @description: Status of Primary Input Channel 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_YP
        <** @description: Status of Redundant Input Channel 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_YR
        <** @description: Status of Primary Input Channel 3
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_ZP
        <** @description: Status of Redundant Input Channel 3
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_ZR
        <** @description: Status of INA sensor 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 INA_BAT_OUT_1
        <** @description: Status of INA sensor 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 INA_BAT_OUT_2
        <** @description: Status of Temperature sensor 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 TMP117_U810
        <** @description: Status of Temperature sensor 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 TMP117_U811
        <** @description: Status of GPIO DRIVER 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 GPIO_PCA9538_U2001
        <** @description: Status of GPIO DRIVER 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 GPIO_PCA9538_U2002
    }

    <** @description: Information provided by INA sensor 1 **>
    struct Eps2Inst0InaSensors1Type
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Energy in Watt/h \* 10
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Energy
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Temperature
    }

    <** @description: Information provided by INA sensor 2 **>
    struct Eps2Inst0InaSensors2Type
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Energy in Watt/h \* 10
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Energy
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Temperature
    }


    <** @description: Telemetry provided by the Balancer **>
    struct Eps2Inst0BalancerInfoType
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Internal_Temperature
    }    
    
    <** @description: Status provided by the Balancer **>
    struct Eps2Inst0BalancerStatusType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Description of bits:      
            CUTF (bit7)- The Charge Under-Temperature Fault bit
            COTF (bit6)- The Charge Over-Temperature Fault bit
            DUTF (bit5)- The Discharge Under-Temperature Fault bit
            DOTF (bit4)- The Discharge Over-Temperature Fault bit
            UVLOF(bit3)- The Undervoltage Lockout Fault bit
            UVF  (bit2)- The Undervoltage Fault bit
            OVLOF(bit1)- The Overvoltage Lockout Fault bit
            OVF  (bit0)- The Overvoltage Fault bit **>
            UInt8  status_register_0
            
        <** @description: Description of bits:
            VEOC (bit7)- The Voltage End-of-Charge detection bit
            RSV  (bit6)- Reserved
            OWF  (bit5)- The Open-Wire Fault bit
            CELLF(bit4)- The Cell Fail fault bit
            DSCF (bit3)- The Discharge Short Circuit Fault bit
            DOCF (bit2)- The Discharge Overcurrent Fault bit
            COCF (bit1)- The Charge Overcurrent Fault bit
            IOTF (bit0)- The Internal Over-Temperature Fault bit **>
            UInt8  status_register_1
            
        <** @description: Description of bits:
            LVCHG    (bit7)- The Low Voltage Charge bit
            INT_SCAN (bit6)- The Internal Scan bit
            ECC_FAIL (bit5)- Error Checking/detection/Correction for EEPROM read
            ECC_USED (bit4)- Error Checking/detection/Correction for EEPROM read
            DCHING   (bit3)- The Discharging bit
            CHING    (bit2)- The Charging bit
            CH_PRSNT (bit1)- The Charger Present bit
            LD_PRSNT (bit0)- The Load Present bit **>
            UInt8  status_register_2
            
        <** @description: Description of bits:
            RSV       (bit7)- Reserved
            IN_SLEEP  (bit6)- The In SLEEP Mode bit
            IN_DOZE   (bit5)- The In DOZE Mode bit
            IN_IDLE   (bit4)- The In IDLE Mode bit
            CBUV      (bit3)- The Cell Balance Undervoltage bit
            CBOV      (bit2)- The Cell Balance Overvoltage bit
            CBUTF     (bit1)- The Cell Balance Under-Temperature Fault bit
            CBOTF     (bit0)- The Cell Balance Over-Temperature Fault bit **>
            UInt8  status_register_3
    }

    <** @description: Balancer Cells info **>
    struct Eps2Inst0BalancerCellsInfoType
    {
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_1
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_2
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_3
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_4
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_5
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_6
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_7
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_8
    }
    
    
    
    <** @description: Charger info **>
    struct Eps2Inst0ChargerXpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst0ChargerXrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst0ChargerYpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst0ChargerYrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst0ChargerZpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst0ChargerZrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
//
// Global declarations for EPS BP INSTANCE1
//    
    <** @description: GetBatteryInfo from EPSII_BP_1 interface **>
    struct Eps2Inst1BatteryInfoType
    {
        <** @description: [mWh] The capacity of the battery pack.
                         0xFFFFFFFF - Unknown Value
                         0xFFFFFFFE - Error Value**>
        UInt32 Capacity
        <** @description: [mV] Voltage of the battery pack. 
                    Special return values: 
                         0xFFFFFFFF - Unknown Value
                         0xFFFFFFFE - Error Value**>
        UInt16 Voltage
        <** @description: [mA] Negative upon charge, positive upon discharge. 
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>

        Int16 Current
        <** @description: [mC] Temperature of the Battery Pack
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int32 Temperature
        <** @description: Current state of the BatteryPack
            0: ROOT - Reserved state
            1: IDENTIFYPREVIOUSSTATE - Reserved state
            2: BATTERY_AVAILABLE - Reserved state
            3: BATTERY - This is the state in which the battery pack is working normally with battery cells attached.
            4: TRANSITION_TO_HIB - This is the state in which the battery pack is working, but in 3 seconds it will switch to HIB(hibernation) mode.
            5: NORMAL - Reserved state
            6: HIB - In this state all consumers are detached and the battery pack tries to charge it's cells and to get back to BATTERY state.
            7: NOHIB - In this state the satellite is working as in Battery state and all SW protection mechanisms are stopped. The only way to leave this mode is to send request "LeaveNoHibMode"
            8: PANEL - At this state the satellite is working only when on sun. The battery cells are detached because of fatal error.
            9: ___HISTORY_BATTERY_AVAILABLE - Reserved state
            **>
        UInt8 bp_mode
    }
    
    <** @description: GetDeviceHealthInfo from EPSII_BP_1 interface **>
    struct Eps2Inst1DeviceHealthInfoType
    {
        <** @description: Time after start of the system in seconds.
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_RunningTime
        <** @description: CPU Voltage in [mV]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_Voltage
        <** @description: CPU temperature in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_Temperature
        <** @description: PCB Temperature sensor 1 in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 PCB_Temperature_1
        <** @description: PCB Temperature sensor 2 in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 PCB_Temperature_2
        <** @description: Status of Balancer chip
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 BALANCER_CHIP_1
        <** @description: Status of Primary Input Channel 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_XP
        <** @description: Status of Redundant Input Channel 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_XR
        <** @description: Status of Primary Input Channel 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_YP
        <** @description: Status of Redundant Input Channel 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_YR
        <** @description: Status of Primary Input Channel 3
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_ZP
        <** @description: Status of Redundant Input Channel 3
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_ZR
        <** @description: Status of INA sensor 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 INA_BAT_OUT_1
        <** @description: Status of INA sensor 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 INA_BAT_OUT_2
        <** @description: Status of Temperature sensor 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 TMP117_U810
        <** @description: Status of Temperature sensor 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 TMP117_U811
        <** @description: Status of GPIO DRIVER 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 GPIO_PCA9538_U2001
        <** @description: Status of GPIO DRIVER 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 GPIO_PCA9538_U2002
    }

    <** @description: Information provided by INA sensor 1 **>
    struct Eps2Inst1InaSensors1Type
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Energy in Watt/h \* 10
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Energy
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Temperature
    }

    <** @description: Information provided by INA sensor 2 **>
    struct Eps2Inst1InaSensors2Type
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Energy in Watt/h \* 10
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Energy
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Temperature
    }


    <** @description: Telemetry provided by the Balancer **>
    struct Eps2Inst1BalancerInfoType
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Internal_Temperature
    }    
    
    <** @description: Status provided by the Balancer **>
    struct Eps2Inst1BalancerStatusType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Description of bits:      
            CUTF (bit7)- The Charge Under-Temperature Fault bit
            COTF (bit6)- The Charge Over-Temperature Fault bit
            DUTF (bit5)- The Discharge Under-Temperature Fault bit
            DOTF (bit4)- The Discharge Over-Temperature Fault bit
            UVLOF(bit3)- The Undervoltage Lockout Fault bit
            UVF  (bit2)- The Undervoltage Fault bit
            OVLOF(bit1)- The Overvoltage Lockout Fault bit
            OVF  (bit0)- The Overvoltage Fault bit **>
            UInt8  status_register_0
            
        <** @description: Description of bits:
            VEOC (bit7)- The Voltage End-of-Charge detection bit
            RSV  (bit6)- Reserved
            OWF  (bit5)- The Open-Wire Fault bit
            CELLF(bit4)- The Cell Fail fault bit
            DSCF (bit3)- The Discharge Short Circuit Fault bit
            DOCF (bit2)- The Discharge Overcurrent Fault bit
            COCF (bit1)- The Charge Overcurrent Fault bit
            IOTF (bit0)- The Internal Over-Temperature Fault bit **>
            UInt8  status_register_1
            
        <** @description: Description of bits:
            LVCHG    (bit7)- The Low Voltage Charge bit
            INT_SCAN (bit6)- The Internal Scan bit
            ECC_FAIL (bit5)- Error Checking/detection/Correction for EEPROM read
            ECC_USED (bit4)- Error Checking/detection/Correction for EEPROM read
            DCHING   (bit3)- The Discharging bit
            CHING    (bit2)- The Charging bit
            CH_PRSNT (bit1)- The Charger Present bit
            LD_PRSNT (bit0)- The Load Present bit **>
            UInt8  status_register_2
            
        <** @description: Description of bits:
            RSV       (bit7)- Reserved
            IN_SLEEP  (bit6)- The In SLEEP Mode bit
            IN_DOZE   (bit5)- The In DOZE Mode bit
            IN_IDLE   (bit4)- The In IDLE Mode bit
            CBUV      (bit3)- The Cell Balance Undervoltage bit
            CBOV      (bit2)- The Cell Balance Overvoltage bit
            CBUTF     (bit1)- The Cell Balance Under-Temperature Fault bit
            CBOTF     (bit0)- The Cell Balance Over-Temperature Fault bit **>
            UInt8  status_register_3
    }

    <** @description: Balancer Cells info **>
    struct Eps2Inst1BalancerCellsInfoType
    {
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_1
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_2
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_3
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_4
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_5
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_6
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_7
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_8
    }
    
    
    
    <** @description: Charger info **>
    struct Eps2Inst1ChargerXpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst1ChargerXrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst1ChargerYpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst1ChargerYrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst1ChargerZpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst1ChargerZrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
//
// Global declarations for EPS BP INSTANCE2
//    
    <** @description: GetBatteryInfo from EPSII_BP_1 interface **>
    struct Eps2Inst2BatteryInfoType
    {
        <** @description: [mWh] The capacity of the battery pack.
                         0xFFFFFFFF - Unknown Value
                         0xFFFFFFFE - Error Value**>
        UInt32 Capacity
        <** @description: [mV] Voltage of the battery pack. 
                    Special return values: 
                         0xFFFFFFFF - Unknown Value
                         0xFFFFFFFE - Error Value**>
        UInt16 Voltage
        <** @description: [mA] Negative upon charge, positive upon discharge. 
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>

        Int16 Current
        <** @description: [mC] Temperature of the Battery Pack
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int32 Temperature
        <** @description: Current state of the BatteryPack
            0: ROOT - Reserved state
            1: IDENTIFYPREVIOUSSTATE - Reserved state
            2: BATTERY_AVAILABLE - Reserved state
            3: BATTERY - This is the state in which the battery pack is working normally with battery cells attached.
            4: TRANSITION_TO_HIB - This is the state in which the battery pack is working, but in 3 seconds it will switch to HIB(hibernation) mode.
            5: NORMAL - Reserved state
            6: HIB - In this state all consumers are detached and the battery pack tries to charge it's cells and to get back to BATTERY state.
            7: NOHIB - In this state the satellite is working as in Battery state and all SW protection mechanisms are stopped. The only way to leave this mode is to send request "LeaveNoHibMode"
            8: PANEL - At this state the satellite is working only when on sun. The battery cells are detached because of fatal error.
            9: ___HISTORY_BATTERY_AVAILABLE - Reserved state
            **>
        UInt8 bp_mode
    }
    
    <** @description: GetDeviceHealthInfo from EPSII_BP_1 interface **>
    struct Eps2Inst2DeviceHealthInfoType
    {
        <** @description: Time after start of the system in seconds.
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_RunningTime
        <** @description: CPU Voltage in [mV]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_Voltage
        <** @description: CPU temperature in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 ActiveCPU_Temperature
        <** @description: PCB Temperature sensor 1 in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 PCB_Temperature_1
        <** @description: PCB Temperature sensor 2 in [mC]
                    Special return values: 
                         0x7FFFFFFF - Unknown Value
                         0x7FFFFFFE - Error Value**>
        Int32 PCB_Temperature_2
        <** @description: Status of Balancer chip
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 BALANCER_CHIP_1
        <** @description: Status of Primary Input Channel 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_XP
        <** @description: Status of Redundant Input Channel 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_XR
        <** @description: Status of Primary Input Channel 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_YP
        <** @description: Status of Redundant Input Channel 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_YR
        <** @description: Status of Primary Input Channel 3
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_ZP
        <** @description: Status of Redundant Input Channel 3
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 LT8491_IC_ZR
        <** @description: Status of INA sensor 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 INA_BAT_OUT_1
        <** @description: Status of INA sensor 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 INA_BAT_OUT_2
        <** @description: Status of Temperature sensor 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 TMP117_U810
        <** @description: Status of Temperature sensor 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 TMP117_U811
        <** @description: Status of GPIO DRIVER 1
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 GPIO_PCA9538_U2001
        <** @description: Status of GPIO DRIVER 2
                    Special return values: 
                         0 - Unknown
                         1 - Online
                         2 - Communication Error
                         3 - Communication Timeout
                         4 - Driver disabled**>
        UInt8 GPIO_PCA9538_U2002
    }

    <** @description: Information provided by INA sensor 1 **>
    struct Eps2Inst2InaSensors1Type
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Energy in Watt/h \* 10
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Energy
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Temperature
    }

    <** @description: Information provided by INA sensor 2 **>
    struct Eps2Inst2InaSensors2Type
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Energy in Watt/h \* 10
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Energy
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Temperature
    }


    <** @description: Telemetry provided by the Balancer **>
    struct Eps2Inst2BalancerInfoType
    {
        <** @description: Voltage in mV
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Voltage
        <** @description: Current in mA
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Current
        <** @description: Temperature in ((degrees in C)\*10)
                    Special return values: 
                         0x7FFF - Unknown Value
                         0x7FFE - Error Value**>
        Int16 Internal_Temperature
    }    
    
    <** @description: Status provided by the Balancer **>
    struct Eps2Inst2BalancerStatusType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Description of bits:      
            CUTF (bit7)- The Charge Under-Temperature Fault bit
            COTF (bit6)- The Charge Over-Temperature Fault bit
            DUTF (bit5)- The Discharge Under-Temperature Fault bit
            DOTF (bit4)- The Discharge Over-Temperature Fault bit
            UVLOF(bit3)- The Undervoltage Lockout Fault bit
            UVF  (bit2)- The Undervoltage Fault bit
            OVLOF(bit1)- The Overvoltage Lockout Fault bit
            OVF  (bit0)- The Overvoltage Fault bit **>
            UInt8  status_register_0
            
        <** @description: Description of bits:
            VEOC (bit7)- The Voltage End-of-Charge detection bit
            RSV  (bit6)- Reserved
            OWF  (bit5)- The Open-Wire Fault bit
            CELLF(bit4)- The Cell Fail fault bit
            DSCF (bit3)- The Discharge Short Circuit Fault bit
            DOCF (bit2)- The Discharge Overcurrent Fault bit
            COCF (bit1)- The Charge Overcurrent Fault bit
            IOTF (bit0)- The Internal Over-Temperature Fault bit **>
            UInt8  status_register_1
            
        <** @description: Description of bits:
            LVCHG    (bit7)- The Low Voltage Charge bit
            INT_SCAN (bit6)- The Internal Scan bit
            ECC_FAIL (bit5)- Error Checking/detection/Correction for EEPROM read
            ECC_USED (bit4)- Error Checking/detection/Correction for EEPROM read
            DCHING   (bit3)- The Discharging bit
            CHING    (bit2)- The Charging bit
            CH_PRSNT (bit1)- The Charger Present bit
            LD_PRSNT (bit0)- The Load Present bit **>
            UInt8  status_register_2
            
        <** @description: Description of bits:
            RSV       (bit7)- Reserved
            IN_SLEEP  (bit6)- The In SLEEP Mode bit
            IN_DOZE   (bit5)- The In DOZE Mode bit
            IN_IDLE   (bit4)- The In IDLE Mode bit
            CBUV      (bit3)- The Cell Balance Undervoltage bit
            CBOV      (bit2)- The Cell Balance Overvoltage bit
            CBUTF     (bit1)- The Cell Balance Under-Temperature Fault bit
            CBOTF     (bit0)- The Cell Balance Over-Temperature Fault bit **>
            UInt8  status_register_3
    }

    <** @description: Balancer Cells info **>
    struct Eps2Inst2BalancerCellsInfoType
    {
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_1
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_2
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_3
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_4
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_5
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_6
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_7
        <** @description: CELL voltage [mV]
                    Special return values: 
                         0xFFFF - Unknown Value
                         0xFFFE - Error Value**>
        UInt16 Cell_8
    }
    
    
    
    <** @description: Charger info **>
    struct Eps2Inst2ChargerXpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst2ChargerXrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst2ChargerYpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst2ChargerYrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst2ChargerZpType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
    
    <** @description: Charger info **>
    struct Eps2Inst2ChargerZrType
    {
        <** @description: Communication state of the charger
                    Return values: 
                         0 - Unknown state
                         1 - Chip Online
                         2 - Error in communication**>
        UInt8 COM_STATE
        <** @description: Raw register value 
        Description of bits:
            RSV         (bit7 - bit 5)- Reserved
            VIN_UVLO    (bit4)- The In SLEEP Mode bit
            PS_OR_SOLAR (bit3)- The In DOZE Mode bit
            SOLAR_STATE (bit0 - bit2)-  101 - Battery Limited
                                        100 - Full Panel Scan
                                        011 - Perturb and Observe
                                        010 - LP Mode and VIN Pulsing
                                        001 - LP Mode and VIN too low
                                        000 - None of the Above **>
        UInt16 STAT_SUPPLY
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_POUT
        <** @description: Calculated power drawn from the charger's supply. **>
        UInt16 TELE_PIN
        <** @description: Calculated power delivered out of the charger. **>
        UInt16 TELE_IOUT
        <** @description: Input current from VIN. **>
        UInt16 TELE_IIN
        <** @description: The most recently measured VBAT voltage as measured at the FBOR pin. **>
        UInt16 TELE_VBAT
        <** @description: The most recently measured VIN voltage as measured at the VINR pin. **>
        UInt16 TELE_VINR
    }
        
// end EPS BP generated code
    
}
