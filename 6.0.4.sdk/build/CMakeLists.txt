#
# - Endurosat OBC SDK root CMake build script
#
# This script creates the main OBC SDK executable and other related build artifacts
# (see below for details).
#
# Note that this file is the top-level hierarchy of a multi-level CMake build.
#
cmake_minimum_required(VERSION 3.6)

project(OBC C ASM)

include(espf.cmake)

# This is the name of the finally produced executable image. You can change this to
# match the name of your OBC-based project.
set(OBC_noext "OBC_STDPF_STM32H")

set(OBC "${OBC_noext}.elf")

# Represents the aboslute path of the main project source directory.
# You should use this in your `CMakeLists.txt` files to refer to this folder to
# make it easier to relocate the project root folder later in the development if
# that would be needed.
cmake_path(APPEND PROJECT_ROOT ${CMAKE_SOURCE_DIR} ".." "espf")

#Represents the absolute path to the tools folder of the main project. It shall be used
#in 'CMakeLists.txt' files to refer tools needed by specific modules.
cmake_path(APPEND PROJECT_TOOLS_ROOT ${CMAKE_SOURCE_DIR} ".." "other" "tools")
# Represents the root folder where all FIDL files reside. Those files are used for
# code generation with *macchiato*. It would be a good practice to put your own FIDL
# files at this same root folder when you are extending the OBC SDK with custom commands.
# This way it will be easier for you to merge your modified code with future releases of the platform.
cmake_path(APPEND FIDL_ROOT ${CMAKE_SOURCE_DIR} ".." "espf" "core" "fidl")

# Represents the root folder where all OBC-specific FIDL files reside.
cmake_path(APPEND FIDL_ROOT_OBC ${CMAKE_SOURCE_DIR} ".." "espf" "core" "fidl" "obc" "fp")

# Represents the abosolute path of the OBC SDK build folder (where `macaron` and root `CMakeLists.txt`
# files reside).
set(ROOT_BUILD_PATH "${CMAKE_SOURCE_DIR}")

# This is the list of SDK-supported build configuration flavors. You can use CMake generator expressions of
# the form:
# "$<$<CONFIG:debug>:-my-debug-config-only-option>" where '-my-debug-config-only-option' will be placed as the
# output if the Debug configuration is requested to be built
set(CMAKE_CONFIGURATION_TYPES
    "debug;release;noboot_debug;noboot_release" CACHE STRING "" FORCE
)

# the following file is generated by the macaron.py script and contains the configuration name;
# a workaround due to the fact that generator expressions (i.e. <CONFIG>) cannot be accessed with
# certain cmake commands to obtain the actual build configuration requested by the user
include(build_cfg.cmake)
message(STATUS ">> Active build configuration: " ${BUILD_CFG_NAME})

# Read the version from the version file and define the version variables
define_version_from_file("${CMAKE_CURRENT_SOURCE_DIR}/../version")
message(STATUS "Detected Version ${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}.${${CMAKE_PROJECT_NAME}_VERSION_MINOR}.${${CMAKE_PROJECT_NAME}_VERSION_PATCH}-${${CMAKE_PROJECT_NAME}_VERSION_LABEL}")

# Start generation of build_options.h file (for use with STM32CubeIDE to enable
# inactive code highlight feature in the code editor)
string(TIMESTAMP BUILD_TIMESTAMP)
set(BUILD_OPT_H build_options.h)
file(WRITE ${BUILD_OPT_H})
file(APPEND ${BUILD_OPT_H} "//\n// This file is generated by CMake @ ${BUILD_TIMESTAMP}! Do not edit manually!\n")
file(APPEND ${BUILD_OPT_H} "// The file is not meant to be included directly in your builds but is only used by the\n")
file(APPEND ${BUILD_OPT_H} "// STM32 IDE to properly highlight the current build configuration! All defines here are automatically\n")
file(APPEND ${BUILD_OPT_H} "// supplied to the compiler via command-line preprocessor defines and apply to the whole code base!\n//\n\n")
file(APPEND ${BUILD_OPT_H} "#ifndef BUILD_OPTIONS_H\n\n")

#
# function ADD_OPTION:
# The function performs the following actions:
#     - adds a standard CMake option with name <option>, a description specified
#       with the <description> parameter and a default value given by <default_value>
#       parameter
#     - appends the '-D<option>' preprocessor-define to the list referenced by the <cdef_list> parameter
#     - generates a '#define <option>' line in the ${BUILD_OPT_H} file if the option is turned on
#
# Example:
#     ADD_OPTION(BEACONS_ENABLED "Specifies whether beacons sending is active or not" ON ROOT_COMPILE_DEFS)
#
#     The BEACONS_ENABLED CMake option will be added and accessible via the cmake-gui. It will be turned ON by
#     default, thus our build_options.h file will contain the following line:
#         '#define BEACONS_ENABLED'.
#     Finally the ROOT_COMPILE_DEFS list will be appended with '-DBEACONS_ENABLED' compiler option and this preprocessor
#     define will be propagated to all files in the build, making it possible to use conditional compilation without including
#     any specific header:
#
#     #if defined(BEACONS_ENABLED)
#         <Beacons-specific code here>
#     #endif    // #if defined(BEACONS_ENABLED)
#
function(ADD_OPTION option description default_value cdef_list)
    option(${option} ${description} ${default_value})

    if (${default_value})
        list(APPEND templist
             ${${cdef_list}}
             -D${option}
        )
        set(${cdef_list} ${templist} PARENT_SCOPE)

        file(APPEND ${BUILD_OPT_H} "#define ${option}\n")
    else ()
        file(APPEND ${BUILD_OPT_H} "// #define ${option}\n")
    endif ()
endfunction()

#
# OBC SDK project build options (change to match your project needs)
#
ADD_OPTION(GENERAL_EXEH_PERSIST_ENABLED "Enables periodic writing of exception data to a file" ON ROOT_COMPILE_DEFS)
ADD_OPTION(TELEMETRY_SERVICE_ENABLED "Controls the telemetry collection" ON ROOT_COMPILE_DEFS)
ADD_OPTION(BEACONS_ENABLED "Specifies whether beacons sending is active or not" ON ROOT_COMPILE_DEFS)
ADD_OPTION(UHF_BEACONS_SINK_ENABLED "Controls whether beacons use the UHF sink interface or not" ON ROOT_COMPILE_DEFS)
ADD_OPTION(OPMODES_ENABLED "Controls the operational modes framework" ON ROOT_COMPILE_DEFS)
ADD_OPTION(UHF_II_SUPPORT_ENABLED "Controls UHF II support" ON ROOT_COMPILE_DEFS)
ADD_OPTION(SXBAND_SCHEDULER_ENABLED "Enables the sequential SXBand command scheduler" ON ROOT_COMPILE_DEFS)
ADD_OPTION(COMM_ESPS_ENABLED "Specifies whether ESPSI stack is included in the build or not" ON ROOT_COMPILE_DEFS)
ADD_OPTION(SXBAND_CRYPTO_ENABLED "Controls SXBand file uploads encryption" ON ROOT_COMPILE_DEFS)
ADD_OPTION(CRYPTO_SERVICE_ENABLED "Controls whether crypto helper service is available for use" ON ROOT_COMPILE_DEFS)
ADD_OPTION(LWIP_SUPPORT_ENABLED "Controls the lwIP stack integration" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(ETHERNET_SUPPORT_ENABLED "Controls whether the ethernet support is turned on" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(SLIP_SUPPORT_ENABLED "Controls whether the SLIP  support is turned on" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(TFTPD_SUPPORT_ENABLED "Controls whether the TFTP deamon is running or not" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(MICROPYTHON_SERVICE_ENABLED "Controls whether micropython service is available for use" ON ROOT_COMPILE_DEFS)
ADD_OPTION(GNSS_ENABLED "Enables GNSS OEM719 device with OBC" ON ROOT_COMPILE_DEFS)
ADD_OPTION(CUBEADCS_GEN2_ENABLED "Enables integration of Gen2 CubeADCS module in OBC" ON ROOT_COMPILE_DEFS)

ADD_OPTION(COMM_ESPS_MAC_PHY_ENABLED "Specifies whether standard ESPSI physical bus driver is enabled or not" ON ROOT_COMPILE_DEFS)
ADD_OPTION(COMM_RS485_MAC_LAYER_ENABLED "Specifies whether RS485 MAC interface is used or not" ON ROOT_COMPILE_DEFS)
ADD_OPTION(EXTMODULES_SBAND_TMTC_ENABLED "Enables SBAND TMTC support for OBC" ON ROOT_COMPILE_DEFS)
ADD_OPTION(CSP_SUPPORT_ENABLED "Specifies whether CSP drivers are used" ON ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_LIB_ENABLED "Enables debug library functionality when in debug mode" ON ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_MODE_WD_ENABLED "Controls watchdog activation in debug mode only" ON ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_TRACE_FWUPD_ENABLED "Enables FW update debug tracing to system UART" ON ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_TRACE_MACDRV_ENABLED "Enables MAC driver debug tracing to system UART" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_TRACE_CUBEADCS_ENABLED "Enable CubeADCS debug tracing to system UART" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_TRACE_OP_MODES_ENABLED "Enable OpMode debug tracing to system UART" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_TRACE_LIBHSM_ENABLED "Enable LIBHSM debug tracing" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_TRACE_SDS_ENABLED "Enable SDS debug tracing" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(DEBUG_TRACE_AOCS_CNTRL_ENABLED "Enable AOCS control debug tracing to system UART" OFF ROOT_COMPILE_DEFS)
ADD_OPTION(ES_TRACE_ENABLED "Enable tracing on OBC level" ON ROOT_COMPILE_DEFS)
ADD_OPTION(STM32_SWV_SUPPORT "Enable additional tracing to the SWV console in STM32CubeIDE" ON ROOT_COMPILE_DEFS)

# This is the path to the STM32H753 MCU-specific startup code which executes before the C main() entry-point.
# This code is written in assembly language and should generally not be modified unless you know what you are doing.
# It performs basic setup of the system before passing control to the compiler-generated entry-point for the project.
set(EPS_BP_COUNT
    "3"
)

# This is the path to the STM32H753 MCU-specific startup code which executes before the C main() entry-point.
# This code is written in assembly language and should generally not be modified unless you know what you are doing.
# It performs basic setup of the system before passing control to the compiler-generated entry-point for the project.
set(STARTUPCODE
    "${PROJECT_ROOT}/arch/stm32h753iit/startup/startup_stm32h753iitx.s"
)

# These are the startup code-specific options passed to the assembler.
set_source_files_properties(${STARTUPCODE} PROPERTIES COMPILE_FLAGS "-mcpu=cortex-m7 -g3 -c -x assembler-with-cpp -MMD -MP -mfpu=fpv5-d16 -mfloat-abi=hard -mthumb")

#
# This is the main list of OBC source files included in the build. You should modify
# according to your needs or if it turns out that you are not using some of the files here.
# Reducing this list will speed-up compilation and linkage and will also free some FLASH and RAM
# memory for your custom applications.
#
list(APPEND OBC_sources
    "${STARTUPCODE}"
    "${PROJECT_ROOT}/app/main.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/can/src/can.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/drv_led/src/drv_led.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/drv_mcu_temperature/src/drv_mcu_temperature.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/drv_watchdog/src/drv_iwdg.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/radio/es_sxband/S_X_Band_Trnsm.c"
    "${PROJECT_ROOT}/config/es_sxband/es_sxband_config.c"
    "${PROJECT_ROOT}/config/arch/stm32h753iit/syscall_stubs.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/acc_ais328dq/ais328dq_driver.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/es_panels/panels.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/magn_lis3mdl/LIS3MDL_MAG_driver.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/sds_events_gen/sds_events.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/storage/drv_fram/src/drv_fram.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/i2c/MX_I2C.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/io/DAT_Inputs.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_adc.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_adc_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_cortex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_dma.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_dma_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_exti.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_fdcan.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_flash.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_flash_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_gpio.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_hsem.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_i2c.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_i2c_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_iwdg.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_mdma.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_pwr.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_pwr_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_rcc.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_rcc_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_rng.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_rng_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_rtc.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_rtc_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_sd.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_sd_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_spi.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_spi_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_tim.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_tim_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_uart.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_uart_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_wwdg.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_delayblock.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_dma.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_exti.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_gpio.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_i2c.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_rcc.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_rtc.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_sdmmc.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_tim.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_usart.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_ll_utils.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_eth.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_eth_ex.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_crc.c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_crc_ex.c"
    "${PROJECT_ROOT}/config/aocs/adcs_tlm/adcs_tlm_cfg.c"
    "${PROJECT_ROOT}/config/arch/stm32h753iit/MCU_Init.c"
    "${PROJECT_ROOT}/config/arch/stm32h753iit/stm32h7xx_hal_msp.c"
    "${PROJECT_ROOT}/config/arch/stm32h753iit/stm32h7xx_hal_timebase_tim.c"
    "${PROJECT_ROOT}/config/arch/stm32h753iit/sys_hook_dispatcher.c"
    "${PROJECT_ROOT}/config/arch/stm32h753iit/system_stm32h7xx.c"
    "${PROJECT_ROOT}/config/arch/stm32h753iit/UnhandledISRs.c"
    "${PROJECT_ROOT}/config/assertions/assertions_cfg.c"
    "${PROJECT_ROOT}/config/beacons/beacons_cfg_user.c"
    "${PROJECT_ROOT}/config/datacache/datacache.c"
    "${PROJECT_ROOT}/config/datacache/datacache_cfg.c"
    "${PROJECT_ROOT}/config/eps_ctrl/eps_ctrl_cfg.c"
    "${PROJECT_ROOT}/config/ESPLATFORM_NETWORK_STACK/src/ESSA_CommonUtils.c"
    "${PROJECT_ROOT}/config/ESPLATFORM_NETWORK_STACK/src/ESSA_ServiceProtocol_Handler.c"
    "${PROJECT_ROOT}/config/ESPLATFORM_NETWORK_STACK/src/ESSA_Stack_Facade.c"
    "${PROJECT_ROOT}/config/ESPLATFORM_NETWORK_STACK/src/ESSA_StackConfig.c"
    "${PROJECT_ROOT}/config/exeh/src/es_exeh_cfg.c"
    "${PROJECT_ROOT}/config/eps_i/eps_i_config.c"
    "${PROJECT_ROOT}/config/eps_ii/eps_ii_config.c"
    "${PROJECT_ROOT}/config/sband_tmtc/sband_tmtc_cfg.c"
    "${PROJECT_ROOT}/config/freertos/freertos.c"
    "${PROJECT_ROOT}/config/libdatetime/datetime_cfg.c"
    "${PROJECT_ROOT}/config/payload_ctrl/payload_cfg_user.c"
    "${PROJECT_ROOT}/config/sys_conf/sys_conf.c"
    "${PROJECT_ROOT}/config/sys_conf/sys_mod.c"
    "${PROJECT_ROOT}/config/telemetry/telemetry_cfg_user.c"
    "${PROJECT_ROOT}/config/sensor_data_service/sensor_data_cfg.c"
    "${PROJECT_ROOT}/config/sensor_data_service/sensor_mag_cfg.c"
    "${PROJECT_ROOT}/config/sensor_data_service/sensor_gyro_cfg.c"
    "${PROJECT_ROOT}/config/sensor_data_service/sensor_css_cfg.c"
    "${PROJECT_ROOT}/config/sensor_data_service/sensor_acc_cfg.c"
    "${PROJECT_ROOT}/config/sensor_data_service/sensor_temp_cfg.c"
    "${PROJECT_ROOT}/config/aocs/aocs_cntrl/aocs_cntrl_cfg.c"
    "${PROJECT_ROOT}/config/aocs/aocs_cntrl/aocs_cntrl_cubeadcs_int.c"
    "${PROJECT_ROOT}/config/aocs/aocs_cntrl/aocs_cntrl_esadcs_int.c"
    "${PROJECT_ROOT}/config/trace_config/src/trace_config.c"
    "${PROJECT_ROOT}/config/module_id/src/module_id_cfg.c"
)

if ((SLIP_SUPPORT_ENABLED) AND (LWIP_SUPPORT_ENABLED))
list(APPEND OBC_sources
    "${PROJECT_ROOT}/config/slipif/slipif_cfg.c"
)
endif ((SLIP_SUPPORT_ENABLED) AND (LWIP_SUPPORT_ENABLED))

if (CRYPTO_SERVICE_ENABLED)
list(APPEND OBC_sources
    "${PROJECT_ROOT}/config/STM32_Cryptographic/cmox_low_level.c"
)
endif (CRYPTO_SERVICE_ENABLED)

#
# This is the global list of include paths given to all modules in the build.
# You should avoid putting module-specific includes here because they have to be
# specified as part of the child-level CMakeLists.txt file using target_include_directories()
# cmake command.
#
list(APPEND OBC_includes
    "${PROJECT_ROOT}"
    "${PROJECT_ROOT}/app"
    "${PROJECT_ROOT}/arch/arm/cmsis/include"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/can/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/drv_led/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/drv_mcu_temperature/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/drv_watchdog/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/cubeobc/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/power/eps_i"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/power/eps_ii"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/power/eps_ii/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/power/eps_m"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/radio/es_sxband"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/acc_ais328dq"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/es_panels"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/gyro_adis16265/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/magn_lis3mdl"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/sensors/sds_events_gen"
    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/storage/drv_fram/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/cmsis/device/st/stm32h7xx/include"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/i2c"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/inc"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/inc/legacy"
    "${PROJECT_ROOT}/arch/stm32h753iit/hal/io"
    "${PROJECT_ROOT}/config"
    "${PROJECT_ROOT}/config/arch/stm32h753iit"
    "${PROJECT_ROOT}/config/assertions"
    "${PROJECT_ROOT}/config/datacache"
    "${PROJECT_ROOT}/config/eps_ctrl"
    "${PROJECT_ROOT}/config/eps_i"
    "${PROJECT_ROOT}/config/eps_ii"
    "${PROJECT_ROOT}/config/es_sxband"
    "${PROJECT_ROOT}/config/sband_tmtc"
    "${PROJECT_ROOT}/config/ESPLATFORM_NETWORK_STACK/inc"
    "${PROJECT_ROOT}/config/exeh/inc"
    "${PROJECT_ROOT}/config/fatfs"
    "${PROJECT_ROOT}/config/freertos"
    "${PROJECT_ROOT}/config/GlobalConfig"
    "${PROJECT_ROOT}/config/libhsm"
    "${PROJECT_ROOT}/config/module_id/inc"
    "${PROJECT_ROOT}/config/nvm/inc"
    "${PROJECT_ROOT}/config/nvm"
    "${PROJECT_ROOT}/config/nvm_appcfg/inc"
    "${PROJECT_ROOT}/config/nvm_bootcfg/inc"
    "${PROJECT_ROOT}/config/crypto"
    "${PROJECT_ROOT}/config/sys_conf"
    "${PROJECT_ROOT}/config/sys_printf/inc"
    "${PROJECT_ROOT}/config/taskmon"
    "${PROJECT_ROOT}/config/sensor_data_service"
    "${PROJECT_ROOT}/config/aocs/aocs_cntrl"
    "${PROJECT_ROOT}/config/cbuf"
    "${PROJECT_ROOT}/config/trace_config/inc"
    "${PROJECT_ROOT}/config/netw"
    "${PROJECT_ROOT}/config/slipif"
    "${PROJECT_ROOT}/config/arm_fault_handler"
    "${PROJECT_ROOT}/core/lib"
    "${PROJECT_ROOT}/core/lib/assertions/inc"
    "${PROJECT_ROOT}/core/lib/cdef"
    "${PROJECT_ROOT}/core/lib/crc/inc"
    "${PROJECT_ROOT}/core/lib/debug/inc"
    "${PROJECT_ROOT}/core/lib/FP_common"
    "${PROJECT_ROOT}/core/lib/libCFB"
    "${PROJECT_ROOT}/core/lib/libDataSink"
    "${PROJECT_ROOT}/core/lib/libdatetime/inc"
    "${PROJECT_ROOT}/core/lib/libhsm/inc"
    "${PROJECT_ROOT}/core/lib/liblz77"
    "${PROJECT_ROOT}/core/lib/libtimer/inc"
    "${PROJECT_ROOT}/core/lib/misc"
    "${PROJECT_ROOT}/core/lib/module_id/inc"
    "${PROJECT_ROOT}/core/lib/reset_counters"
    "${PROJECT_ROOT}/core/lib/sys_instancer"
    "${PROJECT_ROOT}/core/lib/tle"
    "${PROJECT_ROOT}/core/lib/trace/inc"
    "${PROJECT_ROOT}/core/lib/cbuf/inc"
    "${PROJECT_ROOT}/core/lib/sys_printf/inc"
    "${PROJECT_ROOT}/core/lib/irq/inc"
    "${PROJECT_ROOT}/core/middlewares"
    "${PROJECT_ROOT}/core/middlewares/external/FreeRTOS/Source/CMSIS_RTOS_V2"
    "${PROJECT_ROOT}/core/middlewares/external/FreeRTOS/Source/include"
    "${PROJECT_ROOT}/core/middlewares/external/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1"
    "${PROJECT_ROOT}/core/middlewares/external/fatfs"
    "${PROJECT_ROOT}/core/services"
    "${PROJECT_ROOT}/core/services/aocs/adcs_tlm"
    "${PROJECT_ROOT}/core/services/beacons/inc"
    "${PROJECT_ROOT}/core/services/eps_ctrl/inc"
    "${PROJECT_ROOT}/core/services/espsi"
    "${PROJECT_ROOT}/core/services/espsi/cp"
    "${PROJECT_ROOT}/core/services/espsi/fwupd"
    "${PROJECT_ROOT}/core/services/espsi/tp"
    "${PROJECT_ROOT}/core/services/exeh/inc"
    "${PROJECT_ROOT}/core/services/init_service"
    "${PROJECT_ROOT}/core/services/payload_ctrl/inc"
    "${PROJECT_ROOT}/core/services/payload_ctrl/src"
    "${PROJECT_ROOT}/core/services/payload_scheduler"
    "${PROJECT_ROOT}/core/services/rtc"
    "${PROJECT_ROOT}/core/services/sd_mng"
    "${PROJECT_ROOT}/core/services/sd_mng/fp"
    "${PROJECT_ROOT}/core/services/solar_panels"
    "${PROJECT_ROOT}/core/services/taskmon"
    "${PROJECT_ROOT}/core/services/telemetry/inc"
    "${PROJECT_ROOT}/core/services/es_coordsys/inc"
    "${PROJECT_ROOT}/core/services/es_adcs/inc"
    "${PROJECT_ROOT}/core/services/actuator_control_service/inc"
    "${PROJECT_ROOT}/core/services/sensor_data_service/inc"
    "${PROJECT_ROOT}/core/services/sys_time"
    "${PROJECT_ROOT}/core/services/sys_time/inc"
    "${PROJECT_ROOT}/core/services/fault_persistor"
)

if (CSP_SUPPORT_ENABLED)
    list(APPEND OBC_includes
        "${PROJECT_ROOT}/config/csp/inc"
        "${PROJECT_ROOT}/core/middlewares/external/csp/include"
        "${PROJECT_ROOT}/core/middlewares/external/csp/build/include"
    )
endif (CSP_SUPPORT_ENABLED)

if (LWIP_SUPPORT_ENABLED)
    list(APPEND OBC_includes
        "${PROJECT_ROOT}/config/lwIP"
    )
endif (LWIP_SUPPORT_ENABLED)

if (SXBAND_CRYPTO_ENABLED)
    list(APPEND OBC_sources
        "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_cryp.c"
        "${PROJECT_ROOT}/arch/stm32h753iit/hal/src/stm32h7xx_hal_cryp_ex.c"
    )
endif (SXBAND_CRYPTO_ENABLED)

if (COMM_ESPS_MAC_PHY_ENABLED)
    list(APPEND esps_mac_phy_includes
        "${PROJECT_ROOT}/config/espsi_drv/inc"
        "${PROJECT_ROOT}/arch/stm32h753iit/drivers/comm/espsi_drv/inc"
    )

    list(APPEND esps_mac_phy_sources
        "${PROJECT_ROOT}/config/espsi_drv/src/esps_drv_config.c"
        "${PROJECT_ROOT}/config/espsi_drv/src/esps_drv_dispatcher_thread.c"
        "${PROJECT_ROOT}/config/espsi_drv/src/esps_drv_rng_config.c"
        "${PROJECT_ROOT}/config/espsi_drv/src/esps_drv_tim_config.c"
        "${PROJECT_ROOT}/config/espsi_drv/src/es_mac_notif.c"
    )

    list(APPEND OBC_includes ${esps_mac_phy_includes})
    list(APPEND OBC_sources ${esps_mac_phy_sources})
endif (COMM_ESPS_MAC_PHY_ENABLED)

if (GNSS_ENABLED)
    list(APPEND OBC_includes
    	"${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/gnss"
    )
    list(APPEND OBC_sources
        "${PROJECT_ROOT}/config/gnss/src/gnss_config.c"
    )
endif (GNSS_ENABLED)

if (CUBEADCS_GEN2_ENABLED)
    list(APPEND OBC_includes
    	"${PROJECT_ROOT}/config/libcubeobc"
        "${PROJECT_ROOT}/core/middlewares/external/libcubeobc/include/cubeObc"
        "${PROJECT_ROOT}/core/services/aocs/cubeadcs_gen2/inc"
    )
    list(APPEND OBC_sources
        "${PROJECT_ROOT}/config/libcubeobc/cubeObc_config.c"
        "${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/cubeobc/src/cubeobc_critical.c"
	    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/cubeobc/src/cubeobc_time.c"
	    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/cubeobc/src/cubeobc_can.c"
	    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/cubeobc/src/cubeobc_uart.c"
	    "${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/cubeobc/src/cubeobc_file.c"
	    "${PROJECT_ROOT}/config/aocs/aocs_cntrl/aocs_cntrl_cubeadcs_gen2_int.c"
    )
endif (CUBEADCS_GEN2_ENABLED)

if (MICROPYTHON_SERVICE_ENABLED)
    list(APPEND OBC_includes "${PROJECT_ROOT}/core/services/upython/inc")
endif (MICROPYTHON_SERVICE_ENABLED)

# This definition is needed to pack the structure types used in the Gen2 CubeADCS API.
# The definition must always be present due to potential usage of the struct types in
# NVM block definitions.
list (APPEND ROOT_COMPILE_DEFS
	USE_TCTLM_PACKED=1
)


set(NOBOOTLOADER_COMPILE_DEFS
    BOOTLOADER_DISABLED
)

list(APPEND DEBUG_COMPILE_DEFS
    DEBUG_ENABLED
    DEBUG_ASSERTIONS
)

# This is the list of global compile defines which can also be used in child
# CMakeLists.txt files after adding them to the build via add_subdirectory()
# cmake command. As you can see, generator expressions are used here which
# get expanded only if the corresponding build configuration $<CONFIG:xxx> is
# requested for building.
list(APPEND ROOT_COMPILE_DEFS
    $<$<CONFIG:debug>:${DEBUG_COMPILE_DEFS}>
    $<$<CONFIG:noboot_debug>:${DEBUG_COMPILE_DEFS}>
    $<$<CONFIG:noboot_debug>:${NOBOOTLOADER_COMPILE_DEFS}>
    $<$<CONFIG:noboot_release>:${NOBOOTLOADER_COMPILE_DEFS}>
    -D__packed=__attribute__\(\(__packed__\)\)
    -DUSE_HAL_DRIVER
    -DUSE_FULL_LL_DRIVER
    -DSTM32H753xx
    -D${CMAKE_PROJECT_NAME}_VERSION_MAJOR=${${CMAKE_PROJECT_NAME}_VERSION_MAJOR}
    -D${CMAKE_PROJECT_NAME}_VERSION_MINOR=${${CMAKE_PROJECT_NAME}_VERSION_MINOR}
    -D${CMAKE_PROJECT_NAME}_VERSION_PATCH=${${CMAKE_PROJECT_NAME}_VERSION_PATCH}
    -D${CMAKE_PROJECT_NAME}_VERSION_LABEL=${${CMAKE_PROJECT_NAME}_VERSION_LABEL}
)

if (OPMODES_ENABLED)
    list(APPEND OBC_sources
        "${PROJECT_ROOT}/app/conops/conops.c"
        "${PROJECT_ROOT}/app/conops/conops_payload.c"
        "${PROJECT_ROOT}/app/conops/conops_periodic_ev_task.c"
        "${PROJECT_ROOT}/app/conops/gen/conops_sm_config.c"
        "${PROJECT_ROOT}/app/conops/gen/conops_sm_config_user.c"
    )

    list(APPEND OBC_includes
        "${PROJECT_ROOT}/app/conops"
        "${PROJECT_ROOT}/app/conops/cfg"
        "${PROJECT_ROOT}/app/conops/gen"
    )
endif (OPMODES_ENABLED)

# This is the list of global compiler options shared to all child CMakeLists.txt files.
set(ROOT_COMPILE_OPTIONS
    -mcpu=cortex-m7
    -std=gnu11
    -g3
    -c
    -Og
    -ffunction-sections
    -fstack-usage
    -MMD
    -MP
    -mfpu=fpv5-d16
    -mfloat-abi=hard
    -mthumb
    -Wall
    -pedantic
    -Werror=implicit
)

add_executable(${OBC}
    ${OBC_sources}
)

target_include_directories(${OBC} PUBLIC
    ${OBC_includes}
)

set(ROOT_INCLUDES
    ${OBC_includes}
)

# This line specifies the linker definitions file used for configurations without a
# bootloader (a.k.a. No-boot configurations). These can be flashed stand-alone on the OBC
# without the need for a pre-flashed Endurosat Bootloader image to run them.
set(NOBOOT_LINKER_FILE
    "-T${PROJECT_ROOT}/arch/stm32h753iit/linker/STM32H753IITx_FLASH_No_Bootloader.ld"
)

# This line specifies the linker definitions file for the configurations which will be used
# alongside the Endurosat Bootloader image.
set(APP_LINKER_FILE
    "-T${PROJECT_ROOT}/arch/stm32h753iit/linker//STM32H753IITx_FLASH.ld"
)

set(ROOT_LINK_OPTIONS
    -mcpu=cortex-m7
    -mfpu=fpv5-d16
    -mfloat-abi=hard
)

target_compile_definitions(${OBC} PUBLIC
    -D__weak=__attribute__\(\(weak\)\)
    -DENABLE_SCRATCH_BUFFER
)

target_compile_definitions(${OBC} PUBLIC
    ${ROOT_COMPILE_DEFS}
)

target_compile_options(${OBC} PUBLIC
    ${ROOT_COMPILE_OPTIONS}
)

# The following section specifies the OBC SDK executable linker options. As you can see, some of
# these options depend on the build configuration used.
target_link_options(${OBC} PUBLIC ${ROOT_LINK_OPTIONS})
target_link_options(${OBC} PUBLIC $<$<CONFIG:noboot_debug>:${NOBOOT_LINKER_FILE}>)
target_link_options(${OBC} PUBLIC $<$<CONFIG:noboot_release>:${NOBOOT_LINKER_FILE}>)
target_link_options(${OBC} PUBLIC $<$<CONFIG:debug>:${APP_LINKER_FILE}>)
target_link_options(${OBC} PUBLIC $<$<CONFIG:Release>:${APP_LINKER_FILE}>)
target_link_options(${OBC} PUBLIC -Wl,-Map=$<CONFIG>/${OBC_noext}_$<CONFIG>.map)
target_link_options(${OBC} PUBLIC -Wl,--gc-sections)
target_link_options(${OBC} PUBLIC -static)
target_link_options(${OBC} PUBLIC -u_printf_float)
target_link_options(${OBC} PUBLIC -mfpu=fpv5-d16)
target_link_options(${OBC} PUBLIC -mfloat-abi=hard)
target_link_options(${OBC} PUBLIC -mthumb)
target_link_options(${OBC} PUBLIC -Wl,--start-group)
target_link_options(${OBC} PUBLIC -lc)
target_link_options(${OBC} PUBLIC -lm)
target_link_options(${OBC} PUBLIC -Wl,--end-group)

add_subdirectory(${PROJECT_ROOT}/arch/stm32h753iit/drivers/storage/sd sd_diskio)
target_link_libraries(${OBC} PUBLIC sd_diskio)

add_subdirectory(${PROJECT_ROOT}/core/middlewares/external/fatfs fatfs)
target_link_libraries(${OBC} PUBLIC fatfs)

if (COMM_ESPS_MAC_PHY_ENABLED)
    add_subdirectory(${PROJECT_ROOT}/arch/stm32h753iit/drivers/comm/espsi_drv espsi_drv)
    target_link_libraries(${OBC} PUBLIC espsi_drv)
endif ()

if (GNSS_ENABLED)
    add_subdirectory(${PROJECT_ROOT}/arch/stm32h753iit/drivers/positioning/gnss gnss)
    target_link_libraries(${OBC} PUBLIC gnss)
endif ()

add_subdirectory(${PROJECT_ROOT} espf_sub)
target_link_libraries(${OBC} PUBLIC espf_sub)

set(MODULE_ID_PATH "${PROJECT_ROOT}/core/lib/module_id/src/module_id.c")

add_custom_command(
    TARGET ${OBC} PRE_BUILD COMMAND ${CMAKE_COMMAND} -E touch
    "${MODULE_ID_PATH}"
    VERBATIM
)


# This custom command doesn't actually generate any output but it triggers a rebuild of the versioning information to update the build
# timestamp on each build even if the versioning information didn't change.
add_custom_command(
    OUTPUT "${MODULE_ID_PATH}"
    COMMAND ${CMAKE_COMMAND} -E touch "${MODULE_ID_PATH}"
    VERBATIM
)

# This custom command generates some build artifacts after linking the final executable image.
# It prints the build size summary and generates the linker map file, the compiler listing file and
# a .bin file ready for flashing via the STM32Programmer tool. Finally, the command performs some clean-up
# activities for any FIDL-generated content.
add_custom_command(
    TARGET ${OBC} POST_BUILD
    COMMAND arm-none-eabi-size "$<TARGET_FILE:${OBC}>"
    COMMAND arm-none-eabi-objcopy -O binary "$<TARGET_FILE:${OBC}>" "$<CONFIG>/${OBC_noext}_$<CONFIG>.bin"
    COMMAND arm-none-eabi-objdump -h -S "$<TARGET_FILE:${OBC}>" > "$<CONFIG>/${OBC_noext}_$<CONFIG>.list"
    COMMAND ${MACARON_CMD} --clean-gen-content=${PROJECT_ROOT}
    VERBATIM
)

# Write build options header on disk for use with STM32CubeIDE editor inactive code highlight feature.
file(APPEND ${BUILD_OPT_H} "\n#endif // BUILD_OPTIONS_H\n")
configure_file(${BUILD_OPT_H} ${BUILD_OPT_H} @ONLY)
