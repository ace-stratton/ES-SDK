# es-sys-config

Generation of the binary files for the system configuration of the OBC. This utility is implemented as a CLI (Command-Line Interface).

The generation can be done interactively or giving the parameters.

## Caveats

ES ADCS is not supported with the OBC firmware versions 3.0.2 and 4.1.0. Although, it can be set to active with this tool.

## STM32 Programmer CLI

This scripts are using the [STM32 Programmer](https://www.st.com/en/development-tools/stm32cubeprog.html) tool to reflash the configuration in the OBC. With the STM32 Programmer, there is a CLI (Command Line Application) that this script is calling to flash and read from the OBC. **The path to the CLI executable should be added to the system path**. The Script is only calling the exceutable `CLI_EXE = 'STM32_Programmer_CLI'`.

In a typical windows installation the executable is in: `C:\Program Files\STMicroelectronics\STM32Cube\STM32CubeProgrammer\bin`

## OBC Configuration

The configuration structure is defined in the `es_sys_config_helpers.py: PackedConfig` and `es_sys_config_configs.py: ConfigData` classes. `PackedConfig` holds layout information and generation logic for data common to all configurations. `ConfigData` holds layout information about specific hardware modules (e.g. EPS, ADCS, GNSS) and their variants(EPS I, EPSII, ES ADCS, CubeADCS). The combined layout information in es-sys-config is the same as in the OBC Platform code in the [sys_config](../../../espf/config/sys_conf/sys_conf.c) module.

Both the module and the es-sys-config definitions have to be maintained together to keep the same information.

# How to run it

You will need a python installation (it was tested with python 3.9).

## Generate and install the wheel package with pip

The package can be built using the `build` module. Running the following command from the root folder:

If you don't have it installed, type the following command:
```python -m pip install build```

Then build:
```python -m build```

This command is taking the information from the setup.py file.

Once you have the distributed package, you can install it with pip, i.e.:

```python -m pip install es-sys-config --find=dist/```
or, you can give the location of the wheel package (be aware of the verison number):

```python -m pip install dist\es_sys_config-x.y.z-py3-none-any.whl```

If you already have a previous version of es-sys-config installed on your system, you can update it using the generated .whl file:

```python -m pip install --upgrade es-sys-config dist\es_sys_config-x.y.z-py3-none-any.whl```

## Run the python scripts

You can run the module from a command line. Running this from the root folder will run the module the same way as if it was installed:

```python -m es_sys_config```

_Note the underscore instead of the dash. You want to indicate the folder, not the installed module._

**Important**: if you need to install additional libraries to run the es_sys_config module, you can do it by installing the modules listed in requirements.txt:

```python -m pip install -r requirements.txt```

## Install as a python module with pip

From this folder:

```python -m build```

This will generate the distribution packge in the folder `dist`. Now you can install it package with pip:

```python -m pip install .\dist\es_sys_config-x.y.z-py3-none-any.whl```

Now you should be able to call the utility from the command line

```python
> python -m es_sys_config
Usage: es-sys-config [OPTIONS] COMMAND [ARGS]...

Options:
  --version  Show the application's version and exit.
  --help     Show this message and exit.

Commands:
  flash
  generate
  read
```

## Supported Commands

List of commands:

- `es-sys-config --help`: print out a list of the commands available and a description
- `es-sys-config <command> --help`: print out the help for an specific command
- `es-sys-config generate`: Generate the configuration binary file
- `es-sys-config flash`: Generate and flash or flash an existing configuration binary file
- `es-sys-config read`: Read the configuration from an OBC

### Generate command options

```python
> python -m es_sys_config generate --help
Usage: es-sys-config generate [OPTIONS] OBC_VERSION

Arguments:
  obc_version TEXT Version of the OBC software for which the configuration is intended (e.g. 4.1.0).
  
Options:
  -c, --config TEXT  Configuration string (e.g. 1cynn).
  -o, --output TEXT  Name to save the binary configuration file.
  -v, --verbose      [default: False]
  --help             Show this message and exit.
```

### Flash command options

```python
> python -m es_sys_config flash --help
Usage: es-sys-config flash [OPTIONS] OBC_VERSION

Arguments:
  obc_version TEXT Version of the OBC software for which the configuration is intended (e.g. 4.1.0).

Options:
  -c, --config TEXT  Configuration string (e.g. 1cynn).
  -i, --input TEXT   Binary configuration file to be flashed. Note that the file has to be generated for the same OBC version as the one provided to the flash command.
  -o, --output TEXT  Name to save the binary configuration file.
  -v, --verbose      [default: False]
  --help             Show this message and exit.
```

### Read command options

```python
> python -m es_sys_config read --help
Usage: es-sys-config read [OPTIONS]

Options:
  -o, --output TEXT  Name to save the binary configuration file.
  -v, --verbose      [default: False]
  --help             Show this message and exit.
```


_To visualize the binary file (in Windows):_ `format-hex sys_config_SET1.bin | more`
